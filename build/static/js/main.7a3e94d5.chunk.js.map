{"version":3,"sources":["components/header/Header.module.css","components/Item/Item.module.css","components/operators/Operators.module.css","components/header/Header.jsx","components/Item/Item.jsx","components/operators/Operators.jsx","Redux/reducer.js","components/operators/OperatorsContainer.jsx","components/Check/CheckList.jsx","components/Check/CheckListContainer.jsx","App.js","serviceWorker.js","Redux/store.js","index.js","components/Check/CheckList.module.css"],"names":["module","exports","Header","className","s","header","id","add","header__logo","to","src","alt","header__title","Item","props","console","log","classes","wrapper","operator","logo","photo","title","name","Operators","listOfItems","operators","map","i","photoURL","item__wrapper","items","initialState","addNewOperator","Reducer","state","action","type","Math","random","connect","dispatch","onSendRequestClick","alert","CheckList","currentID","match","params","operatorId","Number","parseInt","currentName","form","tel__wrapper","tel","country","enableAreaCodes","disableCountryCode","disableDropdown","countryCodeEditable","required","sum__wrapper","sum","placeholder","min","max","onClick","btn","CurretnPage","withRouter","App","path","render","OperatorsContainer","CheckListContainer","Boolean","window","location","hostname","store","createStore","rerenderEntireTree","ReactDOM","document","getElementById","getState","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a3e94d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\",\"add\":\"Header_add__349_B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"operator\":\"Item_operator__2h3G1\",\"logo\":\"Item_logo__31o-1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item__wrapper\":\"Operators_item__wrapper__FnuBw\",\"items\":\"Operators_items__1-T4_\"};","import React from 'react';\nimport s from './Header.module.css';\nimport { NavLink } from 'react-router-dom';\nconst Header = () => {\n    return (\n        <header className={s.header} id='header'>\n            <div className='container'>\n                <div className={s.add}>нажмите на картинку чтобы начать </div>\n                <div className={s.header__logo}>\n                    <NavLink to='/operators'>\n                        <img src=\"https://media1.tenor.com/images/80e5ab5fa349f1b75d9405fdbc871e5e/tenor.gif?itemid=14693580\" alt='#' />\n                    </NavLink>\n                </div>\n                <div className={s.header__title}>\n                        <h1>Терминал для оплаты мобильной связи</h1>\n                </div>\n            </div>\n        </header>\n    \n    );\n}\nexport default Header;\n","import React from 'react';\nimport classes from './Item.module.css'\nimport { NavLink } from 'react-router-dom';\nconst Item = (props) => {\n  console.log(props);\n  return (\n    <div className={classes.wrapper}>\n      <NavLink className={classes.operator} to={() => '/checklist/' + props.id}>\n        <img className={classes.logo} src={props.photo} alt=\"#\" />\n        <h3 className={classes.title}>{props.name}</h3>\n      </NavLink>\n    </div>\n  );\n}\nexport default Item;\n","import React from 'react';\nimport classes from './Operators.module.css'\nimport Item from '../Item/Item';\nconst Operators = (props) => {\n  let listOfItems = props.operators.map(i => <Item id={i.id} name={i.name} photo={i.photoURL} />)\n    \n    return (\n      <div className={classes.item__wrapper}>\n        <h3 className={classes.title}>Выбирите вашего оператора</h3>\n        <div className={classes.items} >\n        {listOfItems}\n        </div>\n      </div>\n    );\n        }\nexport default Operators;\n","const SEND_REQUEST = \"SEND_REQUEST\";\nlet initialState = {\n  operators: [\n    {\n      id: 1,\n      name: \"MTC\",\n      photoURL: `https://cdn.rns.online/imgs/2019/06/24/16/422604/392cf6e9fd55964ef87593ad2970feef68d05fed.png`\n    },\n    {\n      id: 2,\n      name: \"Beeline\",\n      photoURL: `https://img2.freepng.ru/20180803/trg/kisspng-%D0%9F%D0%B0%D1%80%D1%82%D0%BD%D0%B5%D1%80%D1%8B-%D0%91%D0%B8%D0%B7-%D0%A2%D0%B5%D0%BB%D0%B5%D0%BA%D0%BE%D0%BC-5b6420666bc143.6107165715332885504414.jpg`\n    },\n    {\n      id: 3,\n      name: \"Megafone\",\n      photoURL: `https://technovolga.ru/upload/iblock/ecd/ecdfb7358b8c6d3c2842e6b786cc9c69.png`\n    }\n  ],\n  addNewOperator() {}\n};\n\nconst Reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SEND_REQUEST: {\n      return Math.random() >= 0.5;\n    }\n    default:\n      return state;\n  }\n};\nexport default Reducer;\nexport const sendRequestCreator = () => ({ type: SEND_REQUEST });\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Operators from \"./Operators\";\nimport { sendRequestCreator } from '../../Redux/reducer';\nlet mapStateToProps = (state) => {\n  return {\n    operators: state.operators\n  }\n};\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    onSendRequestClick: () => {\n      dispatch(sendRequestCreator());\n    },\n  }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Operators);\n","import React from 'react';\nimport classes from './CheckList.module.css';\nimport PhoneInput from 'react-phone-input-2'\n\nlet onSendRequestClick = () => {\n  let a = Math.random() >= 0.5;\n  if (a === false) { return alert(\"Ошибка , попробуйте еще раз\") }\n  else { return alert(\"Запрос успешно отправлен!\") }\n}\n\nconst CheckList = (props) => {\n  let currentID = props.match.params.operatorId;\n  currentID = Number.parseInt(currentID) - 1;\n  let currentName = props.operators[currentID].name;\n  return (\n    <div className={classes.wrapper}>\n      <h3>{currentName}</h3> <br />\n      <form className={classes.form}>\n        <label className={classes.tel__wrapper}>\n          Введите номер телефона <br />\n          <div className={classes.tel}>\n            <PhoneInput\n              country={\"ru\"}\n              enableAreaCodes={true}\n              disableCountryCode={false}\n              disableDropdown={true}\n              countryCodeEditable={false}\n              required\n            />\n          </div>\n        </label>\n        <label className={classes.sum__wrapper}>\n          <br />\n            Введите сумму (100-1000 руб)\n            <br />\n          <div className={classes}>\n          </div>\n          <input\n            type=\"number\"\n            className={classes.sum}\n            placeholder=\"Сумма\"\n            required\n            min=\"100\"\n            max=\"1000\"\n          />\n        </label>\n        <br />\n        </form>\n        <button onClick={onSendRequestClick} className={classes.btn}>\n          Оплатить\n          </button>\n    </div>\n  );\n}\nexport default CheckList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport CheckList from \"./CheckList\";\nimport { sendRequestCreator } from '../../Redux/reducer';\nimport { withRouter } from 'react-router-dom';\n\nlet mapStateToProps = (state) => {\n  return {\n    operators: state.operators\n  }\n};\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    onSendRequestClick: () => {\n      dispatch(sendRequestCreator());\n    },\n  }\n};\nlet CurretnPage = withRouter(CheckList)\nexport default connect(mapStateToProps, mapDispatchToProps)(CurretnPage);\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/header/Header\";\nimport OperatorsContainer from \"./components/operators/OperatorsContainer\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport CheckListContainer from \"./components/Check/CheckListContainer\";\n\nfunction App(props) {\n  return (\n    <BrowserRouter>\n      <div className=\"app__wrapper\">\n        <Header />\n        <Route path=\"/operators\" render={() => <OperatorsContainer />} />\n        <Route\n          path=\"/checklist/:operatorId\"\n          render={() => <CheckListContainer />}\n        />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from \"redux\";\nimport Reducer from \"./reducer\";\n\nlet store = createStore(Reducer);\nwindow.store = store;\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./Redux/store.js\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nexport let rerenderEntireTree = state => {\n  ReactDOM.render(\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n  );\n};\nrerenderEntireTree(store.getState());\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CheckList_wrapper__168KL\",\"btn\":\"CheckList_btn__3RIE8\",\"react-tel-input\":\"CheckList_react-tel-input__FDDPI\",\"form-control\":\"CheckList_form-control__DoviP\"};"],"sourceRoot":""}
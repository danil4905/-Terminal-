{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nimport isViablePhoneNumber from './isViablePhoneNumber'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number = void 0;\n  var ext = void 0; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n  }\n\n  return 'tel:' + number + (ext ? ';ext=' + ext : '');\n}","map":{"version":3,"sources":["../source/RFC3966.js"],"names":["number","ext","text","part","name","value","isViablePhoneNumber","result"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,mBAAA,MAAA,uBAAA,C,CAEA;;AAEA;;;;;AAIA,OAAO,SAAA,YAAA,CAAA,IAAA,EACP;AACC,MAAIA,MAAAA,GAAAA,KAAJ,CAAA;AACA,MAAIC,GAAAA,GAAAA,KAAJ,CAAA,CAFD,CAIC;;AACAC,EAAAA,IAAAA,GAAOA,IAAAA,CAAAA,OAAAA,CAAAA,OAAAA,EAAPA,MAAOA,CAAPA;;AAEA,OAAA,IAAA,SAAA,GAAmBA,IAAAA,CAAAA,KAAAA,CAAnB,GAAmBA,CAAnB,EAAA,QAAA,GAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IACA;AAAA,QAAA,IAAA;;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,EAAA,IAAA,SAAA,CAAA,MAAA,EAAA;AAAA,MAAA,IAAA,GAAA,SAAA,CAAA,EAAA,EAAA,CAAA;AAAA,KAAA,MAAA;AAAA,MAAA,EAAA,GAAA,SAAA,CAAA,IAAA,EAAA;AAAA,UAAA,EAAA,CAAA,IAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA,CAAA,KAAA;AAAA;;AAAA,QADWC,IACX,GAAA,IAAA;;AAAA,QAAA,WAAA,GACuBA,IAAAA,CAAAA,KAAAA,CADvB,GACuBA,CADvB;AAAA,QAAA,YAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;AAAA,QACQC,IADR,GAAA,YAAA,CAAA,CAAA,CAAA;AAAA,QACcC,KADd,GAAA,YAAA,CAAA,CAAA,CAAA;;AAEC,YAAA,IAAA;AAEC,WAAA,KAAA;AACCL,QAAAA,MAAAA,GAAAA,KAAAA;AACA;;AACD,WAAA,KAAA;AACCC,QAAAA,GAAAA,GAAAA,KAAAA;AACA;;AACD,WAAA,eAAA;AACC;AACA;AACA,YAAII,KAAAA,CAAAA,CAAAA,CAAAA,KAAJ,GAAA,EAAsB;AACrBL,UAAAA,MAAAA,GAASK,KAAAA,GAATL,MAAAA;AACA;;AACD;AAdF;AAgBA,GA1BF,CA4BC;;;AACA,MAAI,CAACM,mBAAAA,CAAL,MAAKA,CAAL,EACA;AACC,WAAA,EAAA;AACA;;AAED,MAAMC,MAAAA,GAAS;AAAEP,IAAAA,MAAAA,EAAjB;AAAe,GAAf;;AACA,MAAA,GAAA,EAAS;AACRO,IAAAA,MAAAA,CAAAA,GAAAA,GAAAA,GAAAA;AACA;;AACD,SAAA,MAAA;AACA;AAED;;;;;AAIA,OAAO,SAAA,aAAA,CAAA,KAAA,EACP;AAAA,MADgCP,MAChC,GAAA,KAAA,CADgCA,MAChC;AAAA,MADwCC,GACxC,GAAA,KAAA,CADwCA,GACxC;;AACC,MAAI,CAAJ,MAAA,EACA;AACC,WAAA,EAAA;AACA;;AAED,MAAID,MAAAA,CAAAA,CAAAA,CAAAA,KAAJ,GAAA,EACA;AACC,UAAM,IAAA,KAAA,CAAN,2DAAM,CAAN;AACA;;AAED,SAAA,SAAA,MAAA,IAAuBC,GAAAA,GAAM,UAANA,GAAAA,GAAvB,EAAA,CAAA;AACA","sourcesContent":["import isViablePhoneNumber from './isViablePhoneNumber'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text)\r\n{\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';'))\r\n\t{\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name)\r\n\t\t{\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext })\r\n{\r\n\tif (!number)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}"]},"metadata":{},"sourceType":"module"}
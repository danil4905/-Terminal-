{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.onBlur = onBlur;\nexports.focus = focus;\n\nvar _dom = require('./dom');\n\nfunction onBlur(event, onFocusOut, getComponentNode, getComponentNode2, preventBlur) {\n  function _onBlur(focusedNode) {\n    if (preventBlur) {\n      if (preventBlur() === true) {\n        return false;\n      }\n    } // If the currently focused element is inside the expandable\n    // then don't collapse it.\n\n\n    if (focusedNode && // Fixes \"Argument 1 of Node.contains does not implement interface Node.\".\n    focusedNode instanceof Element && (getComponentNode().contains(focusedNode) || getComponentNode2 && getComponentNode2().contains(focusedNode))) {\n      return false;\n    } // Collapse the expandable.\n    // (clicked/tapped outside or tabbed-out)\n\n\n    onFocusOut(event);\n    return true;\n  } // Blur `event.relatedTarget` doesn't work in Internet Explorer (in React).\n  // https://github.com/gpbl/react-day-picker/issues/668\n  // https://github.com/facebook/react/issues/3751\n  //\n  // Therefore, using a 30ms timeout hack in `onBlur` handler\n  // to get the new currently focused page element\n  // and check if that element is inside the component.\n  // https://github.com/mui-org/material-ui/blob/v1-beta/packages/material-ui/src/Menu/MenuList.js\n  // Until Internet Explorer is no longer a supported browser.\n  //\n\n\n  if ((0, _dom.isInternetExplorer)()) {\n    return setTimeout(function () {\n      return getComponentNode() && _onBlur(document.activeElement);\n    }, 30);\n  } // // Safari (both macOS and iOS) has a bug: `<button/>`s not getting focus.\n  // // https://stackoverflow.com/questions/20359962/jquery-mobile-focusout-event-for-relatedtarget-returns-incorrect-result-in-safar\n  // if (!event.relatedTarget) {\n  // \tif (getComponentNode2 && getComponentNode2().tagName.toLowerCase() === 'button') {\n  // \t\t// The `<button/>` could be the actual `relatedTarget` in Safari.\n  // \t\t// The Internet Explorer workaround won't work here too\n  // \t\t// because `document.activeElement` is also `undefined`.\n  // \t\t// No workaround here.\n  // \t}\n  // }\n  // There was an error in Firefox 52:\n  // \"Argument 1 of Node.contains does not implement interface Node\".\n  // To prevent such errors `event.relatedTarget` is validated manually here.\n\n\n  return _onBlur((0, _dom.isElement)(event.relatedTarget) ? event.relatedTarget : undefined);\n}\n/**\r\n * Focuses on a React component (if any).\r\n * @param  {?object} component\r\n */\n\n\nfunction focus(component) {\n  // If the component has been already unmounted.\n  // (safety)\n  if (!component) {\n    return;\n  }\n\n  if (typeof component.focus === 'function') {\n    component.focus();\n    return true;\n  } // `findDOMNode()` is deprecated in React.\n  // https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage\n  // // For cases when `<List.Item/>` wraps some custom\n  // // `<Button/>` component which renders a generic `<button/>`.\n  // const node = ReactDOM.findDOMNode(component)\n  // if (node && node.focus) {\n  // \tnode.focus()\n  // \treturn true\n  // }\n\n}","map":{"version":3,"sources":["../../source/utility/focus.js"],"names":["onBlur","preventBlur","focusedNode","getComponentNode","getComponentNode2","onFocusOut","_onBlur","document","event","focus","component"],"mappings":";;;;;QAEgBA,M,GAAAA,M;QAiEAS,K,GAAAA,K;;AAnEhB,IAAA,IAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEO,SAAA,MAAA,CAAA,KAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,WAAA,EACP;AACC,WAAA,OAAA,CAAA,WAAA,EACA;AACC,QAAA,WAAA,EAAiB;AAChB,UAAIR,WAAAA,OAAJ,IAAA,EAA4B;AAC3B,eAAA,KAAA;AACA;AACD,KALF,CAOC;AACA;;;AACA,QACCC,WAAAA,IACA;AACAA,IAAAA,WAAAA,YAFAA,OAAAA,KAICC,gBAAAA,GAAAA,QAAAA,CAAAA,WAAAA,KACCC,iBAAAA,IAAqBA,iBAAAA,GAAAA,QAAAA,CANxB,WAMwBA,CALvBF,CADD,EAQE;AACD,aAAA,KAAA;AACA,KAnBF,CAqBC;AACA;;;AACAG,IAAAA,UAAAA,CAAAA,KAAAA,CAAAA;AACA,WAAA,IAAA;AACA,GA3BF,CA6BC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAI,CAAA,GAAA,IAAA,CAAJ,kBAAI,GAAJ,EAA0B;AACzB,WAAO,UAAA,CAAW,YAAA;AAAA,aAAMF,gBAAAA,MAAsBG,OAAAA,CAAQC,QAAAA,CAApC,aAA4BD,CAA5B;AAAX,KAAA,EAAP,EAAO,CAAP;AACA,GAzCF,CA2CC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA,SAAOA,OAAAA,CAAQ,CAAA,GAAA,IAAA,CAAA,SAAA,EAAUE,KAAAA,CAAV,aAAA,IAAiCA,KAAAA,CAAjC,aAAA,GAAf,SAAOF,CAAP;AACA;AAED;;;;;;AAIO,SAAA,KAAA,CAAA,SAAA,EACP;AACC;AACA;AACA,MAAI,CAAJ,SAAA,EAAgB;AACf;AACA;;AAED,MAAI,OAAOI,SAAAA,CAAP,KAAA,KAAJ,UAAA,EAA2C;AAC1CA,IAAAA,SAAAA,CAAAA,KAAAA;AACA,WAAA,IAAA;AACA,GAVF,CAYC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { isInternetExplorer, isElement } from './dom'\r\n\r\nexport function onBlur(event, onFocusOut, getComponentNode, getComponentNode2, preventBlur)\r\n{\r\n\tfunction _onBlur(focusedNode)\r\n\t{\r\n\t\tif (preventBlur) {\r\n\t\t\tif (preventBlur() === true) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the currently focused element is inside the expandable\r\n\t\t// then don't collapse it.\r\n\t\tif (\r\n\t\t\tfocusedNode &&\r\n\t\t\t// Fixes \"Argument 1 of Node.contains does not implement interface Node.\".\r\n\t\t\tfocusedNode instanceof Element &&\r\n\t\t\t(\r\n\t\t\t\tgetComponentNode().contains(focusedNode) ||\r\n\t\t\t\t(getComponentNode2 && getComponentNode2().contains(focusedNode))\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\t// Collapse the expandable.\r\n\t\t// (clicked/tapped outside or tabbed-out)\r\n\t\tonFocusOut(event)\r\n\t\treturn true\r\n\t}\r\n\r\n\t// Blur `event.relatedTarget` doesn't work in Internet Explorer (in React).\r\n\t// https://github.com/gpbl/react-day-picker/issues/668\r\n\t// https://github.com/facebook/react/issues/3751\r\n\t//\r\n\t// Therefore, using a 30ms timeout hack in `onBlur` handler\r\n\t// to get the new currently focused page element\r\n\t// and check if that element is inside the component.\r\n\t// https://github.com/mui-org/material-ui/blob/v1-beta/packages/material-ui/src/Menu/MenuList.js\r\n\t// Until Internet Explorer is no longer a supported browser.\r\n\t//\r\n\tif (isInternetExplorer()) {\r\n\t\treturn setTimeout(() => getComponentNode() && _onBlur(document.activeElement), 30)\r\n\t}\r\n\r\n\t// // Safari (both macOS and iOS) has a bug: `<button/>`s not getting focus.\r\n\t// // https://stackoverflow.com/questions/20359962/jquery-mobile-focusout-event-for-relatedtarget-returns-incorrect-result-in-safar\r\n\t// if (!event.relatedTarget) {\r\n\t// \tif (getComponentNode2 && getComponentNode2().tagName.toLowerCase() === 'button') {\r\n\t// \t\t// The `<button/>` could be the actual `relatedTarget` in Safari.\r\n\t// \t\t// The Internet Explorer workaround won't work here too\r\n\t// \t\t// because `document.activeElement` is also `undefined`.\r\n\t// \t\t// No workaround here.\r\n\t// \t}\r\n\t// }\r\n\r\n\t// There was an error in Firefox 52:\r\n\t// \"Argument 1 of Node.contains does not implement interface Node\".\r\n\t// To prevent such errors `event.relatedTarget` is validated manually here.\r\n\treturn _onBlur(isElement(event.relatedTarget) ? event.relatedTarget : undefined)\r\n}\r\n\r\n/**\r\n * Focuses on a React component (if any).\r\n * @param  {?object} component\r\n */\r\nexport function focus(component)\r\n{\r\n\t// If the component has been already unmounted.\r\n\t// (safety)\r\n\tif (!component) {\r\n\t\treturn\r\n\t}\r\n\r\n\tif (typeof component.focus === 'function') {\r\n\t\tcomponent.focus()\r\n\t\treturn true\r\n\t}\r\n\r\n\t// `findDOMNode()` is deprecated in React.\r\n\t// https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage\r\n\t// // For cases when `<List.Item/>` wraps some custom\r\n\t// // `<Button/>` component which renders a generic `<button/>`.\r\n\t// const node = ReactDOM.findDOMNode(component)\r\n\t// if (node && node.focus) {\r\n\t// \tnode.focus()\r\n\t// \treturn true\r\n\t// }\r\n}"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    } // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      var _metadata = new Metadata(metadata);\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: 'isPossible',\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: 'isValid',\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: 'getType',\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: 'format',\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _extends({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: 'formatNational',\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: 'formatInternational',\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: 'getURI',\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};","map":{"version":3,"sources":["../source/PhoneNumber.js"],"names":["PhoneNumber","isCountryCode","_metadata","countryCallingCode","isPossibleNumber","v2","isValidNumber","getNumberType","format","options","formatNumber"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,QAAA,MAAA,YAAA;AACA,OAAA,gBAAA,MAAA,qBAAA;AACA,OAAA,aAAA,MAAA,aAAA;AACA,OAAA,sBAAA,MAAA,2BAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,YAAA,MAAA,WAAA;;IAEqBA,W;AACpB,WAAA,WAAA,CAAA,kBAAA,EAAA,cAAA,EAAA,QAAA,EAA0D;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;;AACzD,QAAI,CAAJ,kBAAA,EAAyB;AACxB,YAAM,IAAA,SAAA,CAAN,iCAAM,CAAN;AACA;;AACD,QAAI,CAAJ,cAAA,EAAqB;AACpB,YAAM,IAAA,SAAA,CAAN,6BAAM,CAAN;AACA,KANwD,CAOzD;AACA;;;AACA,QAAIC,aAAAA,CAAJ,kBAAIA,CAAJ,EAAuC;AACtC,WAAA,OAAA,GAAA,kBAAA;;AACA,UAAMC,SAAAA,GAAY,IAAA,QAAA,CAAlB,QAAkB,CAAlB;;AACAA,MAAAA,SAAAA,CAAAA,OAAAA,CAAAA,kBAAAA;;AACAC,MAAAA,kBAAAA,GAAqBD,SAAAA,CAArBC,kBAAqBD,EAArBC;AACA;;AACD,SAAA,kBAAA,GAAA,kBAAA;AACA,SAAA,cAAA,GAAA,cAAA;AACA,SAAA,MAAA,GAAc,MAAM,KAAN,kBAAA,GAAgC,KAA9C,cAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACA;;;;iCAEY;AACZ,aAAOC,gBAAAA,CAAAA,IAAAA,EAAuB;AAAEC,QAAAA,EAAAA,EAAzBD;AAAuB,OAAvBA,EAAqC,KAA5C,QAAOA,CAAP;AACA;;;8BAES;AACT,aAAOE,aAAAA,CAAAA,IAAAA,EAAoB;AAAED,QAAAA,EAAAA,EAAtBC;AAAoB,OAApBA,EAAkC,KAAzC,QAAOA,CAAP;AACA,K,CAED;AACA;AACA;AACA;AACA;;;;8BAEU;AACT,aAAOC,aAAAA,CAAAA,IAAAA,EAAoB;AAAEF,QAAAA,EAAAA,EAAtBE;AAAoB,OAApBA,EAAkC,KAAzC,QAAOA,CAAP;AACA;;;2BAEMC,O,EAAQC,O,EAAS;AACvB,aAAOC,YAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAA2BD,OAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAAA,OAAAA,EAAAA;AAAwBJ,QAAAA,EAAAA,EAAxBI;AAAAA,OAAAA,CAAAA,GAAqC;AAAEJ,QAAAA,EAAAA,EAAlEK;AAAgE,OAAhEA,EAA8E,KAArF,QAAOA,CAAP;AACA;;;mCAEcD,O,EAAS;AACvB,aAAO,KAAA,MAAA,CAAA,UAAA,EAAP,OAAO,CAAP;AACA;;;wCAEmBA,O,EAAS;AAC5B,aAAO,KAAA,MAAA,CAAA,eAAA,EAAP,OAAO,CAAP;AACA;;;2BAEMA,O,EAAS;AACf,aAAO,KAAA,MAAA,CAAA,SAAA,EAAP,OAAO,CAAP;AACA;;;;;;eAtDmBT,W;;AAyDrB,IAAMC,aAAAA,GAAgB,SAAhBA,aAAgB,CAAA,KAAA,EAAA;AAAA,SAAW,aAAA,IAAA,CAAA,KAAA,CAAX;AAAtB,CAAA","sourcesContent":["import Metadata from './metadata'\r\nimport isPossibleNumber from './isPossibleNumber_'\r\nimport isValidNumber from './validate_'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_'\r\nimport getNumberType from './getNumberType_'\r\nimport formatNumber from './format_'\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\tconst _metadata = new Metadata(metadata)\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(this, format, options ? { ...options, v2: true } : { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _class2, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _ScrollableList = require('./ScrollableList');\n\nvar _ScrollableList2 = _interopRequireDefault(_ScrollableList);\n\nvar _Expandable = require('./Expandable');\n\nvar _Expandable2 = _interopRequireDefault(_Expandable);\n\nvar _List = require('./List');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nvar ExpandableList = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp2 = _class2 = function (_PureComponent) {\n  _inherits(ExpandableList, _PureComponent);\n\n  function ExpandableList() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ExpandableList);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ExpandableList.__proto__ || Object.getPrototypeOf(ExpandableList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.toggle = function () {\n      return _this.expandable.toggle();\n    }, _this.expand = function (parameters) {\n      return _this.expandable.expand(parameters);\n    }, _this.collapse = function () {\n      return _this.expandable.collapse();\n    }, _this.isExpanded = function () {\n      return _this.expandable.isExpanded();\n    }, _this.preload = function () {\n      return _this.expandable.preload();\n    }, _this.onBlur = function (event) {\n      return _this.expandable.onBlur(event);\n    }, _this.chooseFocusedItem = function () {\n      return _this.list && _this.list.chooseFocusedItem();\n    }, _this.getFocusedItemIndex = function () {\n      return _this.list ? _this.list.getFocusedItemIndex() : undefined;\n    }, _this.focusItem = function (index) {\n      return _this.list.focusItem(index);\n    }, _this.clearFocus = function () {\n      return _this.list.clearFocus();\n    }, _this.onKeyDown = function (event) {\n      var onEnter = _this.props.onEnter;\n\n      switch (event.keyCode) {\n        // \"Escape\".\n        // Collapse.\n        case 27:\n          event.preventDefault(); // Collapse the list if it's expanded.\n\n          return _this.expandable.collapse();\n        // \"Up\" arrow.\n        // Select the previous item (if present).\n\n        case 38: // \"Down\" arrow.\n        // Select the next item (if present).\n\n        case 40:\n          if (_this.isExpanded()) {\n            // Navigate the list (if it was already expanded).\n            _this.list.onKeyDown(event);\n          } else {\n            // Expand the list if it's collapsed.\n            event.preventDefault();\n\n            _this.expandable.expand();\n          }\n\n          return;\n        // \"Enter\".\n\n        case 13:\n          // Select the currently focused item.\n          return _this.list && _this.list.onKeyDown(event);\n      }\n    }, _this.storeExpandableRef = function (ref) {\n      return _this.expandable = ref;\n    }, _this.storeListRef = function (ref) {\n      return _this.list = ref;\n    }, _this.onChange = function (value, index) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          focusSelectedItem = _this$props.focusSelectedItem;\n\n      if (onChange) {\n        onChange(value, index);\n      }\n\n      if (focusSelectedItem) {\n        _this.setState({\n          selectedItemIndex: index\n        });\n      }\n\n      _this.collapsedDueToItemBeingSelected = true;\n\n      _this.collapse();\n\n      _this.collapsedDueToItemBeingSelected = undefined;\n    }, _this.hasOnChange = function () {\n      var onChange = _this.props.onChange;\n      return !!onChange;\n    }, _this.onCollapse = function (parameters) {\n      var onCollapse = _this.props.onCollapse;\n\n      if (onCollapse) {\n        onCollapse(_extends({}, parameters, {\n          collapsedDueToItemBeingSelected: _this.collapsedDueToItemBeingSelected\n        }));\n      }\n\n      _this.list && _this.list.clearFocus();\n    }, _this.onExpand = function () {\n      var _this$props2 = _this.props,\n          focusOnExpand = _this$props2.focusOnExpand,\n          onExpand = _this$props2.onExpand,\n          children = _this$props2.children;\n      var selectedItemIndex = _this.state.selectedItemIndex;\n\n      if (onExpand) {\n        onExpand();\n      } // Re-calculate `<ScrollableList/>` height.\n      // Because `<ScrollableList/>` is always mounted,\n      // even when collapsed, so its height should be\n      // re-calculated after it's actually expanded.\n      // Re-calculating `<ScrollableList/>` height\n      // before focusing the list because otherwise\n      // a long list wouldn't have its `max-height` set\n      // and focusing it (`this.list.focus()`) could\n      // result in scroll position \"jump\".\n\n\n      _this.list.calculateHeight();\n\n      if (focusOnExpand) {\n        if (selectedItemIndex === undefined) {\n          _this.list.focus();\n        } else {\n          _this.list.focusItem(selectedItemIndex);\n        }\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ExpandableList, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          animation = _props.animation,\n          alignment = _props.alignment,\n          upward = _props.upward,\n          scrollIntoView = _props.scrollIntoView,\n          preload = _props.preload,\n          onPreloadStateChange = _props.onPreloadStateChange,\n          getTogglerNode = _props.getTogglerNode,\n          onFocusOut = _props.onFocusOut,\n          onChange = _props.onChange,\n          highlightSelectedItem = _props.highlightSelectedItem,\n          closeLabel = _props.closeLabel,\n          closeButtonIcon = _props.closeButtonIcon,\n          className = _props.className,\n          children = _props.children,\n          rest = _objectWithoutProperties(_props, ['animation', 'alignment', 'upward', 'scrollIntoView', 'preload', 'onPreloadStateChange', 'getTogglerNode', 'onFocusOut', 'onChange', 'highlightSelectedItem', 'closeLabel', 'closeButtonIcon', 'className', 'children']);\n\n      return _react2.default.createElement(_Expandable2.default, {\n        ref: this.storeExpandableRef,\n        animation: animation,\n        alignment: alignment,\n        upward: upward,\n        scrollIntoView: scrollIntoView,\n        preload: preload,\n        onPreloadStateChange: onPreloadStateChange,\n        onExpand: this.onExpand,\n        onCollapse: this.onCollapse,\n        getTogglerNode: getTogglerNode,\n        onFocusOut: onFocusOut,\n        closeLabel: closeLabel,\n        closeButtonIcon: closeButtonIcon,\n        className: (0, _classnames2.default)(className, 'rrui__expandable-list', {\n          'rrui__expandable-list--left-aligned': alignment === 'left',\n          'rrui__expandable-list--right-aligned': alignment === 'right'\n        })\n      }, _react2.default.createElement(_ScrollableList2.default, _extends({}, rest, {\n        expandable: true,\n        ref: this.storeListRef,\n        onChange: this.onChange,\n        hasOnChange: this.hasOnChange(),\n        highlightSelectedItem: onChange === undefined && highlightSelectedItem === undefined ? false : highlightSelectedItem\n      }), children));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, state) {\n      // Using `!state.hasOwnProperty()` as \"not initialized\"\n      // because when there's an empty option `props.value` is `undefined`.\n      if (props.focusSelectedItem && (!state.hasOwnProperty('selectedItemValue') || state.selectedItemValue !== props.value)) {\n        return {\n          selectedItemValue: props.value,\n          // `findItemIndexByValue()` must return `undefined` for \"no such item\".\n          selectedItemIndex: (0, _List.findItemIndexByValue)(props.value, props.children)\n        };\n      }\n\n      return null;\n    } // If a `<List/>` has `onChange` then it wraps `<List.Item/>`s with `<button/>`s.\n    // The `onChange` added by `<ExpandableList/>` overrides the original `onChange`.\n    // If there was no `onChange` — there will be one.\n    // So to retain that info `hasOnChange` property is used as a workaround.\n\n  }]);\n\n  return ExpandableList;\n}(PureComponent), _class2.propTypes = {\n  // Maximum items fitting the list height (scrollable).\n  scrollMaxItems: _propTypes2.default.number,\n  // Whether should add `margin-right` for scrollbar width on overflow.\n  scrollBarPadding: _propTypes2.default.bool,\n  // Preloads the contents of the expandable list\n  // before it's expanded. Must return a `Promise`.\n  preload: _propTypes2.default.func,\n  // Whether the list items should be focused upon expand.\n  focusOnExpand: _propTypes2.default.bool.isRequired,\n  focusSelectedItem: _propTypes2.default.bool.isRequired,\n  animation: _propTypes2.default.string,\n  className: _propTypes2.default.string\n}, _class2.defaultProps = {\n  alignment: 'left',\n  focusOnExpand: true,\n  focusSelectedItem: true\n}, _temp2)) || _class;\n\nexports.default = ExpandableList;","map":{"version":3,"sources":["../source/ExpandableList.js"],"names":["PureComponent","ExpandableList","propTypes","scrollMaxItems","scrollBarPadding","preload","focusOnExpand","focusSelectedItem","animation","className","string","defaultProps","alignment","props","state","selectedItemValue","selectedItemIndex","toggle","expand","collapse","isExpanded","onBlur","chooseFocusedItem","getFocusedItemIndex","focusItem","clearFocus","onKeyDown","onEnter","event","storeExpandableRef","storeListRef","onChange","index","hasOnChange","onCollapse","collapsedDueToItemBeingSelected","onExpand","children","upward","scrollIntoView","onPreloadStateChange","getTogglerNode","onFocusOut","highlightSelectedItem","closeLabel","closeButtonIcon","rest"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\n\r\nimport ScrollableList from './ScrollableList'\r\nimport Expandable from './Expandable'\r\nimport { findItemIndexByValue } from './List'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n@reactLifecyclesCompat\r\nexport default class ExpandableList extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Maximum items fitting the list height (scrollable).\r\n\t\tscrollMaxItems : PropTypes.number,\r\n\r\n\t\t// Whether should add `margin-right` for scrollbar width on overflow.\r\n\t\tscrollBarPadding : PropTypes.bool,\r\n\r\n\t\t// Preloads the contents of the expandable list\r\n\t\t// before it's expanded. Must return a `Promise`.\r\n\t\tpreload : PropTypes.func,\r\n\r\n\t\t// Whether the list items should be focused upon expand.\r\n\t\tfocusOnExpand : PropTypes.bool.isRequired,\r\n\t\tfocusSelectedItem : PropTypes.bool.isRequired,\r\n\r\n\t\tanimation : PropTypes.string,\r\n\r\n\t\tclassName : PropTypes.string\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\talignment : 'left',\r\n\t\tfocusOnExpand : true,\r\n\t\tfocusSelectedItem : true\r\n\t}\r\n\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\t// Using `!state.hasOwnProperty()` as \"not initialized\"\r\n\t\t// because when there's an empty option `props.value` is `undefined`.\r\n\t\tif (props.focusSelectedItem &&\r\n\t\t\t(!state.hasOwnProperty('selectedItemValue') || state.selectedItemValue !== props.value)) {\r\n\t\t\treturn {\r\n\t\t\t\tselectedItemValue : props.value,\r\n\t\t\t\t// `findItemIndexByValue()` must return `undefined` for \"no such item\".\r\n\t\t\t\tselectedItemIndex : findItemIndexByValue(props.value, props.children)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null\r\n\t}\r\n\r\n\tstate = {}\r\n\r\n\ttoggle     = () => this.expandable.toggle()\r\n\texpand     = (parameters) => this.expandable.expand(parameters)\r\n\tcollapse   = () => this.expandable.collapse()\r\n\tisExpanded = () => this.expandable.isExpanded()\r\n\tpreload    = () => this.expandable.preload()\r\n\tonBlur     = (event) => this.expandable.onBlur(event)\r\n\r\n\tchooseFocusedItem = () => this.list && this.list.chooseFocusedItem()\r\n\tgetFocusedItemIndex = () => this.list ? this.list.getFocusedItemIndex() : undefined\r\n\tfocusItem = (index) => this.list.focusItem(index)\r\n\tclearFocus = () => this.list.clearFocus()\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onEnter } = this.props\r\n\r\n\t\tswitch (event.keyCode)\r\n\t\t{\r\n\t\t\t// \"Escape\".\r\n\t\t\t// Collapse.\r\n\t\t\tcase 27:\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\t// Collapse the list if it's expanded.\r\n\t\t\t\treturn this.expandable.collapse()\r\n\r\n\t\t\t// \"Up\" arrow.\r\n\t\t\t// Select the previous item (if present).\r\n\t\t\tcase 38:\r\n\t\t\t// \"Down\" arrow.\r\n\t\t\t// Select the next item (if present).\r\n\t\t\tcase 40:\r\n\t\t\t\tif (this.isExpanded())\r\n\t\t\t\t{\r\n\t\t\t\t\t// Navigate the list (if it was already expanded).\r\n\t\t\t\t\tthis.list.onKeyDown(event)\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// Expand the list if it's collapsed.\r\n\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\tthis.expandable.expand()\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\r\n\t\t\t// \"Enter\".\r\n\t\t\tcase 13:\r\n\t\t\t\t// Select the currently focused item.\r\n\t\t\t\treturn this.list && this.list.onKeyDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\tstoreExpandableRef = (ref) => this.expandable = ref\r\n\tstoreListRef = (ref) => this.list = ref\r\n\r\n\tonChange = (value, index) =>\r\n\t{\r\n\t\tconst { onChange, focusSelectedItem } = this.props\r\n\r\n\t\tif (onChange) {\r\n\t\t\tonChange(value, index)\r\n\t\t}\r\n\r\n\t\tif (focusSelectedItem)\r\n\t\t{\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedItemIndex : index\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.collapsedDueToItemBeingSelected = true\r\n\t\tthis.collapse()\r\n\t\tthis.collapsedDueToItemBeingSelected = undefined\r\n\t}\r\n\r\n\t// If a `<List/>` has `onChange` then it wraps `<List.Item/>`s with `<button/>`s.\r\n\t// The `onChange` added by `<ExpandableList/>` overrides the original `onChange`.\r\n\t// If there was no `onChange` — there will be one.\r\n\t// So to retain that info `hasOnChange` property is used as a workaround.\r\n\thasOnChange = () => {\r\n\t\tconst { onChange } = this.props\r\n\t\treturn !!onChange\r\n\t}\r\n\r\n\tonCollapse = (parameters) =>\r\n\t{\r\n\t\tconst { onCollapse } = this.props\r\n\r\n\t\tif (onCollapse)\r\n\t\t{\r\n\t\t\tonCollapse\r\n\t\t\t({\r\n\t\t\t\t...parameters,\r\n\t\t\t\tcollapsedDueToItemBeingSelected : this.collapsedDueToItemBeingSelected\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.list && this.list.clearFocus()\r\n\t}\r\n\r\n\tonExpand = () =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tfocusOnExpand,\r\n\t\t\tonExpand,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst { selectedItemIndex } = this.state\r\n\r\n\t\tif (onExpand) {\r\n\t\t\tonExpand()\r\n\t\t}\r\n\r\n\t\t// Re-calculate `<ScrollableList/>` height.\r\n\t\t// Because `<ScrollableList/>` is always mounted,\r\n\t\t// even when collapsed, so its height should be\r\n\t\t// re-calculated after it's actually expanded.\r\n\t\t// Re-calculating `<ScrollableList/>` height\r\n\t\t// before focusing the list because otherwise\r\n\t\t// a long list wouldn't have its `max-height` set\r\n\t\t// and focusing it (`this.list.focus()`) could\r\n\t\t// result in scroll position \"jump\".\r\n\t\tthis.list.calculateHeight()\r\n\r\n\t\tif (focusOnExpand) {\r\n\t\t\tif (selectedItemIndex === undefined) {\r\n\t\t\t\tthis.list.focus()\r\n\t\t\t} else {\r\n\t\t\t\tthis.list.focusItem(selectedItemIndex)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tanimation,\r\n\t\t\talignment,\r\n\t\t\tupward,\r\n\t\t\tscrollIntoView,\r\n\t\t\tpreload,\r\n\t\t\tonPreloadStateChange,\r\n\t\t\tgetTogglerNode,\r\n\t\t\tonFocusOut,\r\n\t\t\tonChange,\r\n\t\t\thighlightSelectedItem,\r\n\t\t\tcloseLabel,\r\n\t\t\tcloseButtonIcon,\r\n\t\t\tclassName,\r\n\t\t\tchildren,\r\n\t\t\t...rest\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn (\r\n\t\t\t<Expandable\r\n\t\t\t\tref={ this.storeExpandableRef }\r\n\t\t\t\tanimation={ animation }\r\n\t\t\t\talignment={ alignment }\r\n\t\t\t\tupward={ upward }\r\n\t\t\t\tscrollIntoView={ scrollIntoView }\r\n\t\t\t\tpreload={ preload }\r\n\t\t\t\tonPreloadStateChange={ onPreloadStateChange }\r\n\t\t\t\tonExpand={ this.onExpand }\r\n\t\t\t\tonCollapse={ this.onCollapse }\r\n\t\t\t\tgetTogglerNode={ getTogglerNode }\r\n\t\t\t\tonFocusOut={ onFocusOut }\r\n\t\t\t\tcloseLabel={ closeLabel }\r\n\t\t\t\tcloseButtonIcon={ closeButtonIcon }\r\n\t\t\t\tclassName={ classNames(className, 'rrui__expandable-list',\r\n\t\t\t\t{\r\n\t\t\t\t\t'rrui__expandable-list--left-aligned'  : alignment === 'left',\r\n\t\t\t\t\t'rrui__expandable-list--right-aligned' : alignment === 'right'\r\n\t\t\t\t}) }>\r\n\r\n\t\t\t\t<ScrollableList\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\texpandable\r\n\t\t\t\t\tref={ this.storeListRef }\r\n\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\thasOnChange={ this.hasOnChange() }\r\n\t\t\t\t\thighlightSelectedItem={ onChange === undefined && highlightSelectedItem === undefined ? false : highlightSelectedItem }>\r\n\t\t\t\t\t{ children }\r\n\t\t\t\t</ScrollableList>\r\n\t\t\t</Expandable>\r\n\t\t)\r\n\t}\r\n}"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _core = require('libphonenumber-js/core');\n\nvar _inputValuePrefix = require('./inputValuePrefix');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n} // This is just a rewrite of `./InputSmart.js` using Hooks.\n// `./InputSmart.js` wasn't rewritten in Hooks directly\n// due to the legacy compatibility with older React versions.\n//\n// Plus the added support for `international` property.\n\n\nfunction createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, ['value', 'onChange', 'country', 'international', 'metadata', 'inputComponent']);\n\n    var prefix = (0, _inputValuePrefix.getInputValuePrefix)(country, international, metadata);\n\n    var _onChange = (0, _react.useCallback)(function (event) {\n      var newValue = (0, _core.parseIncompletePhoneNumber)(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return _react2.default.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = _react2.default.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: _propTypes2.default.string.isRequired,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: _propTypes2.default.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: _propTypes2.default.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: _propTypes2.default.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: _propTypes2.default.object.isRequired,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: _propTypes2.default.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\n\nexports.default = createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return (0, _inputValuePrefix.removeInputValuePrefix)((0, _core.formatIncompletePhoneNumber)(prefix + value, country, metadata), prefix);\n}","map":{"version":3,"sources":["../source/InputBasicHooks.js"],"names":["createInput","value","onChange","country","international","metadata","inputComponent","Input","rest","prefix","_onChange","newValue","event","newValueFormatted","format","InputBasic","isRequired"],"mappings":"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","sourcesContent":["// This is just a rewrite of `./InputSmart.js` using Hooks.\r\n// `./InputSmart.js` wasn't rewritten in Hooks directly\r\n// due to the legacy compatibility with older React versions.\r\n//\r\n// Plus the added support for `international` property.\r\n\r\nimport React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n\t * but still works good enough. When erasing or inserting digits in the middle\r\n\t * of a phone number the caret usually jumps to the end: this is the expected\r\n\t * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t */\r\n\tfunction InputBasic({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\tmetadata,\r\n\t\tinputComponent: Input,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst prefix = getInputValuePrefix(country, international, metadata)\r\n\r\n\t\tconst _onChange = useCallback((event) => {\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t// Working around this issue with this simple hack.\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\r\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tonChange(newValue)\r\n\t\t}, [prefix, value, onChange, country, metadata])\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\r\n\t\t\t\tonChange={_onChange}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputBasic = React.forwardRef(InputBasic)\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value`.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType.isRequired\r\n\t}\r\n\r\n\tInputBasic.defaultProps = {\r\n\t\tmetadata: defaultMetadata,\r\n\t\tinputComponent: 'input'\r\n\t}\r\n\r\n\treturn InputBasic\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction format(prefix, value, country, metadata) {\r\n\treturn removeInputValuePrefix(\r\n\t\tformatIncompletePhoneNumber(\r\n\t\t\tprefix + value,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t),\r\n\t\tprefix\r\n\t)\r\n}"]},"metadata":{},"sourceType":"script"}
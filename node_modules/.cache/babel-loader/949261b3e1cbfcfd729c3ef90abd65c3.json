{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _parse2 = require('../parse');\n\nvar _parse3 = _interopRequireDefault(_parse2);\n\nvar _inputControl = require('../input control');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n} // This is just `./ReactInput.js` rewritten in Hooks.\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n      parse = _ref.parse,\n      format = _ref.format,\n      InputComponent = _ref.inputComponent,\n      onChange = _ref.onChange,\n      onCut = _ref.onCut,\n      onPaste = _ref.onPaste,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, ['value', 'parse', 'format', 'inputComponent', 'onChange', 'onCut', 'onPaste', 'onKeyDown']);\n\n  var ownRef = (0, _react.useRef)();\n  ref = ref || ownRef;\n\n  var _onChange = (0, _react.useCallback)(function (event) {\n    return (0, _inputControl.onChange)(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange]);\n\n  var _onPaste = (0, _react.useCallback)(function (event) {\n    if (onPaste) {\n      onPaste(event);\n    }\n\n    return (0, _inputControl.onPaste)(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onPaste]);\n\n  var _onCut = (0, _react.useCallback)(function (event) {\n    if (onCut) {\n      onCut(event);\n    }\n\n    return (0, _inputControl.onCut)(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onCut]);\n\n  var _onKeyDown = (0, _react.useCallback)(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    return (0, _inputControl.onKeyDown)(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onKeyDown]);\n\n  return _react2.default.createElement(InputComponent, _extends({}, rest, {\n    ref: ref,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange,\n    onPaste: _onPaste,\n    onCut: _onCut\n  }));\n}\n\nInput = _react2.default.forwardRef(Input);\nInput.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: _propTypes2.default.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: _propTypes2.default.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: _propTypes2.default.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: _propTypes2.default.string.isRequired,\n  // Is parsed from <input/> text.\n  value: _propTypes2.default.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: _propTypes2.default.func.isRequired,\n  // Passthrough\n  onKeyDown: _propTypes2.default.func,\n  onCut: _propTypes2.default.func,\n  onPaste: _propTypes2.default.func\n};\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\nexports.default = Input;\n\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}","map":{"version":3,"sources":["../../source/react/Input.js"],"names":["value","parse","format","inputComponent","InputComponent","onChange","onCut","onPaste","onKeyDown","rest","ownRef","ref","_onChange","_onPaste","_onCut","_onKeyDown","isEmptyValue","Input","React","PropTypes","type","func"],"mappings":"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","sourcesContent":["// This is just `./ReactInput.js` rewritten in Hooks.\r\n\r\nimport React, { useCallback, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport _parse from '../parse'\r\n\r\nimport {\r\n\tonChange as onInputChange,\r\n\tonCut as onInputCut,\r\n\tonPaste as onInputPaste,\r\n\tonKeyDown as onInputKeyDown\r\n} from '../input control'\r\n\r\n// Usage:\r\n//\r\n// <ReactInput\r\n// \tvalue={this.state.phone}\r\n// \tonChange={phone => this.setState({ phone })}\r\n// \tparse={character => character}\r\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\r\n//\r\nfunction Input({\r\n\tvalue,\r\n\tparse,\r\n\tformat,\r\n\tinputComponent: InputComponent,\r\n\tonChange,\r\n\tonCut,\r\n\tonPaste,\r\n\tonKeyDown,\r\n\t...rest\r\n}, ref) {\r\n\tconst ownRef = useRef()\r\n\tref = ref || ownRef\r\n\tconst _onChange = useCallback((event) => {\r\n\t\treturn onInputChange(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange])\r\n\r\n\tconst _onPaste = useCallback((event) => {\r\n\t\tif (onPaste) {\r\n\t\t\tonPaste(event)\r\n\t\t}\r\n\t\treturn onInputPaste(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange, onPaste])\r\n\r\n\tconst _onCut = useCallback((event) => {\r\n\t\tif (onCut) {\r\n\t\t\tonCut(event)\r\n\t\t}\r\n\t\treturn onInputCut(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange, onCut])\r\n\r\n\tconst _onKeyDown = useCallback((event) => {\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t\treturn onInputKeyDown(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange, onKeyDown])\r\n\r\n\treturn (\r\n\t\t<InputComponent\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tvalue={format(isEmptyValue(value) ? '' : value).text}\r\n\t\t\tonKeyDown={_onKeyDown}\r\n\t\t\tonChange={_onChange}\r\n\t\t\tonPaste={_onPaste}\r\n\t\t\tonCut={_onCut} />\r\n\t)\r\n}\r\n\r\nInput = React.forwardRef(Input)\r\n\r\nInput.propTypes = {\r\n\t// Parses a single characher of `<input/>` text.\r\n\tparse: PropTypes.func.isRequired,\r\n\r\n\t// Formats `value` into `<input/>` text.\r\n\tformat: PropTypes.func.isRequired,\r\n\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: PropTypes.string.isRequired,\r\n\r\n\t// Is parsed from <input/> text.\r\n\tvalue: PropTypes.string,\r\n\r\n\t// This handler is called each time `<input/>` text is changed.\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// Passthrough\r\n\tonKeyDown: PropTypes.func,\r\n\tonCut: PropTypes.func,\r\n\tonPaste: PropTypes.func\r\n}\r\n\r\nInput.defaultProps = {\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: 'input',\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: 'text'\r\n}\r\n\r\nexport default Input\r\n\r\nfunction isEmptyValue(value) {\r\n\treturn value === undefined || value === null\r\n}"]},"metadata":{},"sourceType":"script"}
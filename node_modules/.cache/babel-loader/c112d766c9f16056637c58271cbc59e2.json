{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _scrollIntoViewIfNeeded = require('scroll-into-view-if-needed');\n\nvar _scrollIntoViewIfNeeded2 = _interopRequireDefault(_scrollIntoViewIfNeeded);\n\nvar _reactCreateRef = require('react-create-ref');\n\nvar _reactCreateRef2 = _interopRequireDefault(_reactCreateRef);\n\nvar _Close = require('./Close');\n\nvar _Close2 = _interopRequireDefault(_Close);\n\nvar _OnFocusOutOrTapOutside = require('./OnFocusOutOrTapOutside');\n\nvar _OnFocusOutOrTapOutside2 = _interopRequireDefault(_OnFocusOutOrTapOutside);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n/**\r\n * Usage:\r\n *\r\n * <button onClick={() => this.expandable.toggle()}>\r\n *   Toggle\r\n * </button>\r\n *\r\n * <Expandable ref={ref => this.expandable = ref}>\r\n *   ...\r\n * </Expandable>\r\n *\r\n * Methods:\r\n * * `.toggle()`\r\n * * `.expand()`\r\n * * `.collapse()`\r\n * * `.isExpanded()`\r\n */\n\nvar Expandable = (_temp2 = _class = function (_PureComponent) {\n  _inherits(Expandable, _PureComponent);\n\n  function Expandable() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Expandable);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Expandable.__proto__ || Object.getPrototypeOf(Expandable)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      // This initialization is required for `if (expand === expanded)`.\n      expanded: false\n    }, _this.onFocusOutRef = (0, _reactCreateRef2.default)(), _this.isExpanded = function () {\n      return _this.state.expanded;\n    }, _this.expand = function (parameters) {\n      return _this.toggle(true, parameters);\n    }, _this.collapse = function () {\n      return _this.toggle(false);\n    }, _this.toggle = function (expand) {\n      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _this$props = _this.props,\n          onExpand = _this$props.onExpand,\n          onExpanded = _this$props.onExpanded,\n          onCollapse = _this$props.onCollapse,\n          onCollapsed = _this$props.onCollapsed,\n          preload = _this$props.preload,\n          onPreloadStateChange = _this$props.onPreloadStateChange,\n          onPreloadError = _this$props.onPreloadError;\n      var _this$state = _this.state,\n          expanded = _this$state.expanded,\n          isPreloading = _this$state.isPreloading; // If no `expand` argument provided then just toggle.\n\n      if (expand === undefined) {\n        expand = !expanded;\n      } // Don't collapse if already collapsed.\n      // Don't expand if already expanded\n      // unless manually forcing a refresh of content.\n\n\n      var refreshingExpanded = void 0;\n\n      if (expand && expanded && parameters.refresh) {\n        refreshingExpanded = true;\n      }\n\n      if (expand === expanded && !refreshingExpanded) {\n        return Promise.resolve();\n      }\n\n      if (_this.isToggling && !refreshingExpanded) {\n        return Promise.resolve();\n      }\n\n      _this.isToggling = true; // Collapse.\n\n      if (!expand) {\n        if (_this.onFocusOutRef.current) {\n          _this.onFocusOutRef.current.stopListeningToTouches();\n        }\n\n        clearTimeout(_this.scrollIntoViewTimer);\n\n        if (onCollapse) {\n          onCollapse({\n            focusOut: _this.focusOut\n          });\n        } // Set `expanded` to `false` to play the collapse CSS animation.\n        // Once that animation is finished remove\n        // the contents of the `<Expanded/>` from DOM.\n\n\n        return new Promise(function (resolve) {\n          _this.setState({\n            expanded: false\n          }, function () {\n            if (onCollapsed) {\n              onCollapsed();\n            }\n\n            _this.removeFromDOMAfterCollapsed();\n\n            _this.isToggling = false;\n            resolve();\n          });\n        });\n      } // Expand.\n\n\n      return _this.preload().then(function () {\n        return new Promise(function (resolve) {\n          clearTimeout(_this.removeFromDOMTimer);\n\n          _this.setState({\n            shouldRender: true\n          }, // Without the 10ms delay for some reason the CSS \"expand\" animation won't play.\n          // Perhaps a browser decides to optimize two subsequent renders\n          // and doesn't render \"pre-expanded\" and \"expanded\" states separately.\n          // Even with a 0ms delay it would randomly play/not-play the expand animation.\n          function () {\n            if (onExpand) {\n              onExpand();\n            }\n\n            setTimeout(function () {\n              _this.setState({\n                expanded: true\n              }, function () {\n                if (onExpanded) {\n                  onExpanded();\n                }\n\n                _this.scrollIntoView();\n\n                resolve();\n\n                if (_this.onFocusOutRef.current) {\n                  _this.onFocusOutRef.current.listenToTouches();\n                }\n\n                _this.isToggling = false;\n              });\n            }, 10);\n          });\n        });\n      });\n    }, _this.removeFromDOMAfterCollapsed = function () {\n      var expandAnimationDuration = _this.props.expandAnimationDuration; // For some reason in IE 11 \"scroll into view\" scrolls\n      // to the top of the page, therefore turn it off for IE.\n\n      _this.removeFromDOMTimer = setTimeout(function () {\n        // Re-render to remove the options DOM nodes.\n        _this.setState({\n          shouldRender: false\n        });\n      }, expandAnimationDuration * 1.1);\n    }, _this.onKeyDown = function (event) {\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        // Collapse on \"Escape\".\n        case 27:\n          event.preventDefault(); // Collapse the list if it's expanded\n\n          return _this.collapse();\n      }\n    }, _this.storeContainerNode = function (node) {\n      return _this.container = node;\n    }, _this.getContainerNode = function () {\n      return _this.container;\n    }, _this.onBlur = function (event) {\n      return _this.onFocusOutRef.current && _this.onFocusOutRef.current.onBlur(event);\n    }, _this.onFocusOut = function (event) {\n      var onFocusOut = _this.props.onFocusOut;\n      _this.focusOut = true;\n      onFocusOut(event);\n      _this.focusOut = undefined;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Expandable, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.scrollIntoViewTimer);\n      clearTimeout(this.removeFromDOMTimer);\n    }\n  }, {\n    key: 'preload',\n    // Preload `<Expanded/>` content (if required).\n    value: function preload() {\n      var _this2 = this;\n\n      var _props = this.props,\n          preload = _props.preload,\n          onPreloadStateChange = _props.onPreloadStateChange;\n\n      if (preload) {\n        this.setState({\n          isPreloading: true\n        });\n\n        if (onPreloadStateChange) {\n          onPreloadStateChange(true);\n        }\n      }\n\n      return (preload ? preload() : Promise.resolve()).then(function () {\n        if (onPreloadStateChange) {\n          onPreloadStateChange(false);\n        }\n\n        _this2.setState({\n          isPreloading: false\n        });\n      }, function (error) {\n        console.error(error); // if (onPreloadError) {\n        // \tonPreloadError(error)\n        // }\n\n        if (onPreloadStateChange) {\n          onPreloadStateChange(false);\n        }\n\n        _this2.setState({\n          isPreloading: false\n        });\n      });\n    }\n  }, {\n    key: 'scrollIntoView',\n    value: function scrollIntoView() {\n      var _this3 = this;\n\n      var _props2 = this.props,\n          shouldScrollIntoView = _props2.scrollIntoView,\n          scrollIntoViewDelay = _props2.scrollIntoViewDelay,\n          expandAnimationDuration = _props2.expandAnimationDuration; // // For some reason in IE 11 \"scroll into view\" scrolls\n      // // to the top of the page, therefore turn it off for IE.\n      // if (!isInternetExplorer() && shouldScrollIntoView)\n\n      if (shouldScrollIntoView) {\n        this.scrollIntoViewTimer = setTimeout(function () {\n          var expanded = _this3.state.expanded; // If still expanded and there are any options\n          // then scroll into view.\n\n          if (expanded) {\n            // https://github.com/stipsan/scroll-into-view-if-needed/issues/359\n            // scrollIntoView(this.container, false, { duration: 300 })\n            (0, _scrollIntoViewIfNeeded2.default)(_this3.container, {\n              scrollMode: 'if-needed',\n              behavior: 'smooth',\n              block: 'nearest',\n              inline: 'nearest'\n            });\n          }\n        }, Math.max(scrollIntoViewDelay, expandAnimationDuration) * 1.1);\n      }\n    } // This function is called from outside in `<ExpandableList/>`.\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          animation = _props3.animation,\n          alignment = _props3.alignment,\n          upward = _props3.upward,\n          onFocusOut = _props3.onFocusOut,\n          getTogglerNode = _props3.getTogglerNode,\n          closeLabel = _props3.closeLabel,\n          CloseButtonIcon = _props3.closeButtonIcon,\n          role = _props3.role,\n          style = _props3.style,\n          className = _props3.className,\n          children = _props3.children;\n      var _state = this.state,\n          shouldRender = _state.shouldRender,\n          expanded = _state.expanded;\n\n      if (!shouldRender) {\n        return null;\n      } // `tabIndex={ -1 }` makes the `<div/>` focusable.\n      // So that `<Expandable/>` doesn't collapse on click inside it (top, bottom).\n      // `aria-hidden={true/false}` is not set automatically here\n      // because when `<Expandable/>` is collapsed then it's not rendered.\n      // tabIndex={ -1 }\n\n\n      var element = _react2.default.createElement('div', {\n        ref: this.storeContainerNode,\n        onKeyDown: this.onKeyDown,\n        role: role,\n        'aria-hidden': this.props['aria-hidden'],\n        'aria-label': this.props['aria-label'],\n        style: style,\n        className: (0, _classnames2.default)(className, 'rrui__shadow', 'rrui__expandable', 'rrui__expandable--overlay', animation && 'rrui__expandable--' + animation, animation && expanded && 'rrui__expandable--expanded--' + animation, {\n          'rrui__expandable--expanded': expanded,\n          'rrui__expandable--left-aligned': alignment === 'left',\n          'rrui__expandable--right-aligned': alignment === 'right',\n          'rrui__expandable--upward': upward,\n          'rrui__expandable--downward': !upward\n        })\n      }, _react2.default.Children.map(children, function (child) {\n        return _react2.default.cloneElement(child, {\n          className: (0, _classnames2.default)(child.props.className, 'rrui__expandable__content', animation && 'rrui__expandable__content--' + animation, {\n            'rrui__expandable__content--expanded': expanded\n          })\n        });\n      }), expanded && CloseButtonIcon && _react2.default.createElement(_Close2.default, {\n        onClick: this.collapse,\n        closeLabel: closeLabel,\n        className: (0, _classnames2.default)('rrui__close--bottom-right', 'rrui__expandable__close')\n      }, _react2.default.createElement(CloseButtonIcon, null)));\n\n      if (onFocusOut) {\n        // `<OnFocusOutOrTapOutside/>` sets `onBlur` on the `<div/>`.\n        // `<Expandable/>` calls `.listenToTouches()` / `.stopListeningToTouches()` manually.\n        element = _react2.default.createElement(_OnFocusOutOrTapOutside2.default, {\n          ref: this.onFocusOutRef,\n          getContainerNode: this.getContainerNode,\n          getTogglerNode: getTogglerNode,\n          onFocusOut: this.onFocusOut,\n          listenToTouches: false\n        }, element);\n      }\n\n      return element;\n    }\n  }]);\n\n  return Expandable;\n}(PureComponent), _class.propTypes = {\n  // The default animation could be called \"expand\".\n  animation: _propTypes2.default.oneOf(['fade-up']),\n  // Can optionally preload `<Expandable/>` contents before expanding it.\n  // Must return a `Promise`.\n  preload: _propTypes2.default.func,\n  onPreloadStateChange: _propTypes2.default.func,\n  onPreloadError: _propTypes2.default.func,\n  onExpand: _propTypes2.default.func,\n  onCollapse: _propTypes2.default.func,\n  // Whether the `<Expandable/>` expands upwards or downwards.\n  alignment: _propTypes2.default.oneOf(['left', 'right']),\n  // If this flag is set to `true`,\n  // then the dropdown expands itself upward.\n  // (as opposed to the default downward)\n  upward: _propTypes2.default.bool,\n  // ARIA `role` (accessibility).\n  role: _propTypes2.default.string,\n  // CSS style object.\n  style: _propTypes2.default.object,\n  // CSS class.\n  className: _propTypes2.default.string,\n  // When the `<Expandable/>` is expanded\n  // its content may not fit on the screen.\n  // If `scrollIntoView` is `true` (which is the default)\n  // then the browser will automatically scroll\n  // so that the expanded content fits on the screen.\n  scrollIntoView: _propTypes2.default.bool.isRequired,\n  // If `scrollIntoView` is `true` (which is the default)\n  // then these two are gonna define the delay after which it scrolls into view.\n  expandAnimationDuration: _propTypes2.default.number.isRequired,\n  scrollIntoViewDelay: _propTypes2.default.number.isRequired,\n  getTogglerNode: _propTypes2.default.func,\n  onFocusOut: _propTypes2.default.func,\n  // `aria-label` for the \"Close\" button\n  // (which is an \"x\" visible in fullscreen mode).\n  closeLabel: _propTypes2.default.string,\n  // The \"x\" button icon that closes the `<Select/>`\n  // in fullscreen mode on mobile devices.\n  closeButtonIcon: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.oneOf([false])]).isRequired\n}, _class.defaultProps = {\n  scrollIntoView: true,\n  expandAnimationDuration: 150,\n  scrollIntoViewDelay: 0,\n  // The \"x\" button icon that closes the `<Select/>`\n  // in fullscreen mode on mobile devices.\n  closeButtonIcon: _Close.CloseIcon\n}, _temp2);\nexports.default = Expandable;","map":{"version":3,"sources":["../source/Expandable.js"],"names":["PureComponent","Expandable","propTypes","animation","preload","onPreloadStateChange","onPreloadError","onExpand","onCollapse","alignment","upward","role","style","className","scrollIntoView","expandAnimationDuration","scrollIntoViewDelay","getTogglerNode","onFocusOut","closeLabel","closeButtonIcon","isRequired","defaultProps","state","expanded","onFocusOutRef","clearTimeout","isExpanded","expand","collapse","toggle","parameters","onExpanded","onCollapsed","isPreloading","refreshingExpanded","Promise","focusOut","resolve","shouldRender","setTimeout","console","shouldScrollIntoView","scrollMode","behavior","block","inline","Math","removeFromDOMAfterCollapsed","onKeyDown","event","storeContainerNode","getContainerNode","onBlur","CloseButtonIcon","children","element","child"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport scrollIntoView from 'scroll-into-view-if-needed'\r\nimport createRef from 'react-create-ref'\r\n\r\nimport Close, { CloseIcon } from './Close'\r\nimport OnFocusOutOrTapOutside from './OnFocusOutOrTapOutside'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n/**\r\n * Usage:\r\n *\r\n * <button onClick={() => this.expandable.toggle()}>\r\n *   Toggle\r\n * </button>\r\n *\r\n * <Expandable ref={ref => this.expandable = ref}>\r\n *   ...\r\n * </Expandable>\r\n *\r\n * Methods:\r\n * * `.toggle()`\r\n * * `.expand()`\r\n * * `.collapse()`\r\n * * `.isExpanded()`\r\n */\r\nexport default class Expandable extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// The default animation could be called \"expand\".\r\n\t\tanimation: PropTypes.oneOf(['fade-up']),\r\n\r\n\t\t// Can optionally preload `<Expandable/>` contents before expanding it.\r\n\t\t// Must return a `Promise`.\r\n\t\tpreload : PropTypes.func,\r\n\t\tonPreloadStateChange : PropTypes.func,\r\n\t\tonPreloadError : PropTypes.func,\r\n\r\n\t\tonExpand : PropTypes.func,\r\n\t\tonCollapse : PropTypes.func,\r\n\r\n\t\t// Whether the `<Expandable/>` expands upwards or downwards.\r\n\t\talignment : PropTypes.oneOf(['left', 'right']),\r\n\r\n\t\t// If this flag is set to `true`,\r\n\t\t// then the dropdown expands itself upward.\r\n\t\t// (as opposed to the default downward)\r\n\t\tupward : PropTypes.bool,\r\n\r\n\t\t// ARIA `role` (accessibility).\r\n\t\trole : PropTypes.string,\r\n\r\n\t\t// CSS style object.\r\n\t\tstyle : PropTypes.object,\r\n\r\n\t\t// CSS class.\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t// When the `<Expandable/>` is expanded\r\n\t\t// its content may not fit on the screen.\r\n\t\t// If `scrollIntoView` is `true` (which is the default)\r\n\t\t// then the browser will automatically scroll\r\n\t\t// so that the expanded content fits on the screen.\r\n\t\tscrollIntoView : PropTypes.bool.isRequired,\r\n\r\n\t\t// If `scrollIntoView` is `true` (which is the default)\r\n\t\t// then these two are gonna define the delay after which it scrolls into view.\r\n\t\texpandAnimationDuration : PropTypes.number.isRequired,\r\n\r\n\t\tscrollIntoViewDelay : PropTypes.number.isRequired,\r\n\r\n\t\tgetTogglerNode : PropTypes.func,\r\n\t\tonFocusOut : PropTypes.func,\r\n\r\n\t\t// `aria-label` for the \"Close\" button\r\n\t\t// (which is an \"x\" visible in fullscreen mode).\r\n\t\tcloseLabel : PropTypes.string,\r\n\r\n\t\t// The \"x\" button icon that closes the `<Select/>`\r\n\t\t// in fullscreen mode on mobile devices.\r\n\t\tcloseButtonIcon : PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf([false])]).isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\tscrollIntoView : true,\r\n\t\texpandAnimationDuration : 150,\r\n\t\tscrollIntoViewDelay : 0,\r\n\r\n\t\t// The \"x\" button icon that closes the `<Select/>`\r\n\t\t// in fullscreen mode on mobile devices.\r\n\t\tcloseButtonIcon : CloseIcon\r\n\t}\r\n\r\n\tstate = {\r\n\t\t// This initialization is required for `if (expand === expanded)`.\r\n\t\texpanded: false\r\n\t}\r\n\r\n\tonFocusOutRef = createRef()\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tclearTimeout(this.scrollIntoViewTimer)\r\n\t\tclearTimeout(this.removeFromDOMTimer)\r\n\t}\r\n\r\n\tisExpanded = () => this.state.expanded\r\n\r\n\texpand   = (parameters) => this.toggle(true, parameters)\r\n\tcollapse = () => this.toggle(false)\r\n\r\n\ttoggle = (expand, parameters = {}) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonExpand,\r\n\t\t\tonExpanded,\r\n\t\t\tonCollapse,\r\n\t\t\tonCollapsed,\r\n\t\t\tpreload,\r\n\t\t\tonPreloadStateChange,\r\n\t\t\tonPreloadError\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\texpanded,\r\n\t\t\tisPreloading\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// If no `expand` argument provided then just toggle.\r\n\t\tif (expand === undefined) {\r\n\t\t\texpand = !expanded\r\n\t\t}\r\n\r\n\t\t// Don't collapse if already collapsed.\r\n\t\t// Don't expand if already expanded\r\n\t\t// unless manually forcing a refresh of content.\r\n\r\n\t\tlet refreshingExpanded\r\n\r\n\t\tif (expand && expanded && parameters.refresh) {\r\n\t\t\trefreshingExpanded = true\r\n\t\t}\r\n\r\n\t\tif (expand === expanded && !refreshingExpanded) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\r\n\t\tif (this.isToggling && !refreshingExpanded) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\r\n\t\tthis.isToggling = true\r\n\r\n\t\t// Collapse.\r\n\t\tif (!expand)\r\n\t\t{\r\n\t\t\tif (this.onFocusOutRef.current) {\r\n\t\t\t\tthis.onFocusOutRef.current.stopListeningToTouches()\r\n\t\t\t}\r\n\r\n\t\t\tclearTimeout(this.scrollIntoViewTimer)\r\n\r\n\t\t\tif (onCollapse) {\r\n\t\t\t\tonCollapse({ focusOut: this.focusOut })\r\n\t\t\t}\r\n\r\n\t\t\t// Set `expanded` to `false` to play the collapse CSS animation.\r\n\t\t\t// Once that animation is finished remove\r\n\t\t\t// the contents of the `<Expanded/>` from DOM.\r\n\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\tthis.setState({ expanded : false }, () => {\r\n\t\t\t\t\tif (onCollapsed) {\r\n\t\t\t\t\t\tonCollapsed();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.removeFromDOMAfterCollapsed()\r\n\t\t\t\t\tthis.isToggling = false\r\n\t\t\t\t\tresolve()\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// Expand.\r\n\t\treturn this.preload().then(() => new Promise((resolve) =>\r\n\t\t{\r\n\t\t\tclearTimeout(this.removeFromDOMTimer)\r\n\r\n\t\t\tthis.setState\r\n\t\t\t({\r\n\t\t\t\tshouldRender : true\r\n\t\t\t},\r\n\t\t\t// Without the 10ms delay for some reason the CSS \"expand\" animation won't play.\r\n\t\t\t// Perhaps a browser decides to optimize two subsequent renders\r\n\t\t\t// and doesn't render \"pre-expanded\" and \"expanded\" states separately.\r\n\t\t\t// Even with a 0ms delay it would randomly play/not-play the expand animation.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif (onExpand) {\r\n\t\t\t\t\tonExpand()\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetTimeout(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.setState({ expanded : true }, () =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (onExpanded) {\r\n\t\t\t\t\t\t\tonExpanded()\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis.scrollIntoView()\r\n\t\t\t\t\t\tresolve()\r\n\r\n\t\t\t\t\t\tif (this.onFocusOutRef.current) {\r\n\t\t\t\t\t\t\tthis.onFocusOutRef.current.listenToTouches()\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis.isToggling = false\r\n\t\t\t\t\t})\r\n\t\t\t\t},\r\n\t\t\t\t10)\r\n\t\t\t})\r\n\t\t}))\r\n\t}\r\n\r\n\t// Preload `<Expanded/>` content (if required).\r\n\tpreload()\r\n\t{\r\n\t\tconst { preload, onPreloadStateChange } = this.props\r\n\r\n\t\tif (preload)\r\n\t\t{\r\n\t\t\tthis.setState({\r\n\t\t\t\tisPreloading : true\r\n\t\t\t})\r\n\r\n\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\tonPreloadStateChange(true)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (preload ? preload() : Promise.resolve())\r\n\t\t\t.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\t\tonPreloadStateChange(false)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisPreloading : false\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t(error) =>\r\n\t\t\t{\r\n\t\t\t\tconsole.error(error)\r\n\r\n\t\t\t\t// if (onPreloadError) {\r\n\t\t\t\t// \tonPreloadError(error)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\t\tonPreloadStateChange(false)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisPreloading : false\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t}\r\n\r\n\tscrollIntoView()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tscrollIntoView : shouldScrollIntoView,\r\n\t\t\tscrollIntoViewDelay,\r\n\t\t\texpandAnimationDuration\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// // For some reason in IE 11 \"scroll into view\" scrolls\r\n\t\t// // to the top of the page, therefore turn it off for IE.\r\n\t\t// if (!isInternetExplorer() && shouldScrollIntoView)\r\n\t\tif (shouldScrollIntoView)\r\n\t\t{\r\n\t\t\tthis.scrollIntoViewTimer = setTimeout(() =>\r\n\t\t\t{\r\n\t\t\t\tconst { expanded } = this.state\r\n\r\n\t\t\t\t// If still expanded and there are any options\r\n\t\t\t\t// then scroll into view.\r\n\t\t\t\tif (expanded)\r\n\t\t\t\t{\r\n\t\t\t\t\t// https://github.com/stipsan/scroll-into-view-if-needed/issues/359\r\n\t\t\t\t\t// scrollIntoView(this.container, false, { duration: 300 })\r\n\r\n\t\t\t\t\tscrollIntoView(this.container,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tscrollMode : 'if-needed',\r\n\t\t\t\t\t\tbehavior   : 'smooth',\r\n\t\t\t\t\t\tblock      : 'nearest',\r\n\t\t\t\t\t\tinline     : 'nearest'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tMath.max(scrollIntoViewDelay, expandAnimationDuration) * 1.1)\r\n\t\t}\r\n\t}\r\n\r\n\tremoveFromDOMAfterCollapsed = () =>\r\n\t{\r\n\t\tconst { expandAnimationDuration } = this.props\r\n\r\n\t\t// For some reason in IE 11 \"scroll into view\" scrolls\r\n\t\t// to the top of the page, therefore turn it off for IE.\r\n\t\tthis.removeFromDOMTimer = setTimeout(() =>\r\n\t\t{\r\n\t\t\t// Re-render to remove the options DOM nodes.\r\n\t\t\tthis.setState({ shouldRender : false })\r\n\t\t},\r\n\t\texpandAnimationDuration * 1.1)\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tswitch (event.keyCode)\r\n\t\t{\r\n\t\t\t// Collapse on \"Escape\".\r\n\t\t\tcase 27:\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\t// Collapse the list if it's expanded\r\n\t\t\t\treturn this.collapse()\r\n\t\t}\r\n\t}\r\n\r\n\tstoreContainerNode = (node) => this.container = node\r\n\tgetContainerNode = () => this.container\r\n\r\n\t// This function is called from outside in `<ExpandableList/>`.\r\n\tonBlur = (event) => this.onFocusOutRef.current && this.onFocusOutRef.current.onBlur(event)\r\n\r\n\tonFocusOut = (event) => {\r\n\t\tconst { onFocusOut } = this.props\r\n\t\tthis.focusOut = true\r\n\t\tonFocusOut(event)\r\n\t\tthis.focusOut = undefined\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tanimation,\r\n\t\t\talignment,\r\n\t\t\tupward,\r\n\t\t\tonFocusOut,\r\n\t\t\tgetTogglerNode,\r\n\t\t\tcloseLabel,\r\n\t\t\tcloseButtonIcon : CloseButtonIcon,\r\n\t\t\trole,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tshouldRender,\r\n\t\t\texpanded\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\tif (!shouldRender) {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\t// `tabIndex={ -1 }` makes the `<div/>` focusable.\r\n\t\t// So that `<Expandable/>` doesn't collapse on click inside it (top, bottom).\r\n\r\n\t\t// `aria-hidden={true/false}` is not set automatically here\r\n\t\t// because when `<Expandable/>` is collapsed then it's not rendered.\r\n\r\n\t\t// tabIndex={ -1 }\r\n\r\n\t\tlet element = (\r\n\t\t\t<div\r\n\t\t\t\tref={ this.storeContainerNode }\r\n\t\t\t\tonKeyDown={ this.onKeyDown }\r\n\t\t\t\trole={ role }\r\n\t\t\t\taria-hidden={ this.props['aria-hidden'] }\r\n\t\t\t\taria-label={ this.props['aria-label'] }\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames\r\n\t\t\t\t(\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t\t'rrui__shadow',\r\n\t\t\t\t\t'rrui__expandable',\r\n\t\t\t\t\t'rrui__expandable--overlay',\r\n\t\t\t\t\tanimation && `rrui__expandable--${animation}`,\r\n\t\t\t\t\tanimation && expanded && `rrui__expandable--expanded--${animation}`,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__expandable--expanded'      : expanded,\r\n\t\t\t\t\t\t'rrui__expandable--left-aligned'  : alignment === 'left',\r\n\t\t\t\t\t\t'rrui__expandable--right-aligned' : alignment === 'right',\r\n\t\t\t\t\t\t'rrui__expandable--upward'        : upward,\r\n\t\t\t\t\t\t'rrui__expandable--downward'      : !upward\r\n\t\t\t\t\t}\r\n\t\t\t\t) }>\r\n\t\t\t\t{ React.Children.map(children, (child) =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn React.cloneElement(child,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tclassName: classNames\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\tchild.props.className,\r\n\t\t\t\t\t\t\t'rrui__expandable__content',\r\n\t\t\t\t\t\t\tanimation && `rrui__expandable__content--${animation}`,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t'rrui__expandable__content--expanded' : expanded\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}) }\r\n\r\n\t\t\t\t{/* The \"x\" button to hide the fullscreen expandable on mobile devices */}\r\n\t\t\t\t{ expanded && CloseButtonIcon &&\r\n\t\t\t\t\t<Close\r\n\t\t\t\t\t\tonClick={this.collapse}\r\n\t\t\t\t\t\tcloseLabel={closeLabel}\r\n\t\t\t\t\t\tclassName={classNames('rrui__close--bottom-right', 'rrui__expandable__close')}>\r\n\t\t\t\t\t\t<CloseButtonIcon/>\r\n\t\t\t\t\t</Close>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t\tif (onFocusOut) {\r\n\t\t\t// `<OnFocusOutOrTapOutside/>` sets `onBlur` on the `<div/>`.\r\n \t\t\t// `<Expandable/>` calls `.listenToTouches()` / `.stopListeningToTouches()` manually.\r\n\t\t\telement = (\r\n\t\t\t\t<OnFocusOutOrTapOutside\r\n\t\t\t\t\tref={this.onFocusOutRef}\r\n\t\t\t\t\tgetContainerNode={this.getContainerNode}\r\n\t\t\t\t\tgetTogglerNode={getTogglerNode}\r\n\t\t\t\t\tonFocusOut={this.onFocusOut}\r\n\t\t\t\t\tlistenToTouches={false}>\r\n\t\t\t\t\t{element}\r\n\t\t\t\t</OnFocusOutOrTapOutside>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn element\r\n\t}\r\n}"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _core = require('libphonenumber-js/core');\n\nvar _InputSmartHooks = require('./InputSmartHooks');\n\nvar _InputSmartHooks2 = _interopRequireDefault(_InputSmartHooks);\n\nvar _InputBasicHooks = require('./InputBasicHooks');\n\nvar _InputBasicHooks2 = _interopRequireDefault(_InputBasicHooks);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction createInput(defaultMetadata) {\n  function PhoneInput(_ref, ref) {\n    var country = _ref.country,\n        defaultCountry = _ref.defaultCountry,\n        useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n        value = _ref.value,\n        onChange = _ref.onChange,\n        metadata = _ref.metadata,\n        smartCaret = _ref.smartCaret,\n        international = _ref.international,\n        rest = _objectWithoutProperties(_ref, ['country', 'defaultCountry', 'useNationalFormatForDefaultCountryValue', 'value', 'onChange', 'metadata', 'smartCaret', 'international']);\n\n    var getInitialParsedInput = function getInitialParsedInput() {\n      return getParsedInputForValue(value, country, international, defaultCountry, useNationalFormatForDefaultCountryValue, metadata);\n    }; // This is only used to detect `country` property change.\n\n\n    var _useState = (0, _react.useState)(country),\n        _useState2 = _slicedToArray(_useState, 2),\n        prevCountry = _useState2[0],\n        setPrevCountry = _useState2[1]; // This is only used to detect `defaultCountry` property change.\n\n\n    var _useState3 = (0, _react.useState)(defaultCountry),\n        _useState4 = _slicedToArray(_useState3, 2),\n        prevDefaultCountry = _useState4[0],\n        setPrevDefaultCountry = _useState4[1]; // `parsedInput` is the `value` passed to the `<input/>`.\n\n\n    var _useState5 = (0, _react.useState)(getInitialParsedInput()),\n        _useState6 = _slicedToArray(_useState5, 2),\n        parsedInput = _useState6[0],\n        setParsedInput = _useState6[1]; // This is only used to detect `value` property changes.\n\n\n    var _useState7 = (0, _react.useState)(value),\n        _useState8 = _slicedToArray(_useState7, 2),\n        valueForParsedInput = _useState8[0],\n        setValueForParsedInput = _useState8[1]; // If `value` property has been changed externally\n    // then re-initialize the component.\n\n\n    (0, _react.useEffect)(function () {\n      if (value !== valueForParsedInput) {\n        setValueForParsedInput(value);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [value]); // If the `country` has been changed then re-initialize the component.\n\n    (0, _react.useEffect)(function () {\n      if (country !== prevCountry) {\n        setPrevCountry(country);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [country]); // If the `defaultCountry` has been changed then re-initialize the component.\n\n    (0, _react.useEffect)(function () {\n      if (defaultCountry !== prevDefaultCountry) {\n        setPrevDefaultCountry(defaultCountry);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [defaultCountry]); // Update the `value` after `valueForParsedInput` has been updated.\n\n    (0, _react.useEffect)(function () {\n      if (valueForParsedInput !== value) {\n        onChange(valueForParsedInput);\n      }\n    }, [valueForParsedInput]);\n    var onParsedInputChange = (0, _react.useCallback)(function (parsedInput) {\n      var value = void 0;\n\n      if (country) {\n        // Won't allow `+` in the beginning\n        // when a `country` has been specified.\n        if (parsedInput && parsedInput[0] === '+') {\n          parsedInput = parsedInput.slice(1);\n        }\n      } else if (!defaultCountry) {\n        // Force a `+` in the beginning of a `value`\n        // when no `country` and `defaultCountry` have been specified.\n        if (parsedInput && parsedInput[0] !== '+') {\n          parsedInput = '+' + parsedInput;\n        }\n      } // Convert `parsedInput` to `value`.\n\n\n      if (parsedInput) {\n        var asYouType = new _core.AsYouType(country || defaultCountry, metadata);\n        asYouType.input(country && international ? '+' + (0, _core.getCountryCallingCode)(country, metadata) + parsedInput : parsedInput);\n        var phoneNumber = asYouType.getNumber(); // If it's a \"possible\" incomplete phone number.\n\n        if (phoneNumber) {\n          value = phoneNumber.number;\n        }\n      }\n\n      setParsedInput(parsedInput);\n      setValueForParsedInput(value);\n    }, [country, international, defaultCountry, metadata, setParsedInput, setValueForParsedInput]);\n    var InputComponent = smartCaret ? _InputSmartHooks2.default : _InputBasicHooks2.default;\n    return _react2.default.createElement(InputComponent, _extends({}, rest, {\n      ref: ref,\n      metadata: metadata,\n      international: international,\n      country: country || defaultCountry,\n      value: parsedInput,\n      onChange: onParsedInputChange\n    }));\n  }\n\n  PhoneInput = _react2.default.forwardRef(PhoneInput);\n  PhoneInput.propTypes = {\n    /**\r\n     * HTML `<input/>` `type` attribute.\r\n     */\n    type: _propTypes2.default.string,\n\n    /**\r\n     * HTML `<input/>` `autocomplete` attribute.\r\n     */\n    autoComplete: _propTypes2.default.string,\n\n    /**\r\n     * The phone number (in E.164 format).\r\n     * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n     */\n    value: _propTypes2.default.string,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: _propTypes2.default.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (example: `(213) 373-4253`),\r\n     * or as an international phone number without \"country calling code\"\r\n     * if `international` property is passed (example: `213 373 4253`).\r\n     * Example: \"US\".\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (example: `+1 213 373 4253`)\r\n     */\n    country: _propTypes2.default.string,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n     * The user can still input a phone number in international format.\r\n     * Example: \"US\".\r\n     * `country` and `defaultCountry` properties are mutually exclusive.\r\n     */\n    defaultCountry: _propTypes2.default.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: _propTypes2.default.bool,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: _propTypes2.default.elementType,\n\n    /**\r\n     * By default, the caret position is being \"intelligently\" managed\r\n     * while a user inputs a phone number.\r\n     * This \"smart\" caret behavior can be turned off\r\n     * by passing `smartCaret={false}` property.\r\n     * This is just an \"escape hatch\" for any possible caret position issues.\r\n     */\n    // Is `true` by default.\n    smartCaret: _propTypes2.default.bool.isRequired,\n\n    /**\r\n     * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n     * then the `value` will be formatted as a national phone number by default.\r\n     * To format the initial `value` of `defaultCountry` as an international number instead\r\n     * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n     */\n    useNationalFormatForDefaultCountryValue: _propTypes2.default.bool.isRequired,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: _propTypes2.default.object.isRequired\n  };\n  PhoneInput.defaultProps = {\n    /**\r\n     * HTML `<input/>` `type=\"tel\"`.\r\n     */\n    type: 'tel',\n\n    /**\r\n     * Remember (and autofill) the value as a phone number.\r\n     */\n    autoComplete: 'tel',\n\n    /**\r\n     * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n     */\n    smartCaret: true,\n\n    /**\r\n     * Set to `true` to force international phone number format\r\n     * (without \"country calling code\") when `country` is specified.\r\n     */\n    // international: false,\n\n    /**\r\n     * Prefer national format when formatting E.164 phone number `value`\r\n     * corresponding to `defaultCountry`.\r\n     */\n    useNationalFormatForDefaultCountryValue: true,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: defaultMetadata\n  };\n  return PhoneInput;\n}\n\nexports.default = createInput();\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nfunction getParsedInputForValue(value, country, international, defaultCountry, useNationalFormatForDefaultCountryValue, metadata) {\n  if (!value) {\n    return '';\n  }\n\n  if (!country && !defaultCountry) {\n    return value;\n  }\n\n  var asYouType = new _core.AsYouType(undefined, metadata);\n  asYouType.input(value);\n  var phoneNumber = asYouType.getNumber();\n\n  if (phoneNumber) {\n    if (country) {\n      if (phoneNumber.country && phoneNumber.country !== country) {\n        console.error('[react-phone-number-input] Phone number ' + value + ' corresponds to country ' + phoneNumber.country + ' but ' + country + ' was specified instead.');\n      }\n\n      if (international) {\n        return phoneNumber.nationalNumber;\n      }\n\n      return (0, _core.parseDigits)(phoneNumber.formatNational());\n    } else {\n      if (phoneNumber.country && phoneNumber.country === defaultCountry && useNationalFormatForDefaultCountryValue) {\n        return (0, _core.parseDigits)(phoneNumber.formatNational());\n      }\n\n      return value;\n    }\n  } else {\n    return '';\n  }\n}","map":{"version":3,"sources":["../source/PhoneInputNoCountrySelect.js"],"names":["createInput","country","defaultCountry","useNationalFormatForDefaultCountryValue","value","onChange","metadata","smartCaret","international","rest","getInitialParsedInput","getParsedInputForValue","prevCountry","setPrevCountry","prevDefaultCountry","setPrevDefaultCountry","parsedInput","setParsedInput","valueForParsedInput","setValueForParsedInput","onParsedInputChange","asYouType","phoneNumber","InputComponent","PhoneInput","type","autoComplete","inputComponent","isRequired","defaultMetadata","console"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport InputSmart from './InputSmartHooks'\r\nimport InputBasic from './InputBasicHooks'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tmetadata,\r\n\t\tsmartCaret,\r\n\t\tinternational,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst getInitialParsedInput = () => getParsedInputForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\tdefaultCountry,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// This is only used to detect `country` property change.\r\n\t\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t\t// This is only used to detect `defaultCountry` property change.\r\n\t\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\t\t// `parsedInput` is the `value` passed to the `<input/>`.\r\n\t\tconst [parsedInput, setParsedInput] = useState(getInitialParsedInput())\r\n\t\t// This is only used to detect `value` property changes.\r\n\t\tconst [valueForParsedInput, setValueForParsedInput] = useState(value)\r\n\t\t// If `value` property has been changed externally\r\n\t\t// then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (value !== valueForParsedInput) {\r\n\t\t\t\tsetValueForParsedInput(value)\r\n\t\t\t\tsetParsedInput(getInitialParsedInput())\r\n\t\t\t}\r\n\t\t}, [value])\r\n\t\t// If the `country` has been changed then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (country !== prevCountry) {\r\n\t\t\t\tsetPrevCountry(country)\r\n\t\t\t\tsetParsedInput(getInitialParsedInput())\r\n\t\t\t}\r\n\t\t}, [country])\r\n\t\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\t\tsetParsedInput(getInitialParsedInput())\r\n\t\t\t}\r\n\t\t}, [defaultCountry])\r\n\t\t// Update the `value` after `valueForParsedInput` has been updated.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (valueForParsedInput !== value) {\r\n\t\t\t\tonChange(valueForParsedInput)\r\n\t\t\t}\r\n\t\t}, [valueForParsedInput])\r\n\t\tconst onParsedInputChange = useCallback((parsedInput) => {\r\n\t\t\tlet value\r\n\t\t\tif (country) {\r\n\t\t\t\t// Won't allow `+` in the beginning\r\n\t\t\t\t// when a `country` has been specified.\r\n\t\t\t\tif (parsedInput && parsedInput[0] === '+') {\r\n\t\t\t\t\tparsedInput = parsedInput.slice(1)\r\n\t\t\t\t}\r\n\t\t\t} else if (!defaultCountry) {\r\n\t\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\t\tif (parsedInput && parsedInput[0] !== '+') {\r\n\t\t\t\t\tparsedInput = '+' + parsedInput\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Convert `parsedInput` to `value`.\r\n\t\t\tif (parsedInput) {\r\n\t\t\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\t\t\tasYouType.input(\r\n\t\t\t\t\tcountry && international ?\r\n\t\t\t\t\t`+${getCountryCallingCode(country, metadata)}${parsedInput}` :\r\n\t\t\t\t\tparsedInput\r\n\t\t\t\t)\r\n\t\t\t\tconst phoneNumber = asYouType.getNumber()\r\n\t\t\t\t// If it's a \"possible\" incomplete phone number.\r\n\t\t\t\tif (phoneNumber) {\r\n\t\t\t\t\tvalue = phoneNumber.number\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsetParsedInput(parsedInput)\r\n\t\t\tsetValueForParsedInput(value)\r\n\t\t}, [\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\tdefaultCountry,\r\n\t\t\tmetadata,\r\n\t\t\tsetParsedInput,\r\n\t\t\tsetValueForParsedInput\r\n\t\t])\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\t\treturn (\r\n\t\t\t<InputComponent\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tmetadata={metadata}\r\n\t\t\t\tinternational={international}\r\n\t\t\t\tcountry={country || defaultCountry}\r\n\t\t\t\tvalue={parsedInput}\r\n\t\t\t\tonChange={onParsedInputChange} />\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The phone number (in E.164 format).\r\n\t\t * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value`.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (example: `(213) 373-4253`),\r\n\t\t * or as an international phone number without \"country calling code\"\r\n\t\t * if `international` property is passed (example: `213 373 4253`).\r\n\t\t * Example: \"US\".\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (example: `+1 213 373 4253`)\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t\t * The user can still input a phone number in international format.\r\n\t\t * Example: \"US\".\r\n\t\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t\t */\r\n\t\tdefaultCountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t\t * then the `value` will be formatted as a national phone number by default.\r\n\t\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t\t */\r\n\t\tuseNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tPhoneInput.defaultProps = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type=\"tel\"`.\r\n\t\t */\r\n\t\ttype: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t\t */\r\n\t\tsmartCaret: true,\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to force international phone number format\r\n\t\t * (without \"country calling code\") when `country` is specified.\r\n\t\t */\r\n\t\t// international: false,\r\n\r\n\t\t/**\r\n\t\t * Prefer national format when formatting E.164 phone number `value`\r\n\t\t * corresponding to `defaultCountry`.\r\n\t\t */\r\n\t\tuseNationalFormatForDefaultCountryValue: true,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getParsedInputForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tinternational,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n) {\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tconsole.error(`[react-phone-number-input] Phone number ${value} corresponds to country ${phoneNumber.country} but ${country} was specified instead.`)\r\n\t\t\t}\r\n\t\t\tif (international) {\r\n\t\t\t\treturn phoneNumber.nationalNumber\r\n\t\t\t}\r\n\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t} else {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country === defaultCountry && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}"]},"metadata":{},"sourceType":"script"}
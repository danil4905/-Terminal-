{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\n\n\nimport PhoneNumber from './PhoneNumber';\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants';\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension';\nimport RegExpCache from './findNumbers/RegExpCache';\nimport { limit, trimAfterFirstMatch } from './findNumbers/util';\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8';\nimport Leniency from './findNumbers/Leniency';\nimport parsePreCandidate from './findNumbers/parsePreCandidate';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate';\nimport { isSupportedCountry } from './metadata';\nimport parseNumber from './parse_';\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\n\nvar INNER_MATCHES = [// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/', // Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)', // Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n'(?:' + pZ + '-|-' + pZ + ')' + pZ + '*(.+)', // Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n'[\\u2012-\\u2015\\uFF0D]' + pZ + '*(.+)', // Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n'\\\\.+' + pZ + '*([^.]+)', // Breaks on space - e.g. \"3324451234 8002341234\"\npZ + '+(' + PZ + '+)']; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = limit(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = limit(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = '[' + VALID_PUNCTUATION + ']' + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp('[^' + _pN + _pL + '#]+$');\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = function () {\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments[2];\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    this.state = 'NOT_READY';\n    this.searchIndex = 0;\n    this.regExpCache = new RegExpCache(32);\n    options = _extends({}, options, {\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n    /** The degree of validation requested. */\n\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError('Unknown leniency: ' + options.leniency + '.');\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n  // that use-case won't have a lot of benefit.\n\n  /** The iteration tristate. */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: 'find',\n    value: function find() // (index)\n    {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches = void 0;\n\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match = // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata);\n\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `candidate`\r\n     * if the whole candidate does not qualify as a match.\r\n     */\n\n  }, {\n    key: 'extractInnerMatch',\n    value: function extractInnerMatch(candidate, offset, text) {\n      for (var _iterator = INNER_MATCHES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var innerMatchPattern = _ref;\n        var isFirstMatch = true;\n        var matches = void 0;\n        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');\n\n        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));\n\n            var _match = this.parseAndVerify(_group, offset, text);\n\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, matches[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a group match start index,\n          // therefore using the overall match start index `matches.index`.\n\n          var match = this.parseAndVerify(group, offset + matches.index, text);\n\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: 'parseAndVerify',\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          country: number.country,\n          phone: number.phone\n        };\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: 'hasNext',\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport default PhoneNumberMatcher;","map":{"version":3,"sources":["../source/PhoneNumberMatcher.js"],"names":["INNER_MATCHES","pZ","leadLimit","limit","punctuationLimit","digitBlockLimit","MAX_LENGTH_FOR_NSN","blockLimit","punctuation","digitSequence","pNd","PATTERN","UNWANTED_END_CHAR_PATTERN","NON_DIGITS_PATTERN","MAX_SAFE_INTEGER","Number","Math","PhoneNumberMatcher","state","searchIndex","regExpCache","text","options","metadata","defaultCountry","isSupportedCountry","leniency","maxTries","Leniency","matches","candidate","offset","parsePreCandidate","isValidPreCandidate","match","phoneNumber","startsAt","endsAt","number","innerMatchPattern","isFirstMatch","possibleInnerMatch","group","trimAfterFirstMatch","isValidCandidate","extended","result","country","phone"],"mappings":"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","sourcesContent":["/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport {\r\n  MAX_LENGTH_FOR_NSN,\r\n  MAX_LENGTH_COUNTRY_CODE,\r\n  VALID_PUNCTUATION\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension'\r\n\r\nimport RegExpCache from './findNumbers/RegExpCache'\r\n\r\nimport {\r\n\tlimit,\r\n\ttrimAfterFirstMatch\r\n} from './findNumbers/util'\r\n\r\nimport {\r\n\t_pL,\r\n\t_pN,\r\n\tpZ,\r\n\tPZ,\r\n\tpNd\r\n} from './findNumbers/utf-8'\r\n\r\nimport Leniency from './findNumbers/Leniency'\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate'\r\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate'\r\n\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nimport parseNumber from './parse_'\r\n\r\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\r\nconst INNER_MATCHES =\r\n[\r\n\t// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\r\n\t'\\\\/+(.*)/',\r\n\r\n\t// Note that the bracket here is inside the capturing group, since we consider it part of the\r\n\t// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\r\n\t'(\\\\([^(]*)',\r\n\r\n\t// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\r\n\t// We require a space on either side of the hyphen for it to be considered a separator.\r\n\t`(?:${pZ}-|-${pZ})${pZ}*(.+)`,\r\n\r\n\t// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\r\n\t// possible that it's supposed to be used to break two numbers without spaces, and we haven't\r\n\t// seen many instances of it used within a number.\r\n\t`[\\u2012-\\u2015\\uFF0D]${pZ}*(.+)`,\r\n\r\n\t// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\r\n\t`\\\\.+${pZ}*([^.]+)`,\r\n\r\n\t// Breaks on space - e.g. \"3324451234 8002341234\"\r\n\t`${pZ}+(${PZ}+)`\r\n]\r\n\r\n// Limit on the number of leading (plus) characters.\r\nconst leadLimit = limit(0, 2)\r\n\r\n// Limit on the number of consecutive punctuation characters.\r\nconst punctuationLimit = limit(0, 4)\r\n\r\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\r\nconst digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE\r\n\r\n// Limit on the number of blocks separated by punctuation.\r\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\r\nconst blockLimit = limit(0, digitBlockLimit)\r\n\r\n/* A punctuation sequence allowing white space. */\r\nconst punctuation = `[${VALID_PUNCTUATION}]` + punctuationLimit\r\n\r\n// A digits block without punctuation.\r\nconst digitSequence = pNd + limit(1, digitBlockLimit)\r\n\r\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\r\nconst PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit\r\n\t+ digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit\r\n\t+ '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// We remove all characters that are not alpha or numerical characters.\r\n// The hash character is retained here, as it may signify\r\n// the previous block was an extension.\r\n//\r\n// // Don't know what does '&&' mean here.\r\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\r\n//\r\nconst UNWANTED_END_CHAR_PATTERN = new RegExp(`[^${_pN}${_pL}#]+$`)\r\n\r\nconst NON_DIGITS_PATTERN = /(\\D+)/\r\n\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1\r\n\r\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\r\nexport default class PhoneNumberMatcher\r\n{\r\n  /** The iteration tristate. */\r\n  state = 'NOT_READY'\r\n\r\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\r\n  searchIndex = 0\r\n\r\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n  // that use-case won't have a lot of benefit.\r\n  regExpCache = new RegExpCache(32)\r\n\r\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\r\n  constructor(text = '', options = {}, metadata)\r\n  {\r\n    options = {\r\n      ...options,\r\n      defaultCountry : options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\r\n      leniency : options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\r\n      maxTries : options.maxTries || MAX_SAFE_INTEGER\r\n    }\r\n\r\n\t\tif (!options.leniency) {\r\n\t\t\tthrow new TypeError('`Leniency` not supplied')\r\n\t\t}\r\n\r\n\t\tif (options.maxTries < 0) {\r\n\t\t\tthrow new TypeError('`maxTries` not supplied')\r\n\t\t}\r\n\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n    this.metadata = metadata\r\n\r\n\t\t/** The degree of validation requested. */\r\n\t\tthis.leniency = Leniency[options.leniency]\r\n\r\n\t\tif (!this.leniency)\r\n\t\t{\r\n\t\t\tthrow new TypeError(`Unknown leniency: ${options.leniency}.`)\r\n\t\t}\r\n\r\n\t\t/** The maximum number of retries after matching an invalid number. */\r\n\t\tthis.maxTries = options.maxTries\r\n\r\n\t\tthis.PATTERN = new RegExp(PATTERN, 'ig')\r\n  }\r\n\r\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\r\n\tfind() // (index)\r\n\t{\r\n\t\t// // Reset the regular expression.\r\n\t\t// this.PATTERN.lastIndex = index\r\n\r\n\t\tlet matches\r\n\t\twhile ((this.maxTries > 0) && (matches = this.PATTERN.exec(this.text)) !== null)\r\n\t\t{\r\n\t\t\tlet candidate = matches[0]\r\n\t\t\tconst offset = matches.index\r\n\r\n\t\t\tcandidate = parsePreCandidate(candidate)\r\n\r\n\t\t\tif (isValidPreCandidate(candidate, offset, this.text))\r\n\t\t\t{\r\n\t\t\t\tconst match =\r\n\t\t\t\t\t// Try to come up with a valid match given the entire candidate.\r\n\t\t\t\t\tthis.parseAndVerify(candidate, offset, this.text)\r\n\t\t\t\t\t// If that failed, try to find an \"inner match\" -\r\n\t\t\t\t\t// there might be a phone number within this candidate.\r\n\t\t\t\t\t|| this.extractInnerMatch(candidate, offset, this.text)\r\n\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tif (this.options.v2) {\r\n\t\t\t\t\t\tconst phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata)\r\n\t\t\t\t\t\tif (match.ext) {\r\n\t\t\t\t\t\t\tphoneNumber.ext = match.ext\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tstartsAt: match.startsAt,\r\n\t\t\t\t\t\t\tendsAt: match.endsAt,\r\n\t\t\t\t\t\t\tnumber: phoneNumber\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn match\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.maxTries--\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Attempts to extract a match from `candidate`\r\n   * if the whole candidate does not qualify as a match.\r\n   */\r\n  extractInnerMatch(candidate, offset, text)\r\n  {\r\n    for (const innerMatchPattern of INNER_MATCHES)\r\n    {\r\n      let isFirstMatch = true\r\n      let matches\r\n      const possibleInnerMatch = new RegExp(innerMatchPattern, 'g')\r\n      while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0)\r\n      {\r\n        if (isFirstMatch)\r\n        {\r\n          // We should handle any group before this one too.\r\n          const group = trimAfterFirstMatch\r\n          (\r\n            UNWANTED_END_CHAR_PATTERN,\r\n            candidate.slice(0, matches.index)\r\n          )\r\n\r\n          const match = this.parseAndVerify(group, offset, text)\r\n          if (match) {\r\n            return match\r\n          }\r\n\r\n          this.maxTries--\r\n          isFirstMatch = false\r\n        }\r\n\r\n        const group = trimAfterFirstMatch\r\n        (\r\n        \tUNWANTED_END_CHAR_PATTERN,\r\n        \tmatches[1]\r\n        )\r\n\r\n        // Java code does `groupMatcher.start(1)` here,\r\n        // but there's no way in javascript to get a group match start index,\r\n        // therefore using the overall match start index `matches.index`.\r\n        const match = this.parseAndVerify(group, offset + matches.index, text)\r\n        if (match) {\r\n          return match\r\n        }\r\n\r\n        this.maxTries--\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses a phone number from the `candidate` using `parseNumber` and\r\n   * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n   * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n   *\r\n   * @param candidate  the candidate match\r\n   * @param offset  the offset of {@code candidate} within {@link #text}\r\n   * @return  the parsed and validated phone number match, or null\r\n   */\r\n  parseAndVerify(candidate, offset, text)\r\n  {\r\n    if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\r\n      return\r\n  \t}\r\n\r\n    const number = parseNumber(\r\n      candidate, {\r\n        extended: true,\r\n        defaultCountry: this.options.defaultCountry\r\n      },\r\n      this.metadata\r\n    )\r\n\r\n    if (!number.possible) {\r\n      return\r\n    }\r\n\r\n    if (this.leniency(number, candidate, this.metadata, this.regExpCache))\r\n    {\r\n      // // We used parseAndKeepRawInput to create this number,\r\n      // // but for now we don't return the extra values parsed.\r\n      // // TODO: stop clearing all values here and switch all users over\r\n      // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\r\n      // number.clearCountryCodeSource()\r\n      // number.clearRawInput()\r\n      // number.clearPreferredDomesticCarrierCode()\r\n\r\n      const result = {\r\n        startsAt : offset,\r\n        endsAt   : offset + candidate.length,\r\n        country  : number.country,\r\n        phone    : number.phone\r\n      }\r\n\r\n      if (number.ext) {\r\n        result.ext = number.ext\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n\r\n  hasNext()\r\n  {\r\n    if (this.state === 'NOT_READY')\r\n    {\r\n      this.lastMatch = this.find() // (this.searchIndex)\r\n\r\n      if (this.lastMatch)\r\n      {\r\n        // this.searchIndex = this.lastMatch.endsAt\r\n        this.state = 'READY'\r\n      }\r\n      else\r\n      {\r\n        this.state = 'DONE'\r\n      }\r\n    }\r\n\r\n    return this.state === 'READY'\r\n  }\r\n\r\n  next()\r\n  {\r\n    // Check the state and find the next match as a side-effect if necessary.\r\n    if (!this.hasNext())\r\n    {\r\n      throw new Error('No next element')\r\n    }\r\n\r\n    // Don't retain that memory any longer than necessary.\r\n    const result = this.lastMatch\r\n    this.lastMatch = null\r\n    this.state = 'NOT_READY'\r\n    return result\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\nexport default function isPossibleNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error('Unknown country: ' + input.country);\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n    }\n  }\n\n  if (!metadata.possibleLengths()) {\n    throw new Error('Metadata too old');\n  }\n\n  return is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\nexport function is_possible_number(national_number, is_international, metadata) {\n  switch (checkNumberLengthForType(national_number, undefined, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !is_international\n\n    default:\n      return false;\n  }\n}","map":{"version":3,"sources":["../source/isPossibleNumber_.js"],"names":["options","metadata","input","is_possible_number","checkNumberLengthForType"],"mappings":"AAAA,OAAA,QAAA,MAAA,YAAA;AACA,SAAA,wBAAA,QAAA,kBAAA;AAEA,eAAe,SAAA,gBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,QAAA,EACf;AACC;AACA,MAAIA,OAAAA,KAAJ,SAAA,EAA2B;AAC1BA,IAAAA,OAAAA,GAAAA,EAAAA;AACA;;AAEDC,EAAAA,QAAAA,GAAW,IAAA,QAAA,CAAXA,QAAW,CAAXA;;AAEA,MAAID,OAAAA,CAAJ,EAAA,EACA;AACC,QAAI,CAACE,KAAAA,CAAL,kBAAA,EAA+B;AAC9B,YAAM,IAAA,KAAA,CAAN,oCAAM,CAAN;AACA;;AACDD,IAAAA,QAAAA,CAAAA,iCAAAA,CAA2CC,KAAAA,CAA3CD,kBAAAA;AALD,GAAA,MAQA;AACC,QAAI,CAACC,KAAAA,CAAL,KAAA,EAAkB;AACjB,aAAA,KAAA;AACA;;AACD,QAAIA,KAAAA,CAAJ,OAAA,EAAmB;AAClB,UAAI,CAACD,QAAAA,CAAAA,UAAAA,CAAoBC,KAAAA,CAAzB,OAAKD,CAAL,EAAyC;AACxC,cAAM,IAAA,KAAA,CAAA,sBAA8BC,KAAAA,CAApC,OAAM,CAAN;AACA;;AACDD,MAAAA,QAAAA,CAAAA,OAAAA,CAAiBC,KAAAA,CAAjBD,OAAAA;AAJD,KAAA,MAKO;AACN,UAAI,CAACC,KAAAA,CAAL,kBAAA,EAA+B;AAC9B,cAAM,IAAA,KAAA,CAAN,oCAAM,CAAN;AACA;;AACDD,MAAAA,QAAAA,CAAAA,iCAAAA,CAA2CC,KAAAA,CAA3CD,kBAAAA;AACA;AACD;;AAED,MAAI,CAACA,QAAAA,CAAL,eAAKA,EAAL,EAAiC;AAChC,UAAM,IAAA,KAAA,CAAN,kBAAM,CAAN;AACA;;AAED,SAAOE,kBAAAA,CAAmBD,KAAAA,CAAAA,KAAAA,IAAeA,KAAAA,CAAlCC,cAAAA,EAAAA,SAAAA,EAAP,QAAOA,CAAP;AACA;AAED,OAAO,SAAA,kBAAA,CAAA,eAAA,EAAA,gBAAA,EAAA,QAAA,EACP;AACC,UAAQC,wBAAAA,CAAAA,eAAAA,EAAAA,SAAAA,EAAR,QAAQA,CAAR;AAEC,SAAA,aAAA;AACC,aAAA,IAAA;AACD;AACA;;AACA;AACC,aAAA,KAAA;AAPF;AASA","sourcesContent":["import Metadata from './metadata'\r\nimport { checkNumberLengthForType } from './getNumberType_'\r\n\r\nexport default function isPossibleNumber(input, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!metadata.possibleLengths()) {\r\n\t\tthrow new Error('Metadata too old')\r\n\t}\r\n\r\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata)\r\n}\r\n\r\nexport function is_possible_number(national_number, is_international, metadata)\r\n{\r\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata))\r\n\t{\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !is_international\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}
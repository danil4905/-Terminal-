{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text = void 0;\n  var options = void 0;\n  var metadata = void 0; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _extends({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new Error('Invalid second argument: ' + arg_2);\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};","map":{"version":3,"sources":["../source/parsePhoneNumber.js"],"names":["text","options","metadata","normalizeArguments","parsePhoneNumber_","arg_1","arg_2","arg_3","arg_4","Array","defaultCountry","isObject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,iBAAA,MAAA,qBAAA;AAEA,eAAe,SAAA,gBAAA,GAA4B;AAAA,MAAA,mBAAA,GACNG,kBAAAA,CADM,SACNA,CADM;AAAA,MAClCH,IADkC,GAAA,mBAAA,CAAA,IAAA;AAAA,MAC5BC,OAD4B,GAAA,mBAAA,CAAA,OAAA;AAAA,MACnBC,QADmB,GAAA,mBAAA,CAAA,QAAA;;AAE1C,SAAOE,iBAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAP,QAAOA,CAAP;AACA;AAED,OAAO,SAAA,kBAAA,CAAA,IAAA,EACP;AAAA,MAAA,qBAAA,GACsCK,KAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CADtC,IACsCA,CADtC;AAAA,MAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA,EAAA,CAAA,CAAA;AAAA,MACQJ,KADR,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,MACeC,KADf,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,MACsBC,KADtB,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,MAC6BC,KAD7B,GAAA,sBAAA,CAAA,CAAA,CAAA;;AAGC,MAAIR,IAAAA,GAAAA,KAAJ,CAAA;AACA,MAAIC,OAAAA,GAAAA,KAAJ,CAAA;AACA,MAAIC,QAAAA,GAAAA,KAAJ,CAAA,CALD,CAOC;AACA;;AACA,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC9BF,IAAAA,IAAAA,GAAAA,KAAAA;AADD,GAAA,MAGK,MAAM,IAAA,SAAA,CAAN,sCAAM,CAAN,CAZN,CAcC;AACA;;;AACA,MAAI,CAAA,KAAA,IAAU,OAAA,KAAA,KAAd,QAAA,EACA;AACC,QAAA,KAAA,EAAW;AACVC,MAAAA,OAAAA,GAAAA,KAAAA;AACAC,MAAAA,QAAAA,GAAAA,KAAAA;AAFD,KAAA,MAGO;AACND,MAAAA,OAAAA,GAAAA,SAAAA;AACAC,MAAAA,QAAAA,GAAAA,KAAAA;AACA;;AAED,QAAA,KAAA,EAAW;AACVD,MAAAA,OAAAA,GAAAA,QAAAA,CAAAA;AAAYS,QAAAA,cAAAA,EAAZT;AAAAA,OAAAA,EAAAA,OAAAA,CAAAA;AACA;AACD,GAbD,CAcA;AACA;AAfA,OAgBK,IAAIU,QAAAA,CAAJ,KAAIA,CAAJ,EACL;AACC,UAAA,KAAA,EAAW;AACVV,QAAAA,OAAAA,GAAAA,KAAAA;AACAC,QAAAA,QAAAA,GAAAA,KAAAA;AAFD,OAAA,MAGO;AACNA,QAAAA,QAAAA,GAAAA,KAAAA;AACA;AAPG,KAAA,MASA,MAAM,IAAA,KAAA,CAAA,8BAAN,KAAM,CAAN;;AAEL,SAAO;AACNF,IAAAA,IAAAA,EADM,IAAA;AAENC,IAAAA,OAAAA,EAFM,OAAA;AAGNC,IAAAA,QAAAA,EAAAA;AAHM,GAAP;AAKA,C,CAED;;AACA;;AACA,IAAMS,QAAAA,GAAW,SAAXA,QAAW,CAAA,CAAA,EAAA;AAAA,SAAK,CAAA,OAAA,CAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAA,CAAA,CAAA,MAAL,QAAA;AAAjB,CAAA","sourcesContent":["import parsePhoneNumber_ from './parsePhoneNumber_'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'"]},"metadata":{},"sourceType":"module"}
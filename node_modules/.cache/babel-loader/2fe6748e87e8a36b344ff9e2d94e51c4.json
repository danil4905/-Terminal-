{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _parse2 = require('./parse');\n\nvar _parse3 = _interopRequireDefault(_parse2);\n\nvar _inputControl = require('./input control');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\n\nvar ReactInput = (_temp2 = _class = function (_React$Component) {\n  _inherits(ReactInput, _React$Component);\n\n  function ReactInput() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ReactInput);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactInput.__proto__ || Object.getPrototypeOf(ReactInput)).call.apply(_ref, [this].concat(args))), _this), _this.storeInstance = function (instance) {\n      _this.input = instance;\n    }, _this.getInputElement = function () {\n      return _this.input;\n    }, _this.onChange = function (event) {\n      var _this$props = _this.props,\n          parse = _this$props.parse,\n          format = _this$props.format;\n      return (0, _inputControl.onChange)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _this.onPaste = function (event) {\n      var _this$props2 = _this.props,\n          parse = _this$props2.parse,\n          format = _this$props2.format;\n      return (0, _inputControl.onPaste)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _this.onCut = function (event) {\n      var _this$props3 = _this.props,\n          parse = _this$props3.parse,\n          format = _this$props3.format;\n      return (0, _inputControl.onCut)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _this.onBlur = function (event) {\n      var _this$props4 = _this.props,\n          parse = _this$props4.parse,\n          onBlur = _this$props4.onBlur; // This `onBlur` interceptor is a workaround for `redux-form`,\n      // so that it gets the right (parsed, not the formatted one)\n      // `event.target.value` in its `onBlur` handler.\n\n      if (onBlur) {\n        var _event = _extends({}, event, {\n          target: _extends({}, event.target, {\n            value: (0, _parse3.default)(_this.getInputElement().value, undefined, parse).value\n          }) // For `redux-form` event detection.\n          // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n        });\n\n        _event.stopPropagation = event.stopPropagation;\n        _event.preventDefault = event.preventDefault;\n        onBlur(_event);\n      }\n    }, _this.onKeyDown = function (event) {\n      var _this$props5 = _this.props,\n          parse = _this$props5.parse,\n          format = _this$props5.format;\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(event);\n      }\n\n      return (0, _inputControl.onKeyDown)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ReactInput, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          value = _props.value,\n          parse = _props.parse,\n          format = _props.format,\n          inputComponent = _props.inputComponent,\n          rest = _objectWithoutProperties(_props, ['value', 'parse', 'format', 'inputComponent']); // Non-string `inputComponent`s would work in this case\n      // but it would also introduce a caret reset bug:\n      // the caret position would reset on each input.\n      // The origins of this bug are unknown, they may be\n      // somehow related to the `ref` property\n      // being intercepted by React here.\n\n\n      return _react2.default.createElement(inputComponent, _extends({}, rest, {\n        ref: this.storeInstance,\n        value: format(isEmpty(value) ? '' : value).text,\n        onKeyDown: this.onKeyDown,\n        onChange: this.onChange,\n        onPaste: this.onPaste,\n        onCut: this.onCut,\n        onBlur: this.onBlur\n      }));\n    }\n    /**\r\n     * Returns `<input/>` DOM Element.\r\n     * @return {DOMElement}\r\n     */\n    // This handler is a workaround for `redux-form`.\n\n  }, {\n    key: 'focus',\n\n    /**\r\n     * Focuses the `<input/>`.\r\n     * Can be called manually.\r\n     */\n    value: function focus() {\n      this.getInputElement().focus();\n    }\n  }]);\n\n  return ReactInput;\n}(_react2.default.Component), _class.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: _propTypes2.default.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: _propTypes2.default.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: _propTypes2.default.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: _propTypes2.default.string.isRequired,\n  // Is parsed from <input/> text.\n  value: _propTypes2.default.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: _propTypes2.default.func.isRequired,\n  // This `onBlur` interceptor is a workaround for `redux-form`,\n  // so that it gets the parsed `value` in its `onBlur` handler,\n  // not the formatted text.\n  onBlur: _propTypes2.default.func,\n  // Passthrough\n  onKeyDown: _propTypes2.default.func\n}, _class.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n}, _temp2);\nexports.default = ReactInput;\n\nfunction isEmpty(value) {\n  return value === undefined || value === null;\n}","map":{"version":3,"sources":["../source/ReactInput.js"],"names":["ReactInput","React","Component","propTypes","parse","PropTypes","format","inputComponent","type","value","onChange","onBlur","onKeyDown","func","defaultProps","rest","ref","isEmpty","onPaste","onCut","storeInstance","getInputElement","target","event","_event"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport _parse from './parse'\r\n\r\nimport\r\n{\r\n\tonChange,\r\n\tonCut,\r\n\tonPaste,\r\n\tonKeyDown\r\n}\r\nfrom './input control'\r\n\r\n// Usage:\r\n//\r\n// <ReactInput\r\n// \tvalue={this.state.phone}\r\n// \tonChange={phone => this.setState({ phone })}\r\n// \tparse={character => character}\r\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\r\n//\r\nexport default class ReactInput extends React.Component\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Parses a single characher of `<input/>` text.\r\n\t\tparse  : PropTypes.func.isRequired,\r\n\r\n\t\t// Formats `value` into `<input/>` text.\r\n\t\tformat : PropTypes.func.isRequired,\r\n\r\n\t\t// Renders `<input/>` by default.\r\n\t\tinputComponent : PropTypes.elementType.isRequired,\r\n\r\n\t\t// `<input/>` `type` attribute.\r\n\t\ttype : PropTypes.string.isRequired,\r\n\r\n\t\t// Is parsed from <input/> text.\r\n\t\tvalue  : PropTypes.string,\r\n\r\n\t\t// This handler is called each time `<input/>` text is changed.\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\r\n\t\t// so that it gets the parsed `value` in its `onBlur` handler,\r\n\t\t// not the formatted text.\r\n\t\tonBlur : PropTypes.func,\r\n\r\n\t\t// Passthrough\r\n\t\tonKeyDown : PropTypes.func\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t// Renders `<input/>` by default.\r\n\t\tinputComponent : 'input',\r\n\r\n\t\t// `<input/>` `type` attribute.\r\n\t\ttype : 'text'\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tinputComponent,\r\n\t\t\t...rest\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// Non-string `inputComponent`s would work in this case\r\n\t\t// but it would also introduce a caret reset bug:\r\n\t\t// the caret position would reset on each input.\r\n\t\t// The origins of this bug are unknown, they may be\r\n\t\t// somehow related to the `ref` property\r\n\t\t// being intercepted by React here.\r\n\t\treturn React.createElement(inputComponent,\r\n\t\t{\r\n\t\t\t...rest,\r\n\t\t\tref       : this.storeInstance,\r\n\t\t\tvalue     : format(isEmpty(value) ? '' : value).text,\r\n\t\t\tonKeyDown : this.onKeyDown,\r\n\t\t\tonChange  : this.onChange,\r\n\t\t\tonPaste   : this.onPaste,\r\n\t\t\tonCut     : this.onCut,\r\n\t\t\tonBlur    : this.onBlur\r\n\t\t})\r\n\t}\r\n\r\n\tstoreInstance = (instance) =>\r\n\t{\r\n\t\tthis.input = instance\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `<input/>` DOM Element.\r\n\t * @return {DOMElement}\r\n\t */\r\n\tgetInputElement = () =>\r\n\t{\r\n\t\treturn this.input\r\n\t}\r\n\r\n\tonChange = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparse,\r\n\t\t\tformat\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn onChange\r\n\t\t(\r\n\t\t\tevent,\r\n\t\t\tthis.getInputElement(),\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tthis.props.onChange\r\n\t\t)\r\n\t}\r\n\r\n\tonPaste = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparse,\r\n\t\t\tformat\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn onPaste\r\n\t\t(\r\n\t\t\tevent,\r\n\t\t\tthis.getInputElement(),\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tthis.props.onChange\r\n\t\t)\r\n\t}\r\n\r\n\tonCut = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparse,\r\n\t\t\tformat\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn onCut\r\n\t\t(\r\n\t\t\tevent,\r\n\t\t\tthis.getInputElement(),\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tthis.props.onChange\r\n\t\t)\r\n\t}\r\n\r\n\t// This handler is a workaround for `redux-form`.\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { parse, onBlur } = this.props\r\n\r\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\r\n\t\t// so that it gets the right (parsed, not the formatted one)\r\n\t\t// `event.target.value` in its `onBlur` handler.\r\n\t\tif (onBlur)\r\n\t\t{\r\n\t\t\tconst _event =\r\n\t\t\t{\r\n\t\t\t\t...event,\r\n\t\t\t\ttarget:\r\n\t\t\t\t{\r\n\t\t\t\t\t...event.target,\r\n\t\t\t\t\tvalue: _parse(this.getInputElement().value, undefined, parse).value\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// For `redux-form` event detection.\r\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t\t_event.preventDefault  = event.preventDefault\r\n\r\n\t\t\tonBlur(_event)\r\n\t\t}\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparse,\r\n\t\t\tformat\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tif (this.props.onKeyDown)\r\n\t\t{\r\n\t\t\tthis.props.onKeyDown(event)\r\n\t\t}\r\n\r\n\t\treturn onKeyDown\r\n\t\t(\r\n\t\t\tevent,\r\n\t\t\tthis.getInputElement(),\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tthis.props.onChange\r\n\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * Focuses the `<input/>`.\r\n\t * Can be called manually.\r\n\t */\r\n\tfocus()\r\n\t{\r\n\t\tthis.getInputElement().focus()\r\n\t}\r\n}\r\n\r\nfunction isEmpty(value)\r\n{\r\n\treturn value === undefined || value === null\r\n}"]},"metadata":{},"sourceType":"script"}
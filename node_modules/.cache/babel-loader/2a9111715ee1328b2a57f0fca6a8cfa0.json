{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.default = formatPhoneNumber;\nexports.formatPhoneNumberIntl = formatPhoneNumberIntl;\n\nvar _core = require('libphonenumber-js/core');\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\n\nfunction formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  var phoneNumber = (0, _core.parsePhoneNumberFromString)(value, metadata);\n\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n\n  return phoneNumber.format(format);\n}\n\nfunction formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}","map":{"version":3,"sources":["../../source/libphonenumber/formatPhoneNumber.js"],"names":["formatPhoneNumber","metadata","format","phoneNumber","formatPhoneNumberIntl"],"mappings":";;;;;;;;;;;;kBAUwBA,iB;QA2BRI,qB,GAAAA,qB;;AArChB,IAAA,KAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AAEA;;;;;;;;;;AAQe,SAAA,iBAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAoD;AAClE,MAAI,CAAJ,QAAA,EAAe;AACd,QAAI,CAAA,OAAA,MAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAA,MAAA,CAAA,MAAJ,QAAA,EAAgC;AAC/BH,MAAAA,QAAAA,GAAAA,MAAAA;AACAC,MAAAA,MAAAA,GAAAA,UAAAA;AACA;AACD;;AACD,MAAI,CAAJ,KAAA,EAAY;AACX,WAAA,EAAA;AACA;;AACD,MAAMC,WAAAA,GAAc,CAAA,GAAA,KAAA,CAAA,0BAAA,EAAA,KAAA,EAApB,QAAoB,CAApB;;AACA,MAAI,CAAJ,WAAA,EAAkB;AACjB,WAAA,EAAA;AACA,GAbiE,CAclE;AACA;;;AACA,UAAA,MAAA;AACC,SAAA,UAAA;AACCD,MAAAA,MAAAA,GAAAA,UAAAA;AACA;;AACD,SAAA,eAAA;AACCA,MAAAA,MAAAA,GAAAA,eAAAA;AACA;AANF;;AAQA,SAAOC,WAAAA,CAAAA,MAAAA,CAAP,MAAOA,CAAP;AACA;;AAEM,SAAA,qBAAA,CAAA,KAAA,EAAA,QAAA,EAAgD;AACtD,SAAOH,iBAAAA,CAAAA,KAAAA,EAAAA,eAAAA,EAAP,QAAOA,CAAP;AACA","sourcesContent":["import { parsePhoneNumberFromString } from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatPhoneNumber(value, format, metadata) {\r\n\tif (!metadata) {\r\n\t\tif (typeof format === 'object') {\r\n\t\t\tmetadata = format\r\n\t\t\tformat = 'NATIONAL'\r\n\t\t}\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumberFromString(value, metadata)\r\n\tif (!phoneNumber) {\r\n\t\treturn ''\r\n\t}\r\n\t// Deprecated.\r\n\t// Legacy `format`s.\r\n\tswitch (format) {\r\n\t\tcase 'National':\r\n\t\t\tformat = 'NATIONAL'\r\n\t\t\tbreak\r\n\t\tcase 'International':\r\n\t\t\tformat = 'INTERNATIONAL'\r\n\t\t\tbreak\r\n\t}\r\n\treturn phoneNumber.format(format)\r\n}\r\n\r\nexport function formatPhoneNumberIntl(value, metadata) {\r\n\treturn formatPhoneNumber(value, 'INTERNATIONAL', metadata)\r\n}"]},"metadata":{},"sourceType":"script"}
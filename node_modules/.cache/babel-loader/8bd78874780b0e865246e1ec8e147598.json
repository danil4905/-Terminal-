{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _class2, _temp, _initialiseProps;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _core = require('libphonenumber-js/core');\n\nvar _InputSmart = require('./InputSmart');\n\nvar _InputSmart2 = _interopRequireDefault(_InputSmart);\n\nvar _InputBasic = require('./InputBasic');\n\nvar _InputBasic2 = _interopRequireDefault(_InputBasic);\n\nvar _Flag = require('./Flag');\n\nvar _Flag2 = _interopRequireDefault(_Flag);\n\nvar _PropTypes = require('./PropTypes');\n\nvar _inputControl = require('./input-control');\n\nvar _countries2 = require('./countries');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nvar PhoneNumberInput = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp = _class2 = function (_PureComponent) {\n  _inherits(PhoneNumberInput, _PureComponent);\n\n  function PhoneNumberInput(props) {\n    _classCallCheck(this, PhoneNumberInput);\n\n    var _this = _possibleConstructorReturn(this, (PhoneNumberInput.__proto__ || Object.getPrototypeOf(PhoneNumberInput)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var _this$props = _this.props,\n        value = _this$props.value,\n        labels = _this$props.labels,\n        international = _this$props.international,\n        metadata = _this$props.metadata;\n    var _this$props2 = _this.props,\n        country = _this$props2.country,\n        countries = _this$props2.countries,\n        countryOptions = _this$props2.countryOptions; // Validate `country`.\n\n    if (country) {\n      if (!_this.isCountrySupportedWithError(country)) {\n        country = undefined;\n      }\n    } // Validate `countries`.\n\n\n    countries = filterCountries(countries, metadata); // Validate `countryOptions`.\n\n    countryOptions = filterCountryOptions(countryOptions, metadata);\n    var phoneNumber = (0, _inputControl.parsePhoneNumber)(value, metadata);\n    var pre_selected_country = (0, _inputControl.getPreSelectedCountry)(phoneNumber, country, countries || (0, _countries2.getCountryCodes)(labels).filter(function (_) {\n      return _ === 'ZZ' || metadata.countries[_];\n    }), international, metadata);\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: pre_selected_country,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: countries,\n      // Generate country `<select/>` options.\n      country_select_options: generateCountrySelectOptions(countries, countryOptions, _this.props),\n      // `parsed_input` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value`is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `parsed_input` is `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `parsed_input` is `+78005553535`.\n      parsed_input: generateParsedInput(value, phoneNumber, _this.props),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `parsed_input` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `parsed_input` and `country` should be updated.\n      value: value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.props.country;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (!country || !this.isCountrySupportedWithError(country)) {\n          country = undefined;\n        }\n\n        if (selectedCountry !== country) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _props = this.props,\n          onCountryChange = _props.onCountryChange,\n          onChange = _props.onChange,\n          reset = _props.reset; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && this.state.country !== prevState.country) {\n        onCountryChange(this.state.country);\n      } // Some users requested a way to reset the component\n      // (both number `<input/>` and country `<select/>`).\n      // Whenever `reset` property changes both number `<input/>`\n      // and country `<select/>` are reset.\n      // It's not implemented as some instance `.reset()` method\n      // because `ref` will likely be forwarded to `<input/>`\n      // in some next major version.\n      // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n\n      if (reset !== prevProps.reset) {\n        onChange();\n\n        if (onCountryChange) {\n          onCountryChange(this.state.country);\n        }\n      }\n    } // A shorthand for not passing `metadata` as a second argument.\n    // Country `<select/>` `onChange` handler.\n    // Phone number `<input/>` `onKeyDown` handler.\n\n    /**\r\n     * `<input/>` `onChange()` handler.\r\n     * Updates `value` property accordingly (so that they are kept in sync).\r\n     * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    // Toggles the `--focus` CSS class.\n    // Toggles the `--focus` CSS class.\n    // This `onBlur` interceptor is a workaround for `redux-form`\n    // so that it gets the up-to-date `value` in its `onBlur` handler.\n    // Without this fix it just gets the actual (raw) input field textual value.\n    // E.g. `+7 800 555 35 35` instead of `+78005553535`.\n    //\n    // A developer is not supposed to pass this `onBlur` property manually.\n    // Instead, `redux-form` passes `onBlur` to this component automatically\n    // and this component patches that `onBlur` handler (a hacky way but works).\n    //\n    // When country `<select/>` is toggled.\n    // Can be called externally.\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          name = _props2.name,\n          disabled = _props2.disabled,\n          disablePhoneInput = _props2.disablePhoneInput,\n          autoComplete = _props2.autoComplete,\n          countrySelectTabIndex = _props2.countrySelectTabIndex,\n          showCountrySelect = _props2.showCountrySelect,\n          style = _props2.style,\n          className = _props2.className,\n          inputClassName = _props2.inputClassName,\n          getInputClassName = _props2.getInputClassName,\n          countrySelectAriaLabel = _props2.countrySelectAriaLabel,\n          countrySelectProperties = _props2.countrySelectProperties,\n          error = _props2.error,\n          indicateInvalid = _props2.indicateInvalid,\n          CountrySelectComponent = _props2.countrySelectComponent,\n          countrySelectProps = _props2.countrySelectProps,\n          _InputComponent = _props2.inputComponent,\n          inputComponent = _props2.numberInputComponent,\n          numberInputProps = _props2.numberInputProps,\n          smartCaret = _props2.smartCaret,\n          ext = _props2.ext,\n          _ = _props2.country,\n          countries = _props2.countries,\n          countryOptions = _props2.countryOptions,\n          labels = _props2.labels,\n          flags = _props2.flags,\n          flagComponent = _props2.flagComponent,\n          flagsPath = _props2.flagsPath,\n          international = _props2.international,\n          internationalIcon = _props2.internationalIcon,\n          displayInitialValueAsLocalNumber = _props2.displayInitialValueAsLocalNumber,\n          onCountryChange = _props2.onCountryChange,\n          limitMaxLength = _props2.limitMaxLength,\n          metadata = _props2.metadata,\n          phoneNumberInputProps = _objectWithoutProperties(_props2, ['name', 'disabled', 'disablePhoneInput', 'autoComplete', 'countrySelectTabIndex', 'showCountrySelect', 'style', 'className', 'inputClassName', 'getInputClassName', 'countrySelectAriaLabel', 'countrySelectProperties', 'error', 'indicateInvalid', 'countrySelectComponent', 'countrySelectProps', 'inputComponent', 'numberInputComponent', 'numberInputProps', 'smartCaret', 'ext', 'country', 'countries', 'countryOptions', 'labels', 'flags', 'flagComponent', 'flagsPath', 'international', 'internationalIcon', 'displayInitialValueAsLocalNumber', 'onCountryChange', 'limitMaxLength', 'metadata']);\n\n      var _state = this.state,\n          country = _state.country,\n          hidePhoneInputField = _state.hidePhoneInputField,\n          country_select_options = _state.country_select_options,\n          parsed_input = _state.parsed_input,\n          isFocused = _state.isFocused;\n      var InputComponent = _InputComponent || (smartCaret ? _InputSmart2.default : _InputBasic2.default); // Extract `countrySelectProperties` from `this.props`\n      // also removing them from `phoneNumberInputProps`.\n\n      var _countrySelectProps = {};\n\n      if (countrySelectProperties) {\n        for (var key in countrySelectProperties) {\n          if (this.props.hasOwnProperty(key)) {\n            _countrySelectProps[countrySelectProperties[key]] = this.props[key];\n            delete phoneNumberInputProps[key];\n          }\n        }\n      } // Could use something like `aria-label={labels.phone}` on the `<InputComponent/>`,\n      // however, some users may have already been using this component with one of:\n      // * `<label/>` container\n      // * `aria-labelledby`\n      // * `id` and `<label for/>`\n      // https://developers.google.com/web/fundamentals/accessibility/semantics-aria/aria-labels-and-relationships\n      // Maybe in some future major version update.\n\n\n      return _react2.default.createElement('div', {\n        style: style,\n        className: (0, _classnames2.default)('react-phone-number-input', {\n          'react-phone-number-input--focus': isFocused,\n          'react-phone-number-input--invalid': error && indicateInvalid\n        }, className)\n      }, _react2.default.createElement('div', {\n        className: 'react-phone-number-input__row'\n      }, showCountrySelect && _react2.default.createElement(CountrySelectComponent, _extends({}, _countrySelectProps, {\n        ref: this.storeCountrySelectInstance,\n        name: name ? name + '__country' : undefined,\n        'aria-label': countrySelectAriaLabel || labels.country,\n        tabIndex: countrySelectTabIndex\n      }, countrySelectProps, {\n        value: country,\n        options: country_select_options,\n        onChange: this.onCountryChange,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        disabled: disabled,\n        hidePhoneInputField: this.hidePhoneInputField,\n        focusPhoneInputField: this.focus,\n        className: 'react-phone-number-input__country'\n      })), !hidePhoneInputField && _react2.default.createElement(InputComponent, _extends({\n        type: 'tel',\n        autoComplete: autoComplete\n      }, numberInputProps, phoneNumberInputProps, {\n        ref: this.storePhoneNumberInputInstance,\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: parsed_input || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onPhoneNumberKeyDown,\n        disabled: disabled || disablePhoneInput,\n        inputComponent: inputComponent,\n        className: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__phone', {\n          'react-phone-number-input__input--disabled': disabled || disablePhoneInput,\n          'react-phone-number-input__input--invalid': error && indicateInvalid\n        }, inputClassName, getInputClassName && getInputClassName({\n          disabled: disabled || disablePhoneInput,\n          invalid: error && indicateInvalid\n        }))\n      })), ext && !hidePhoneInputField && _react2.default.createElement('label', {\n        className: 'react-phone-number-input__ext'\n      }, labels.ext, _react2.default.cloneElement(ext, {\n        onChange: ext.props.onChange ? function (event) {\n          return ext.props.onChange(parseExtDigits(event));\n        } : undefined,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        className: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__ext-input', {\n          'react-phone-number-input__input--disabled': disabled || disablePhoneInput\n        }, inputClassName, getInputClassName && getInputClassName({\n          disabled: disabled || disablePhoneInput\n        }), ext.props.className)\n      }))), error && indicateInvalid && _react2.default.createElement('div', {\n        className: 'react-phone-number-input__error'\n      }, error));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    value: function getDerivedStateFromProps(props, state) {\n      var country = state.country,\n          hasUserSelectedACountry = state.hasUserSelectedACountry,\n          value = state.value,\n          _state$props = state.props,\n          old_default_country = _state$props.country,\n          old_value = _state$props.value,\n          old_reset = _state$props.reset;\n      var metadata = props.metadata,\n          countries = props.countries,\n          new_default_country = props.country,\n          new_value = props.value,\n          new_reset = props.reset;\n      var new_state = {\n        // Emulate `prevProps` via `state.props`.\n        props: props,\n        // If the user has already manually selected a country\n        // then don't override that already selected country\n        // if the default `country` property changes.\n        // That's what `hasUserSelectedACountry` flag is for.\n        hasUserSelectedACountry: hasUserSelectedACountry // If `countries` or `labels` or `international` changed\n        // then re-generate country `<select/>` options.\n\n      };\n\n      if (props.countries !== state.props.countries || props.labels !== state.props.labels || props.international !== state.props.international) {\n        // Re-generate country select options.\n        new_state.country_select_options = generateCountrySelectOptions(filterCountries(props.countries, metadata), filterCountryOptions(props.countryOptions, metadata), props);\n      } // Some users requested a way to reset the component\n      // (both number `<input/>` and country `<select/>`).\n      // Whenever `reset` property changes both number `<input/>`\n      // and country `<select/>` are reset.\n      // It's not implemented as some instance `.reset()` method\n      // because `ref` will likely be forwarded to `<input/>`.\n      // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n\n      if (new_reset !== old_reset) {\n        return _extends({}, new_state, {\n          parsed_input: undefined,\n          value: undefined,\n          country: new_default_country\n        });\n      } // If the default country changed.\n      // (e.g. in case of ajax GeoIP detection after page loaded)\n      // then select it but only if the user hasn't already manually\n      // selected a country and no phone number has been entered so far.\n      // Because if the user has already started inputting a phone number\n      // then he's okay with no country being selected at all (\"International\")\n      // and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\n\n      if (new_default_country !== old_default_country && !hasUserSelectedACountry && !value && !new_value) {\n        return _extends({}, new_state, {\n          country: isCountrySupportedWithError(new_default_country, metadata) ? new_default_country : old_default_country // `value` is `undefined`.\n          // `parsed_input` is `undefined` because `value` is `undefined`.\n\n        });\n      } // If a new `value` is set externally.\n      // (e.g. as a result of an ajax API request\n      //  to get user's phone after page loaded)\n      // The first part — `new_value !== old_value` —\n      // is basically `props.value !== prevProps.value`\n      // so it means \"if value property was changed externally\".\n      // The second part — `new_value !== value` —\n      // is for ignoring the `getDerivedStateFromProps()` call\n      // which happens in `this.onChange()` right after `this.setState()`.\n      // If this `getDerivedStateFromProps()` call isn't ignored\n      // then the country flag would reset on each input.\n      else if (new_value !== old_value && new_value !== value) {\n          var phoneNumber = (0, _inputControl.parsePhoneNumber)(new_value, metadata);\n          var parsedCountry = void 0;\n\n          if (phoneNumber) {\n            var _countries = filterCountries(props.countries, metadata);\n\n            if (!_countries || _countries.indexOf(phoneNumber.country) >= 0) {\n              parsedCountry = phoneNumber.country;\n            }\n          }\n\n          return _extends({}, new_state, {\n            parsed_input: generateParsedInput(new_value, phoneNumber, props),\n            value: new_value,\n            country: new_value ? parsedCountry : country\n          });\n        } // `country` didn't change.\n      // `value` didn't change.\n      // `parsed_input` didn't change, because `value` didn't change.\n      //\n      // Maybe `new_state.country_select_options` changed.\n      // In any case, update `prevProps`.\n\n\n      return new_state;\n    }\n  }]);\n\n  return PhoneNumberInput;\n}(PureComponent), _class2.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   */\n  value: _propTypes2.default.string,\n\n  /**\r\n   * Updates the `value` as the user inputs the phone number.\r\n   */\n  onChange: _propTypes2.default.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: _propTypes2.default.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: _propTypes2.default.func,\n\n  /**\r\n   * `onKeyDown` handler (e.g. to handle Enter key press).\r\n   * @ignore\r\n   */\n  onKeyDown: _propTypes2.default.func,\n\n  /**\r\n   * Disables both the phone number `<input/>`\r\n   * and the country `<select/>`.\r\n   */\n  // (is `false` by default)\n  disabled: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: _propTypes2.default.string.isRequired,\n\n  /**\r\n   * Set to `true` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if this flag is set to `true`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, this flag is set to `false`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `false` by default)\n  displayInitialValueAsLocalNumber: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: _propTypes2.default.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: _PropTypes.labels.isRequired,\n\n  /**\r\n   * The base URL path for country flag icons.\r\n   * By default it loads country flag icons from\r\n   * `flag-icon-css` repo github pages website.\r\n   * I imagine someone might want to download\r\n   * those country flag icons and host them\r\n   * on their own servers instead.\r\n   * Warning: in future new countries can be added\r\n   * to the country select which would result in\r\n   * \"Image not found\" errors when using custom `flagsPath`\r\n   * due to the custom-hosted flags bundle being outdated\r\n   * and missing the new flags.\r\n   * So if using custom `flagsPath` always check `CHANGELOG.md`\r\n   * for new country announcements before updating this library.\r\n   */\n  flagsPath: _propTypes2.default.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags replace the default ones.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": () => <img src=\"...\"/> }`\r\n   *\r\n   * Can be used to replace the default flags\r\n   * with custom ones for certain (or all) countries.\r\n   *\r\n   * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n   *\r\n   * By default flag icons are inserted as `<img/>`s\r\n   * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n   *\r\n   * There might be some cases\r\n   * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n   * when including the full set of `<svg/>` country flags (3 megabytes)\r\n   * is more appropriate than downloading them individually at runtime only if needed.\r\n   *\r\n   * Example:\r\n   *\r\n   * `// Uses <svg/> flags (3 megabytes):`\r\n   *\r\n   * `import flags from 'react-phone-number-input/flags'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: _propTypes2.default.objectOf(_propTypes2.default.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * country : string — The country code.\r\n   * * flagsPath : string — The `flagsPath` property (see above).\r\n   * * flags : object — The `flags` property (see above).\r\n   */\n  flagComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n   */\n  international: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * Custom \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to hide country `<select/>`.\r\n   */\n  // (is `true` by default)\n  showCountrySelect: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * HTML `tabindex` attribute for country `<select/>`.\r\n   */\n  countrySelectTabIndex: _propTypes2.default.number,\n\n  /**\r\n   * HTML `aria-label` attribute for country `<select/>`.\r\n   * The default is `.country` of the `labels` property\r\n   * which is `\"Country\"` for the default `labels`.\r\n   */\n  countrySelectAriaLabel: _propTypes2.default.string,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptions: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` will likely be forwarded to `<input/>`.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: _propTypes2.default.any,\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: _propTypes2.default.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: _propTypes2.default.string,\n\n  /**\r\n   * Phone number `<input/>` CSS class.\r\n   */\n  inputClassName: _propTypes2.default.string,\n\n  /**\r\n   * Returns phone number `<input/>` CSS class string.\r\n   * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n   * @ignore\r\n   */\n  getInputClassName: _propTypes2.default.func,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name : string?` — HTML `name` attribute.\r\n   * * `value : string?` — The currently selected country code.\r\n   * * `onChange(value : string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n   * * `disabled : boolean?` — HTML `disabled` attribute.\r\n   * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className : string` — CSS class name.\r\n   */\n  //\n  // (deprecated)\n  // * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n  // * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n  //\n  countrySelectComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   */\n  countrySelectProps: _propTypes2.default.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur(event: Event)` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  numberInputComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: _propTypes2.default.object,\n\n  /**\r\n   * Phone number `<input/>` component (a higher-order one).\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n   * * `onChange(value? : string)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n   * * `metadata : object` — `libphonenumber-js` metadata.\r\n   * * `inputComponent : elementType` — Phone number `<input/>` component. This is basically the `numberInputComponent` property renamed to `inputComponent`.\r\n   * * All other properties should be passed through to the underlying `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   *\r\n   * @ignore\r\n   */\n  inputComponent: _propTypes2.default.elementType,\n\n  /**\r\n   * By default, the caret position is being \"intelligently\" managed\r\n   * while a user inputs a phone number.\r\n   * This \"smart\" caret behavior can be turned off\r\n   * by passing `smartCaret={false}` property.\r\n   * This is just an \"escape hatch\" for any possible caret position issues.\r\n   */\n  // Is `true` by default.\n  smartCaret: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * Phone number extension `<input/>` element.\r\n   *\r\n   * Example:\r\n   *\r\n   *\t`ext={<input value={...} onChange={...}/>}`\r\n   */\n  ext: _propTypes2.default.node,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n   */\n  error: _propTypes2.default.string,\n\n  /**\r\n   * The `error` is shown only when `indicateInvalid` is `true`.\r\n   * (which is the default).\r\n   * @deprecated\r\n   * @ignore\r\n   */\n  indicateInvalid: _propTypes2.default.bool,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: _PropTypes.metadata.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: _propTypes2.default.func,\n\n  /**\r\n   * Disables only the phone number `<input/>`.\r\n   *\r\n   * Some users choose to implement a digital keyboard component for phone number input.\r\n   * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\r\n   * At the same time, country select should not be disabled in order for the user to be able to choose their country.\r\n   */\n  // (is `false` by default)\n  // https://github.com/catamphetamine/react-phone-number-input/issues/215\n  disablePhoneInput: _propTypes2.default.bool.isRequired\n}, _class2.defaultProps = {\n  /**\r\n   * Not disabled.\r\n   */\n  disabled: false,\n  disablePhoneInput: false,\n\n  /**\r\n   * Show `error` (if passed).\r\n   * @deprecated\r\n   */\n  indicateInvalid: true,\n\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: _Flag2.default,\n\n  /**\r\n   * By default, use icons from `flag-icon-css` github repo.\r\n   */\n  flagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon (globe).\r\n   */\n  // internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  numberInputComponent: 'input',\n\n  /**\r\n   * Show country `<select/>`.\r\n   */\n  showCountrySelect: true,\n\n  /**\r\n   * Don't convert the initially passed phone number `value`\r\n   * to a national phone number for its country.\r\n   * The reason is that the newer generation grows up when\r\n   * there are no stationary phones and therefore everyone inputs\r\n   * phone numbers with a `+` in their smartphones\r\n   * so phone numbers written in international form\r\n   * are gradually being considered more natural than local ones.\r\n   */\n  displayInitialValueAsLocalNumber: false,\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  international: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false\n}, _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.isCountrySupportedWithError = function (country) {\n    var metadata = _this2.props.metadata;\n    return isCountrySupportedWithError(country, metadata);\n  };\n\n  this.onCountryChange = function (new_country) {\n    var _props3 = _this2.props,\n        metadata = _props3.metadata,\n        onChange = _props3.onChange;\n    var _state2 = _this2.state,\n        old_parsed_input = _state2.parsed_input,\n        old_country = _state2.country; // After the new `country` has been selected,\n    // if the phone number `<input/>` holds any digits\n    // then migrate those digits for the new `country`.\n\n    var new_parsed_input = (0, _inputControl.migrateParsedInputForNewCountry)(old_parsed_input, old_country, new_country, metadata, // Convert the phone number to \"national\" format\n    // when the user changes the selected country by hand.\n    true);\n    var new_value = (0, _inputControl.e164)(new_parsed_input, new_country, metadata); // Focus phone number `<input/>` upon country selection.\n\n    _this2.focus(); // If the user has already manually selected a country\n    // then don't override that already selected country\n    // if the default `country` property changes.\n    // That's what `hasUserSelectedACountry` flag is for.\n\n\n    _this2.setState({\n      country: new_country,\n      hasUserSelectedACountry: true,\n      parsed_input: new_parsed_input,\n      value: new_value\n    }, function () {\n      // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      onChange(new_value);\n    });\n  };\n\n  this.onPhoneNumberKeyDown = function (event) {\n    var onKeyDown = _this2.props.onKeyDown; // Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n    // (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n    // so can't hijack \"Down arrow\" keypress here.\n    // // Expand country `<select/>`` on \"Down arrow\" key press.\n    // if (event.keyCode === 40) {\n    // \tthis.country_select.toggle()\n    // }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  this.onChange = function (_input) {\n    var _props4 = _this2.props,\n        onChange = _props4.onChange,\n        international = _props4.international,\n        limitMaxLength = _props4.limitMaxLength,\n        metadata = _props4.metadata;\n\n    var _parseInput = (0, _inputControl.parseInput)(_input, _this2.state.parsed_input, _this2.state.country, _this2.state.countries, international, limitMaxLength, metadata),\n        input = _parseInput.input,\n        country = _parseInput.country,\n        value = _parseInput.value;\n\n    _this2.setState({\n      parsed_input: input,\n      value: value,\n      country: country\n    }, // Update the new `value` property.\n    // Doing it after the `state` has been updated\n    // because `onChange()` will trigger `getDerivedStateFromProps()`\n    // with the new `value` which will be compared to `state.value` there.\n    function () {\n      return onChange(value);\n    });\n  };\n\n  this._onFocus = function () {\n    return _this2.setState({\n      isFocused: true\n    });\n  };\n\n  this._onBlur = function () {\n    return _this2.setState({\n      isFocused: false\n    });\n  };\n\n  this.onFocus = function (event) {\n    var onFocus = _this2.props.onFocus;\n\n    _this2._onFocus();\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  this.onBlur = function (event) {\n    var onBlur = _this2.props.onBlur;\n    var value = _this2.state.value;\n\n    _this2._onBlur();\n\n    if (!onBlur) {\n      return;\n    } // `event` is React's `SyntheticEvent`.\n    // Its `.value` is read-only therefore cloning it.\n\n\n    var _event = _extends({}, event, {\n      target: _extends({}, event.target, {\n        value: value\n      }) // For `redux-form` event detection.\n      // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n    });\n\n    _event.stopPropagation = event.stopPropagation;\n    _event.preventDefault = event.preventDefault;\n    return onBlur(_event);\n  };\n\n  this.hidePhoneInputField = function (hide) {\n    _this2.setState({\n      hidePhoneInputField: hide\n    });\n  };\n\n  this.focus = function () {\n    return _this2.number_input.focus();\n  };\n\n  this.storeCountrySelectInstance = function (_) {\n    return _this2.country_select = _;\n  };\n\n  this.storePhoneNumberInputInstance = function (_) {\n    return _this2.number_input = _;\n  };\n}, _temp)) || _class; // Generates country `<select/>` options.\n\n\nexports.default = PhoneNumberInput;\n\nfunction generateCountrySelectOptions(countries, countryOptions, props) {\n  var labels = props.labels,\n      international = props.international,\n      metadata = props.metadata;\n  var CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props);\n  return transformCountryOptions((0, _inputControl.getCountrySelectOptions)(countries || (0, _countries2.getCountryCodes)(labels).filter(function (country) {\n    return country === 'ZZ' || isCountrySupported(country, metadata);\n  }), labels, international).map(function (_ref) {\n    var value = _ref.value,\n        label = _ref.label;\n    return {\n      value: value,\n      label: label,\n      icon: CountrySelectOptionIcon\n    };\n  }), countryOptions);\n}\n\nfunction createCountrySelectOptionIconComponent(props) {\n  var flags = props.flags,\n      flagsPath = props.flagsPath,\n      FlagComponent = props.flagComponent,\n      InternationalIcon = props.internationalIcon;\n  return function (_ref2) {\n    var value = _ref2.value;\n    return _react2.default.createElement('div', {\n      className: (0, _classnames2.default)('react-phone-number-input__icon', {\n        'react-phone-number-input__icon--international': value === undefined\n      })\n    }, value ? _react2.default.createElement(FlagComponent, {\n      country: value,\n      flags: flags,\n      flagsPath: flagsPath\n    }) : _react2.default.createElement(InternationalIcon, null));\n  };\n} // Can move some country `<select/>` options\n// to the top of the list, for example.\n// See `countryOptions` property.\n\n\nfunction transformCountryOptions(options, transform) {\n  if (!transform) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  var _loop = function _loop() {\n    if (_isArray) {\n      if (_i >= _iterator.length) return 'break';\n      _ref3 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) return 'break';\n      _ref3 = _i.value;\n    }\n\n    var element = _ref3;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      // Find the position of the option.\n      var index = options.indexOf(options.filter(function (option) {\n        return option.value === element;\n      })[0]); // Get the option.\n\n      var option = options[index]; // Remove the option from its default position.\n\n      options.splice(index, 1); // Add the option on top.\n\n      appendTo.push(option);\n    }\n  };\n\n  for (var _iterator = transform, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref3;\n\n    var _ret = _loop();\n\n    if (_ret === 'break') break;\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\n\nfunction generateParsedInput(value, phoneNumber, props) {\n  var displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber; // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `displayInitialValueAsLocalNumber` property is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n\n  if (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n    return (0, _inputControl.generateNationalNumberDigits)(phoneNumber);\n  }\n\n  return value;\n}\n\nfunction isCountrySupported(country, metadata) {\n  return metadata.countries.hasOwnProperty(country);\n}\n\nfunction isCountrySupportedWithError(country, metadata) {\n  if (isCountrySupported(country, metadata)) {\n    return true;\n  } else {\n    console.error('Country not found: ' + country);\n    return false;\n  }\n}\n\nfunction isCountryOptionSupportedWithError(countryOption, metadata) {\n  switch (countryOption) {\n    case '|':\n    case '...':\n    case '…':\n      return true;\n\n    default:\n      return isCountrySupportedWithError(countryOption, metadata);\n  }\n}\n\nfunction filterCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}\n\nfunction filterCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (countryOption) {\n      return isCountryOptionSupportedWithError(countryOption, metadata);\n    });\n\n    if (countryOptions.length === 0) {\n      countryOptions = undefined;\n    }\n  }\n\n  return countryOptions;\n}\n\nfunction parseExtDigits(event) {\n  if (event) {\n    if (typeof event === 'string') {\n      event = (0, _core.parseDigits)(event);\n    } else if (event.target && event.target.value) {\n      event.target.value = (0, _core.parseDigits)(event.target.value);\n    }\n  }\n\n  return event;\n}","map":{"version":3,"sources":["../source/PhoneInput.js"],"names":["PureComponent","PhoneNumberInput","propTypes","value","onChange","onFocus","onBlur","onKeyDown","disabled","autoComplete","displayInitialValueAsLocalNumber","country","countries","labels","flagsPath","flags","flagComponent","international","internationalIcon","showCountrySelect","countrySelectTabIndex","countrySelectAriaLabel","countryOptions","reset","style","className","inputClassName","getInputClassName","countrySelectComponent","countrySelectProps","numberInputComponent","numberInputProps","inputComponent","smartCaret","ext","limitMaxLength","error","indicateInvalid","metadata","onCountryChange","disablePhoneInput","isRequired","defaultProps","filterCountries","filterCountryOptions","phoneNumber","pre_selected_country","_","props","country_select_options","generateCountrySelectOptions","parsed_input","generateParsedInput","selectedCountry","prevProps","prevState","isCountrySupportedWithError","old_parsed_input","old_country","new_parsed_input","new_value","hasUserSelectedACountry","onPhoneNumberKeyDown","input","_onFocus","isFocused","_onBlur","target","event","_event","hidePhoneInputField","hide","focus","storeCountrySelectInstance","storePhoneNumberInputInstance","state","old_default_country","old_value","old_reset","new_default_country","new_reset","new_state","parsedCountry","name","countrySelectProperties","CountrySelectComponent","_InputComponent","phoneNumberInputProps","InputComponent","_countrySelectProps","invalid","parseExtDigits","CountrySelectOptionIcon","createCountrySelectOptionIconComponent","isCountrySupported","label","icon","FlagComponent","InternationalIcon","undefined","optionsOnTop","optionsOnBottom","appendTo","element","divider","index","option","options","console","isCountryOptionSupportedWithError"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\nimport { parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nimport FlagComponent from './Flag'\r\n\r\nimport\r\n{\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n}\r\nfrom './PropTypes'\r\n\r\nimport\r\n{\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tmigrateParsedInputForNewCountry,\r\n\tgetCountryForPartialE164Number,\r\n\tparseInput,\r\n\te164\r\n}\r\nfrom './input-control'\r\n\r\nimport { getCountryCodes } from './countries'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n@reactLifecyclesCompat\r\nexport default class PhoneNumberInput extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t/**\r\n\t\t * Phone number in `E.164` format.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `\"+12223333333\"`\r\n\t\t */\r\n\t\tvalue : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value` as the user inputs the phone number.\r\n\t\t */\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Toggles the `--focus` CSS class.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonFocus : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * `onBlur` is usually passed by `redux-form`.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonBlur : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * `onKeyDown` handler (e.g. to handle Enter key press).\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonKeyDown : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Disables both the phone number `<input/>`\r\n\t\t * and the country `<select/>`.\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\tdisabled : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t\t *\r\n\t\t * Web browser's \"autocomplete\" feature\r\n\t\t * remembers the phone number being input\r\n\t\t * and can also autofill the `<input/>`\r\n\t\t * with previously remembered phone numbers.\r\n\t\t *\r\n\t\t * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n\t\t *\r\n\t\t * For example, can be used to turn it off:\r\n\t\t *\r\n\t\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t\t *  One example is when you've implemented your own version\r\n\t\t *  of autocomplete for search. Another example is any form field\r\n\t\t *  where users will input and submit different kinds of information\r\n\t\t *  where it would not be useful to have the browser remember\r\n\t\t *  what was submitted previously\".\r\n\t\t */\r\n\t\t// (is `\"tel\"` by default)\r\n\t\tautoComplete : PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to show the initial `value` in\r\n\t\t * \"national\" format rather than \"international\".\r\n\t\t *\r\n\t\t * For example, if this flag is set to `true`\r\n\t\t * and the initial `value=\"+12133734253\"` is passed\r\n\t\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t\t *\r\n\t\t * By default, this flag is set to `false`,\r\n\t\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t\t *\r\n\t\t * The reason for such default behaviour is that\r\n\t\t * the newer generation grows up when there are no stationary phones\r\n\t\t * and therefore everyone inputs phone numbers in international format\r\n\t\t * in their smartphones so people gradually get more accustomed to\r\n\t\t * writing phone numbers in international format rather than in local format.\r\n\t\t * Future people won't be using \"national\" format, only \"international\".\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\tdisplayInitialValueAsLocalNumber : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The country to be selected by default.\r\n\t\t * For example, can be set after a GeoIP lookup.\r\n\t\t *\r\n\t\t * Example: `\"US\"`.\r\n\t\t */\r\n\t\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If specified, only these countries will be available for selection.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t\t */\r\n\t\tcountries : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * Custom country `<select/>` option names.\r\n\t\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t\t *\r\n\t\t * See the `locales` directory for examples.\r\n\t\t */\r\n\t\tlabels : labelsPropType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The base URL path for country flag icons.\r\n\t\t * By default it loads country flag icons from\r\n\t\t * `flag-icon-css` repo github pages website.\r\n\t\t * I imagine someone might want to download\r\n\t\t * those country flag icons and host them\r\n\t\t * on their own servers instead.\r\n\t\t * Warning: in future new countries can be added\r\n\t\t * to the country select which would result in\r\n\t\t * \"Image not found\" errors when using custom `flagsPath`\r\n\t\t * due to the custom-hosted flags bundle being outdated\r\n\t\t * and missing the new flags.\r\n\t\t * So if using custom `flagsPath` always check `CHANGELOG.md`\r\n\t\t * for new country announcements before updating this library.\r\n\t\t */\r\n\t\tflagsPath : PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Custom country flag icon components.\r\n\t\t * These flags replace the default ones.\r\n\t\t *\r\n\t\t * The shape is an object where keys are country codes\r\n\t\t * and values are flag icon components.\r\n\t\t * Flag icon components receive the same properties\r\n\t\t * as `flagComponent` (see below).\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `{ \"RU\": () => <img src=\"...\"/> }`\r\n\t\t *\r\n\t\t * Can be used to replace the default flags\r\n\t\t * with custom ones for certain (or all) countries.\r\n\t\t *\r\n\t\t * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n\t\t *\r\n\t\t * By default flag icons are inserted as `<img/>`s\r\n\t\t * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n\t\t *\r\n\t\t * There might be some cases\r\n\t\t * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n\t\t * when including the full set of `<svg/>` country flags (3 megabytes)\r\n\t\t * is more appropriate than downloading them individually at runtime only if needed.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `// Uses <svg/> flags (3 megabytes):`\r\n\t\t *\r\n\t\t * `import flags from 'react-phone-number-input/flags'`\r\n\t\t *\r\n\t\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t\t *\r\n\t\t * `<PhoneInput flags={flags} .../>`\r\n\t\t */\r\n\t\tflags : PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t\t/**\r\n\t\t * Country flag icon component.\r\n\t\t *\r\n\t\t * Takes properties:\r\n\t\t *\r\n\t\t * * country : string — The country code.\r\n\t\t * * flagsPath : string — The `flagsPath` property (see above).\r\n\t\t * * flags : object — The `flags` property (see above).\r\n\t\t */\r\n\t\tflagComponent : PropTypes.elementType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n\t\t */\r\n\t\tinternational : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Custom \"International\" country `<select/>` option icon.\r\n\t\t */\r\n\t\tinternationalIcon : PropTypes.elementType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to hide country `<select/>`.\r\n\t\t */\r\n\t\t// (is `true` by default)\r\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * HTML `tabindex` attribute for country `<select/>`.\r\n\t\t */\r\n\t\tcountrySelectTabIndex : PropTypes.number,\r\n\r\n\t\t/**\r\n\t\t * HTML `aria-label` attribute for country `<select/>`.\r\n\t\t * The default is `.country` of the `labels` property\r\n\t\t * which is `\"Country\"` for the default `labels`.\r\n\t\t */\r\n\t\tcountrySelectAriaLabel : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t\t *\r\n\t\t * * `\"|\"` — inserts a separator.\r\n\t\t * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t\t */\r\n\t\tcountryOptions : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * Some users requested a way to reset the component:\r\n\t\t * both number `<input/>` and country `<select/>`.\r\n\t\t * Whenever `reset` property changes both number `<input/>`\r\n\t\t * and country `<select/>` are reset.\r\n\t\t * It's not implemented as some instance `.reset()` method\r\n\t\t * because `ref` will likely be forwarded to `<input/>`.\r\n\t\t */\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\t\treset : PropTypes.any,\r\n\r\n\t\t/**\r\n\t\t * `<Phone/>` component CSS style object.\r\n\t\t */\r\n\t\tstyle : PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * `<Phone/>` component CSS class.\r\n\t\t */\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` CSS class.\r\n\t\t */\r\n\t\tinputClassName : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Returns phone number `<input/>` CSS class string.\r\n\t\t * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tgetInputClassName : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Country `<select/>` component.\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `name : string?` — HTML `name` attribute.\r\n\t\t * * `value : string?` — The currently selected country code.\r\n\t\t * * `onChange(value : string?)` — Updates the `value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n\t\t * * `disabled : boolean?` — HTML `disabled` attribute.\r\n\t\t * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n\t\t * * `className : string` — CSS class name.\r\n\t\t */\r\n\t\t//\r\n\t\t// (deprecated)\r\n\t\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\r\n\t\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\r\n\t\t//\r\n\t\tcountrySelectComponent : PropTypes.elementType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Country `<select/>` component props.\r\n\t\t */\r\n\t\tcountrySelectProps: PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component.\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `value: string` — The formatted `value`.\r\n\t\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur(event: Event)` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t\t *\r\n\t\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t\t */\r\n\t\tnumberInputComponent : PropTypes.elementType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component props.\r\n\t\t */\r\n\t\tnumberInputProps: PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component (a higher-order one).\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t * * `onChange(value? : string)` — Updates the `value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n\t\t * * `metadata : object` — `libphonenumber-js` metadata.\r\n\t\t * * `inputComponent : elementType` — Phone number `<input/>` component. This is basically the `numberInputComponent` property renamed to `inputComponent`.\r\n\t\t * * All other properties should be passed through to the underlying `<input/>`.\r\n\t\t *\r\n\t\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t\t *\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tinputComponent : PropTypes.elementType,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Phone number extension `<input/>` element.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t *\t`ext={<input value={...} onChange={...}/>}`\r\n\t\t */\r\n\t\text : PropTypes.node,\r\n\r\n\t\t/**\r\n\t\t * If set to `true` the phone number input will get trimmed\r\n\t\t * if it exceeds the maximum length for the country.\r\n\t\t */\r\n\t\tlimitMaxLength : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n\t\t */\r\n\t\terror : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The `error` is shown only when `indicateInvalid` is `true`.\r\n\t\t * (which is the default).\r\n\t\t * @deprecated\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tindicateInvalid : PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t *\r\n\t\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t\t */\r\n\t\tmetadata : metadataPropType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Is called every time the selected country changes:\r\n\t\t * either programmatically or when user selects it manually from the list.\r\n\t\t */\r\n\t\t// People have been asking for a way to get the selected country.\r\n\t\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t\t// For some it's just a \"business requirement\".\r\n\t\t// I guess it's about gathering as much info on the user as a website can\r\n\t\t// without introducing any addional fields that would complicate the form\r\n\t\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t\t// Assuming that the phone number's country is the user's country\r\n\t\t// is not 100% correct but in most cases I guess it's valid.\r\n\t\tonCountryChange : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Disables only the phone number `<input/>`.\r\n\t\t *\r\n\t\t * Some users choose to implement a digital keyboard component for phone number input.\r\n\t\t * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\r\n\t\t * At the same time, country select should not be disabled in order for the user to be able to choose their country.\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/215\r\n\t\tdisablePhoneInput : PropTypes.bool.isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t/**\r\n\t\t * Not disabled.\r\n\t\t */\r\n\t\tdisabled: false,\r\n\t\tdisablePhoneInput: false,\r\n\r\n\t\t/**\r\n\t\t * Show `error` (if passed).\r\n\t\t * @deprecated\r\n\t\t */\r\n\t\tindicateInvalid : true,\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Flag icon component.\r\n\t\t */\r\n\t\tflagComponent: FlagComponent,\r\n\r\n\t\t/**\r\n\t\t * By default, use icons from `flag-icon-css` github repo.\r\n\t\t */\r\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\r\n\r\n\t\t/**\r\n\t\t * Default \"International\" country `<select/>` option icon (globe).\r\n\t\t */\r\n\t\t // internationalIcon: InternationalIcon,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component.\r\n\t\t */\r\n\t\tnumberInputComponent: 'input',\r\n\r\n\t\t/**\r\n\t\t * Show country `<select/>`.\r\n\t\t */\r\n\t\tshowCountrySelect: true,\r\n\r\n\t\t/**\r\n\t\t * Don't convert the initially passed phone number `value`\r\n\t\t * to a national phone number for its country.\r\n\t\t * The reason is that the newer generation grows up when\r\n\t\t * there are no stationary phones and therefore everyone inputs\r\n\t\t * phone numbers with a `+` in their smartphones\r\n\t\t * so phone numbers written in international form\r\n\t\t * are gradually being considered more natural than local ones.\r\n\t\t */\r\n\t\tdisplayInitialValueAsLocalNumber: false,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t\t */\r\n\t\tsmartCaret : true,\r\n\r\n\t\t/**\r\n\t\t * Whether to add the \"International\" option\r\n\t\t * to the list of countries.\r\n\t\t */\r\n\t\tinternational : true,\r\n\r\n\t\t/**\r\n\t\t * If set to `true` the phone number input will get trimmed\r\n\t\t * if it exceeds the maximum length for the country.\r\n\t\t */\r\n\t\tlimitMaxLength : false\r\n\t}\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `country`.\r\n\t\tif (country) {\r\n\t\t\tif (!this.isCountrySupportedWithError(country)) {\r\n\t\t\t\tcountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = filterCountries(countries, metadata)\r\n\r\n\t\t// Validate `countryOptions`.\r\n\t\tcountryOptions = filterCountryOptions(countryOptions, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tconst pre_selected_country = getPreSelectedCountry(\r\n\t\t\tphoneNumber,\r\n\t\t\tcountry,\r\n\t\t\tcountries || getCountryCodes(labels).filter(_ => _ === 'ZZ' || metadata.countries[_]),\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tthis.state =\r\n\t\t{\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops : this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry : pre_selected_country,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// Generate country `<select/>` options.\r\n\t\t\tcountry_select_options : generateCountrySelectOptions(countries, countryOptions, this.props),\r\n\r\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\r\n\t\t\tparsed_input : generateParsedInput(value, phoneNumber, this.props),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `parsed_input` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `parsed_input` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { country } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (!country || !this.isCountrySupportedWithError(country)) {\r\n\t\t\t\tcountry = undefined\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== country) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange, onChange, reset } = this.props\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && this.state.country !== prevState.country) {\r\n\t\t\tonCountryChange(this.state.country)\r\n\t\t}\r\n\t\t// Some users requested a way to reset the component\r\n\t\t// (both number `<input/>` and country `<select/>`).\r\n\t\t// Whenever `reset` property changes both number `<input/>`\r\n\t\t// and country `<select/>` are reset.\r\n\t\t// It's not implemented as some instance `.reset()` method\r\n\t\t// because `ref` will likely be forwarded to `<input/>`\r\n\t\t// in some next major version.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\t\tif (reset !== prevProps.reset) {\r\n\t\t\tonChange()\r\n\t\t\tif (onCountryChange) {\r\n\t\t\t\tonCountryChange(this.state.country)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (new_country) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmetadata,\r\n\t\t\tonChange\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparsed_input : old_parsed_input,\r\n\t\t\tcountry      : old_country\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst new_parsed_input = migrateParsedInputForNewCountry\r\n\t\t(\r\n\t\t\told_parsed_input,\r\n\t\t\told_country,\r\n\t\t\tnew_country,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\ttrue\r\n\t\t)\r\n\r\n\t\tconst new_value = e164(new_parsed_input, new_country, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tthis.focus()\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the default `country` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tcountry : new_country,\r\n\t\t\thasUserSelectedACountry : true,\r\n\t\t\tparsed_input : new_parsed_input,\r\n\t\t\tvalue : new_value\r\n\t\t},\r\n\t\t() =>\r\n\t\t{\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(new_value)\r\n\t\t})\r\n\t}\r\n\r\n\t// Phone number `<input/>` `onKeyDown` handler.\r\n\tonPhoneNumberKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onKeyDown } = this.props\r\n\r\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\r\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\r\n\t\t// so can't hijack \"Down arrow\" keypress here.\r\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\r\n\t\t// if (event.keyCode === 40) {\r\n\t\t// \tthis.country_select.toggle()\r\n\t\t// }\r\n\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_input) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonChange,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tinput,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t}\r\n\t\t= parseInput\r\n\t\t(\r\n\t\t\t_input,\r\n\t\t\tthis.state.parsed_input,\r\n\t\t\tthis.state.country,\r\n\t\t\tthis.state.countries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tparsed_input: input,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t},\r\n\t\t// Update the new `value` property.\r\n\t\t// Doing it after the `state` has been updated\r\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t() => onChange(value))\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tconst { onFocus } = this.props\r\n\t\tthis._onFocus()\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\t// This `onBlur` interceptor is a workaround for `redux-form`\r\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\r\n\t// Without this fix it just gets the actual (raw) input field textual value.\r\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\r\n\t//\r\n\t// A developer is not supposed to pass this `onBlur` property manually.\r\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\r\n\t// and this component patches that `onBlur` handler (a hacky way but works).\r\n\t//\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { onBlur } = this.props\r\n\t\tconst { value } = this.state\r\n\r\n\t\tthis._onBlur()\r\n\r\n\t\tif (!onBlur) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// `event` is React's `SyntheticEvent`.\r\n\t\t// Its `.value` is read-only therefore cloning it.\r\n\t\tconst _event = {\r\n\t\t\t...event,\r\n\t\t\ttarget: {\r\n\t\t\t\t...event.target,\r\n\t\t\t\tvalue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// For `redux-form` event detection.\r\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t_event.preventDefault  = event.preventDefault\r\n\r\n\t\treturn onBlur(_event)\r\n\t}\r\n\r\n\t// When country `<select/>` is toggled.\r\n\thidePhoneInputField = (hide) => {\r\n\t\tthis.setState({\r\n\t\t\thidePhoneInputField: hide\r\n\t\t})\r\n\t}\r\n\r\n\t// Can be called externally.\r\n\tfocus = () => this.number_input.focus()\r\n\r\n\tstoreCountrySelectInstance = _ => this.country_select = _\r\n\r\n\tstorePhoneNumberInputInstance = _ => this.number_input = _\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\thasUserSelectedACountry,\r\n\t\t\tvalue,\r\n\t\t\tprops: {\r\n\t\t\t\tcountry : old_default_country,\r\n\t\t\t\tvalue   : old_value,\r\n\t\t\t\treset   : old_reset\r\n\t\t\t}\r\n\t\t} = state\r\n\r\n\t\tconst {\r\n\t\t\tmetadata,\r\n\t\t\tcountries,\r\n\t\t\tcountry : new_default_country,\r\n\t\t\tvalue   : new_value,\r\n\t\t\treset   : new_reset\r\n\t\t} = props\r\n\r\n\t\tconst new_state = {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t// If the user has already manually selected a country\r\n\t\t\t// then don't override that already selected country\r\n\t\t\t// if the default `country` property changes.\r\n\t\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\t\thasUserSelectedACountry\r\n\t\t}\r\n\r\n\t\t// If `countries` or `labels` or `international` changed\r\n\t\t// then re-generate country `<select/>` options.\r\n\t\tif (props.countries !== state.props.countries ||\r\n\t\t\tprops.labels !== state.props.labels ||\r\n\t\t\tprops.international !== state.props.international) {\r\n\t\t\t// Re-generate country select options.\r\n\t\t\tnew_state.country_select_options = generateCountrySelectOptions(\r\n\t\t\t\tfilterCountries(props.countries, metadata),\r\n\t\t\t\tfilterCountryOptions(props.countryOptions, metadata),\r\n\t\t\t\tprops\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\t// Some users requested a way to reset the component\r\n\t\t// (both number `<input/>` and country `<select/>`).\r\n\t\t// Whenever `reset` property changes both number `<input/>`\r\n\t\t// and country `<select/>` are reset.\r\n\t\t// It's not implemented as some instance `.reset()` method\r\n\t\t// because `ref` will likely be forwarded to `<input/>`.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\t\tif (new_reset !== old_reset) {\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tparsed_input: undefined,\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tcountry: new_default_country\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the default country changed.\r\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t\t// then select it but only if the user hasn't already manually\r\n\t\t// selected a country and no phone number has been entered so far.\r\n\t\t// Because if the user has already started inputting a phone number\r\n\t\t// then he's okay with no country being selected at all (\"International\")\r\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\r\n\t\tif (new_default_country !== old_default_country &&\r\n\t\t\t!hasUserSelectedACountry && !value && !new_value) {\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tcountry: isCountrySupportedWithError(new_default_country, metadata) ? new_default_country : old_default_country\r\n\t\t\t\t// `value` is `undefined`.\r\n\t\t\t\t// `parsed_input` is `undefined` because `value` is `undefined`.\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If a new `value` is set externally.\r\n\t\t// (e.g. as a result of an ajax API request\r\n\t\t//  to get user's phone after page loaded)\r\n\t\t// The first part — `new_value !== old_value` —\r\n\t\t// is basically `props.value !== prevProps.value`\r\n\t\t// so it means \"if value property was changed externally\".\r\n\t\t// The second part — `new_value !== value` —\r\n\t\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t\t// then the country flag would reset on each input.\r\n\t\telse if (new_value !== old_value && new_value !== value) {\r\n\t\t\tconst phoneNumber = parsePhoneNumber(new_value, metadata)\r\n\t\t\tlet parsedCountry\r\n\t\t\tif (phoneNumber) {\r\n\t\t\t\tconst countries = filterCountries(props.countries, metadata)\r\n\t\t\t\tif (!countries || countries.indexOf(phoneNumber.country) >= 0) {\r\n\t\t\t\t\tparsedCountry = phoneNumber.country\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tparsed_input : generateParsedInput(new_value, phoneNumber, props),\r\n\t\t\t\tvalue : new_value,\r\n\t\t\t\tcountry : new_value ? parsedCountry : country\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// `country` didn't change.\r\n\t\t// `value` didn't change.\r\n\t\t// `parsed_input` didn't change, because `value` didn't change.\r\n\t\t//\r\n\t\t// Maybe `new_state.country_select_options` changed.\r\n\t\t// In any case, update `prevProps`.\r\n\t\treturn new_state\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\tdisablePhoneInput,\r\n\t\t\tautoComplete,\r\n\t\t\tcountrySelectTabIndex,\r\n\t\t\tshowCountrySelect,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tinputClassName,\r\n\t\t\tgetInputClassName,\r\n\t\t\tcountrySelectAriaLabel,\r\n\t\t\tcountrySelectProperties,\r\n\r\n\t\t\terror,\r\n\t\t\tindicateInvalid,\r\n\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\t\t\tinputComponent: _InputComponent,\r\n\t\t\tnumberInputComponent: inputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\t\t\text,\r\n\r\n\t\t\t// Extract `phoneNumberInputProps` via \"object rest spread\":\r\n\t\t\tcountry : _,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagsPath,\r\n\t\t\tinternational,\r\n\t\t\tinternationalIcon,\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata,\r\n\t\t\t...phoneNumberInputProps\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tcountry,\r\n\t\t\thidePhoneInputField,\r\n\t\t\tcountry_select_options,\r\n\t\t\tparsed_input,\r\n\t\t\tisFocused\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\tlet InputComponent = _InputComponent || (smartCaret ? InputSmart : InputBasic)\r\n\r\n\t\t// Extract `countrySelectProperties` from `this.props`\r\n\t\t// also removing them from `phoneNumberInputProps`.\r\n\t\tconst _countrySelectProps = {}\r\n\t\tif (countrySelectProperties)\r\n\t\t{\r\n\t\t\tfor (const key in countrySelectProperties)\r\n\t\t\t{\r\n\t\t\t\tif (this.props.hasOwnProperty(key))\r\n\t\t\t\t{\r\n\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key]\r\n\t\t\t\t\tdelete phoneNumberInputProps[key]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Could use something like `aria-label={labels.phone}` on the `<InputComponent/>`,\r\n\t\t// however, some users may have already been using this component with one of:\r\n\t\t// * `<label/>` container\r\n\t\t// * `aria-labelledby`\r\n\t\t// * `id` and `<label for/>`\r\n\t\t// https://developers.google.com/web/fundamentals/accessibility/semantics-aria/aria-labels-and-relationships\r\n\t\t// Maybe in some future major version update.\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames('react-phone-number-input',\r\n\t\t\t\t{\r\n\t\t\t\t\t'react-phone-number-input--focus'   : isFocused,\r\n\t\t\t\t\t'react-phone-number-input--invalid' : error && indicateInvalid\r\n\t\t\t\t},\r\n\t\t\t\tclassName) }>\r\n\r\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\r\n\t\t\t\t<div className=\"react-phone-number-input__row\">\r\n\r\n\t\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t\t{ showCountrySelect &&\r\n\t\t\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\t\t\t{..._countrySelectProps}\r\n\t\t\t\t\t\t\tref={ this.storeCountrySelectInstance }\r\n\t\t\t\t\t\t\tname={ name ? `${name}__country` : undefined }\r\n\t\t\t\t\t\t\taria-label={ countrySelectAriaLabel || labels.country }\r\n\t\t\t\t\t\t\ttabIndex={ countrySelectTabIndex }\r\n\t\t\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\t\t\tvalue={ country }\r\n\t\t\t\t\t\t\toptions={ country_select_options }\r\n\t\t\t\t\t\t\tonChange={ this.onCountryChange }\r\n\t\t\t\t\t\t\tonFocus={ this._onFocus }\r\n\t\t\t\t\t\t\tonBlur={ this._onBlur }\r\n\t\t\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\t\t\thidePhoneInputField={ this.hidePhoneInputField }\r\n\t\t\t\t\t\t\tfocusPhoneInputField={ this.focus }\r\n\t\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t\t{ !hidePhoneInputField &&\r\n\t\t\t\t\t\t<InputComponent\r\n\t\t\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\r\n\t\t\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t\t\t{...phoneNumberInputProps}\r\n\t\t\t\t\t\t\tref={ this.storePhoneNumberInputInstance }\r\n\t\t\t\t\t\t\tname={ name }\r\n\t\t\t\t\t\t\tmetadata={ metadata }\r\n\t\t\t\t\t\t\tcountry={ country }\r\n\t\t\t\t\t\t\tvalue={ parsed_input || '' }\r\n\t\t\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\t\t\tonFocus={ this.onFocus }\r\n\t\t\t\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\t\t\t\tonKeyDown={ this.onPhoneNumberKeyDown }\r\n\t\t\t\t\t\t\tdisabled={ disabled || disablePhoneInput }\r\n\t\t\t\t\t\t\tinputComponent={ inputComponent }\r\n\t\t\t\t\t\t\tclassName={ classNames\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled || disablePhoneInput,\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--invalid'  : error && indicateInvalid\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({\r\n\t\t\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput,\r\n\t\t\t\t\t\t\t\t\tinvalid: error && indicateInvalid\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t) }/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone extension `<input/>` */}\r\n\t\t\t\t\t{ ext && !hidePhoneInputField &&\r\n\t\t\t\t\t\t<label className=\"react-phone-number-input__ext\">\r\n\t\t\t\t\t\t\t{labels.ext}\r\n\t\t\t\t\t\t\t{React.cloneElement(ext,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tonChange : ext.props.onChange ? (event) => ext.props.onChange(parseExtDigits(event)) : undefined,\r\n\t\t\t\t\t\t\t\tonFocus : this._onFocus,\r\n\t\t\t\t\t\t\t\tonBlur : this._onBlur,\r\n\t\t\t\t\t\t\t\tclassName : classNames\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__ext-input',\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled || disablePhoneInput,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({\r\n\t\t\t\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\text.props.className\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ error && indicateInvalid &&\r\n\t\t\t\t\t<div className=\"react-phone-number-input__error\">\r\n\t\t\t\t\t\t{ error }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// Generates country `<select/>` options.\r\nfunction generateCountrySelectOptions(countries, countryOptions, props) {\r\n\tconst {\r\n\t\tlabels,\r\n\t\tinternational,\r\n\t\tmetadata\r\n\t} = props\r\n\r\n\tconst CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props)\r\n\r\n\treturn transformCountryOptions(\r\n\t\tgetCountrySelectOptions(\r\n\t\t\tcountries || getCountryCodes(labels).filter(country => country === 'ZZ' || isCountrySupported(country, metadata)),\r\n\t\t\tlabels,\r\n\t\t\tinternational\r\n\t\t).map(({ value, label }) => ({\r\n\t\t\tvalue,\r\n\t\t\tlabel,\r\n\t\t\ticon: CountrySelectOptionIcon\r\n\t\t})),\r\n\t\tcountryOptions\r\n\t)\r\n}\r\n\r\nfunction createCountrySelectOptionIconComponent(props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tflags,\r\n\t\tflagsPath,\r\n\t\tflagComponent : FlagComponent,\r\n\t\tinternationalIcon : InternationalIcon\r\n\t}\r\n\t= props\r\n\r\n\treturn ({ value }) => (\r\n\t\t<div\r\n\t\t\tclassName={classNames('react-phone-number-input__icon',\r\n\t\t\t{\r\n\t\t\t\t'react-phone-number-input__icon--international': value === undefined\r\n\t\t\t})}>\r\n\t\t\t{\r\n\t\t\t\tvalue\r\n\t\t\t\t?\r\n\t\t\t\t<FlagComponent\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tflags={flags}\r\n\t\t\t\t\tflagsPath={flagsPath}/>\r\n\t\t\t\t:\r\n\t\t\t\t<InternationalIcon/>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// Can move some country `<select/>` options\r\n// to the top of the list, for example.\r\n// See `countryOptions` property.\r\nfunction transformCountryOptions(options, transform)\r\n{\r\n\tif (!transform) {\r\n\t\treturn options\r\n\t}\r\n\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\r\n\tfor (const element of transform)\r\n\t{\r\n\t\tif (element === '|')\r\n\t\t{\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t}\r\n\t\telse if (element === '...' || element === '…')\r\n\t\t{\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === element)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nfunction generateParsedInput(value, phoneNumber, props)\r\n{\r\n\tconst { displayInitialValueAsLocalNumber } = props\r\n\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `displayInitialValueAsLocalNumber` property is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\r\n\treturn value\r\n}\r\n\r\nfunction isCountrySupported(country, metadata) {\r\n\treturn metadata.countries.hasOwnProperty(country)\r\n}\r\n\r\nfunction isCountrySupportedWithError(country, metadata) {\r\n\tif (isCountrySupported(country, metadata)) {\r\n\t\treturn true\r\n\t} else {\r\n\t\tconsole.error(`Country not found: ${country}`)\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nfunction isCountryOptionSupportedWithError(countryOption, metadata) {\r\n\tswitch (countryOption) {\r\n\t\tcase '|':\r\n\t\tcase '...':\r\n\t\tcase '…':\r\n\t\t\treturn true\r\n\t\tdefault:\r\n\t\t\treturn isCountrySupportedWithError(countryOption, metadata)\r\n\t}\r\n}\r\n\r\nfunction filterCountries(countries, metadata) {\r\n\tif (countries) {\r\n\t\tcountries = countries.filter(country => isCountrySupportedWithError(country, metadata))\r\n\t\tif (countries.length === 0) {\r\n\t\t\tcountries = undefined\r\n\t\t}\r\n\t}\r\n\treturn countries\r\n}\r\n\r\nfunction filterCountryOptions(countryOptions, metadata) {\r\n\tif (countryOptions) {\r\n\t\tcountryOptions = countryOptions.filter(countryOption => isCountryOptionSupportedWithError(countryOption, metadata))\r\n\t\tif (countryOptions.length === 0) {\r\n\t\t\tcountryOptions = undefined\r\n\t\t}\r\n\t}\r\n\treturn countryOptions\r\n}\r\n\r\nfunction parseExtDigits(event) {\r\n\tif (event) {\r\n\t\tif (typeof event === 'string') {\r\n\t\t\tevent = parseDigits(event)\r\n\t\t} else if (event.target && event.target.value) {\r\n\t\t\tevent.target.value = parseDigits(event.target.value)\r\n\t\t}\r\n\t}\r\n\treturn event\r\n}"]},"metadata":{},"sourceType":"script"}
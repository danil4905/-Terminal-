{"ast":null,"code":"import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport function getIDDPrefix(country, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.country(country);\n\n  if (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n\n  return countryMetadata.defaultIDDPrefix();\n}\nexport function stripIDDPrefix(number, country, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.country(country);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // Some kind of a weird edge case.\n  // No explanation from Google given.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n  /* istanbul ignore next */\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}","map":{"version":3,"sources":["../source/IDD.js"],"names":["CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","countryMetadata","IDDPrefixPattern","number","matchedGroups"],"mappings":"AAAA,OAAA,QAAA,MAAA,YAAA;AACA,SAAA,YAAA,QAAA,aAAA;AAEA,IAAMA,uBAAAA,GAA0B,IAAA,MAAA,CAAW,OAAA,YAAA,GAA3C,IAAgC,CAAhC;AAEA;;;;;;;;;;AASA,IAAMC,iBAAAA,GAAN,wCAAA,C,CAEA;AACA;;AACA,OAAO,SAAA,YAAA,CAAA,OAAA,EAAA,QAAA,EACP;AACC,MAAMC,eAAAA,GAAkB,IAAA,QAAA,CAAxB,QAAwB,CAAxB;AACAA,EAAAA,eAAAA,CAAAA,OAAAA,CAAAA,OAAAA;;AAEA,MAAID,iBAAAA,CAAAA,IAAAA,CAAuBC,eAAAA,CAA3B,SAA2BA,EAAvBD,CAAJ,EACA;AACC,WAAOC,eAAAA,CAAP,SAAOA,EAAP;AACA;;AAED,SAAOA,eAAAA,CAAP,gBAAOA,EAAP;AACA;AAED,OAAO,SAAA,cAAA,CAAA,MAAA,EAAA,OAAA,EAAA,QAAA,EACP;AACC,MAAI,CAAJ,OAAA,EAAc;AACb;AACA,GAHF,CAKC;;;AAEA,MAAMA,eAAAA,GAAkB,IAAA,QAAA,CAAxB,QAAwB,CAAxB;AACAA,EAAAA,eAAAA,CAAAA,OAAAA,CAAAA,OAAAA;AAEA,MAAMC,gBAAAA,GAAmB,IAAA,MAAA,CAAWD,eAAAA,CAApC,SAAoCA,EAAX,CAAzB;;AAEA,MAAIE,MAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,MAAJ,CAAA,EAA2C;AAC1C;AACA,GAdF,CAgBC;;;AACAA,EAAAA,MAAAA,GAASA,MAAAA,CAAAA,KAAAA,CAAaA,MAAAA,CAAAA,KAAAA,CAAAA,gBAAAA,EAAAA,CAAAA,EAAtBA,MAASA,CAATA,CAjBD,CAmBC;AACA;;AACA,MAAMC,aAAAA,GAAgBD,MAAAA,CAAAA,KAAAA,CAAtB,uBAAsBA,CAAtB;AACA;;AACA,MAAIC,aAAAA,IAAiBA,aAAAA,CAAAA,CAAAA,CAAAA,IAAjBA,IAAAA,IAA6CA,aAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAjD,CAAA,EACA;AACC,QAAIA,aAAAA,CAAAA,CAAAA,CAAAA,KAAJ,GAAA,EACA;AACC;AACA;AACD;;AAED,SAAA,MAAA;AACA","sourcesContent":["import Metadata from './metadata'\r\nimport { VALID_DIGITS } from './constants'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport function getIDDPrefix(country, metadata)\r\n{\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix()))\r\n\t{\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n\r\n\treturn countryMetadata.defaultIDDPrefix()\r\n}\r\n\r\nexport function stripIDDPrefix(number, country, metadata)\r\n{\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Check if the number is IDD-prefixed.\r\n\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\r\n\t// Some kind of a weird edge case.\r\n\t// No explanation from Google given.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\t/* istanbul ignore next */\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0)\r\n\t{\r\n\t\tif (matchedGroups[1] === '0')\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\treturn number\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var regular_expression = arguments[1];\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\n\nexport function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b)\n  // {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}","map":{"version":3,"sources":["../source/util.js"],"names":["text","regular_expression","merged","a","element"],"mappings":"AAAA;AACA;AACA,OAAO,SAAA,eAAA,GAAwD;AAAA,MAA/BA,IAA+B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAxB,EAAwB;AAAA,MAApBC,kBAAoB,GAAA,SAAA,CAAA,CAAA,CAAA;AAC9D,SAAO,IAAA,MAAA,CAAW,SAAA,kBAAA,GAAX,IAAA,EAAA,IAAA,CAAP,IAAO,CAAP;AACA;AAED;;;;;;;AAMA,OAAO,SAAA,WAAA,CAAA,CAAA,EAAA,CAAA,EAA2B;AACjC,MAAMC,MAAAA,GAASC,CAAAA,CAAf,KAAeA,EAAf;;AAEA,OAAA,IAAA,SAAA,GAAA,CAAA,EAAA,QAAA,GAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IAAyB;AAAA,QAAA,IAAA;;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,EAAA,IAAA,SAAA,CAAA,MAAA,EAAA;AAAA,MAAA,IAAA,GAAA,SAAA,CAAA,EAAA,EAAA,CAAA;AAAA,KAAA,MAAA;AAAA,MAAA,EAAA,GAAA,SAAA,CAAA,IAAA,EAAA;AAAA,UAAA,EAAA,CAAA,IAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA,CAAA,KAAA;AAAA;;AAAA,QAAdC,OAAc,GAAA,IAAA;;AACxB,QAAID,CAAAA,CAAAA,OAAAA,CAAAA,OAAAA,IAAJ,CAAA,EAA4B;AAC3BD,MAAAA,MAAAA,CAAAA,IAAAA,CAAAA,OAAAA;AACA;AACD;;AAED,SAAO,MAAA,CAAA,IAAA,CAAY,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,WAAUC,CAAAA,GAAV,CAAA;AAAnB,GAAO,CAAP,CATiC,CAWjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// Checks whether the entire input sequence can be matched\r\n// against the regular expression.\r\nexport function matchesEntirely(text = '', regular_expression) {\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}\r\n\r\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b)\r\n\t// {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}"]},"metadata":{},"sourceType":"module"}
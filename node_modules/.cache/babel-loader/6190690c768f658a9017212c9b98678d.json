{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListItem = exports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2, _class2, _temp4;\n\nexports.findItemIndexByValue = findItemIndexByValue;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _Divider = require('./Divider');\n\nvar _Divider2 = _interopRequireDefault(_Divider);\n\nvar _dom = require('./utility/dom');\n\nvar _focus = require('./utility/focus');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\nvar List = (_temp2 = _class = function (_PureComponent) {\n  _inherits(List, _PureComponent);\n\n  function List() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = List.__proto__ || Object.getPrototypeOf(List)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      items: _this.props.items // `ref`s of all items currently rendered.\n\n    }, _this.itemRefs = [], _this.input = '', _this.getFocusedItemIndex = function () {\n      return _this.state.focusedItemIndex;\n    }, _this.clearFocus = function () {\n      return _this.focusItem();\n    }, _this.unfocus = _this.clearFocus, _this.focus = function () {\n      var focusedItemIndex = _this.state.focusedItemIndex;\n\n      if (focusedItemIndex !== undefined) {\n        return _this.focusItem(focusedItemIndex);\n      }\n\n      _this.list.focus();\n    }, _this.focusItem = function (focusedItemIndex) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _this$props = _this.props,\n          onFocusItem = _this$props.onFocusItem,\n          shouldFocus = _this$props.shouldFocus;\n\n      if (onFocusItem) {\n        onFocusItem(focusedItemIndex, options);\n      }\n\n      _this.setState({\n        // Focus the item.\n        focusedItemIndex: focusedItemIndex,\n        // Store the focused item value.\n        // This is used for cases like autocomplete\n        // where the list of options changes but\n        // the focused option stays focused.\n        focusedItemValue: focusedItemIndex === undefined ? undefined : _this.getItemValue(focusedItemIndex)\n      }, function () {\n        // Actually focus the item.\n        if (focusedItemIndex !== undefined) {\n          if (shouldFocus && _this._isMounted) {\n            if (!(0, _focus.focus)(_this.itemRefs[focusedItemIndex])) {\n              console.error('<List.Item/> #' + (focusedItemIndex + 1) + '\\'s child component doesn\\'t have a \".focus()\" method.');\n            }\n          }\n        }\n      });\n    }, _this.onKeyDown = function (event) {\n      var _this$props2 = _this.props,\n          onKeyDown = _this$props2.onKeyDown,\n          children = _this$props2.children;\n      var focusedItemIndex = _this.state.focusedItemIndex;\n\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if ((0, _dom.submitFormOnCtrlEnter)(event, _this.input)) {\n        return;\n      }\n\n      if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n        return;\n      }\n\n      if (_react2.default.Children.count(children) > 0) {\n        switch (event.keyCode) {\n          // \"Up\" arrow.\n          // Select the previous item (if present).\n          case 38:\n            event.preventDefault();\n\n            var previousIndex = _this.getPreviousFocusableItemIndex();\n\n            if (previousIndex !== undefined) {\n              _this.focusItem(previousIndex, {\n                interaction: true\n              });\n            }\n\n            return;\n          // \"Down\" arrow.\n          // Select the next item (if present).\n\n          case 40:\n            event.preventDefault();\n\n            var nextIndex = _this.getNextFocusableItemIndex();\n\n            if (nextIndex !== undefined) {\n              _this.focusItem(nextIndex, {\n                interaction: true\n              });\n            }\n\n            return;\n        }\n      }\n    }, _this.onKeyPress = function (event) {\n      var resetInputTimeout = _this.props.resetInputTimeout;\n      var characters = event.char || String.fromCharCode(event.charCode);\n\n      if (characters) {\n        _this.input += characters;\n\n        _this.onInput();\n\n        clearTimeout(_this.resetInputTimer);\n        _this.resetInputTimer = setTimeout(_this.resetInput, resetInputTimeout);\n      }\n    }, _this.resetInput = function () {\n      return _this.input = '';\n    }, _this.isInputInProgress = function () {\n      return _this.input !== '';\n    }, _this.onInputSpacebar = function () {\n      if (_this.input) {\n        _this.input += ' ';\n      }\n    }, _this.onItemFocus = function (event) {\n      var expandable = _this.props.expandable;\n\n      if (expandable) {\n        return;\n      }\n\n      _this.onFocusIn();\n    }, _this.onBlur = function (event) {\n      var expandable = _this.props.expandable;\n\n      if (expandable) {\n        return;\n      }\n\n      clearTimeout(_this.blurTimer);\n      var result = (0, _focus.onBlur)(event, _this.onFocusOut, function () {\n        return _this.list;\n      });\n\n      if (typeof result === 'number') {\n        _this.blurTimer = result;\n      }\n    }, _this.onFocusIn = function () {\n      var onFocusIn = _this.props.onFocusIn;\n\n      if (onFocusIn) {\n        onFocusIn();\n      }\n\n      _this.setState({\n        isFocused: true\n      });\n    }, _this.onFocusOut = function () {\n      var value = _this.props.value;\n\n      if (value === undefined) {\n        _this.clearFocus();\n      }\n\n      _this.setState({\n        isFocused: false\n      });\n    }, _this.isFocusableItemIndex = function (index) {\n      return _this.itemRefs[index] !== undefined;\n    }, _this.isFocusableItem = function (item) {\n      return !isDivider(item);\n    }, _this.storeListNode = function (node) {\n      return _this.list = node;\n    }, _this.getDOMNode = function () {\n      return _this.list;\n    }, _this.storeItemRef = function (ref, i) {\n      return _this.itemRefs[i] = ref;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // For select options list keyboard navigation via typing.\n\n\n  _createClass(List, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var highlightFirstItem = this.props.highlightFirstItem;\n\n      if (highlightFirstItem) {\n        this.focusItem(0);\n      }\n\n      this._isMounted = true;\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _props = this.props,\n          value = _props.value,\n          items = _props.items,\n          children = _props.children,\n          highlightSelectedItem = _props.highlightSelectedItem,\n          highlightFirstItem = _props.highlightFirstItem; // If `items` property is supplied\n      // then it's used to detect \"on items changed\" event.\n\n      if (prevState.items && prevState.items !== items) {\n        this.setState({\n          items: items\n        }); // `findItemIndexByValue()` must return `undefined` for \"no such item\".\n\n        var selectedItemIndex = highlightSelectedItem ? findItemIndexByValue(value, children) : undefined;\n        this.focusItem(selectedItemIndex === undefined ? highlightFirstItem ? 0 : undefined : selectedItemIndex);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      clearTimeout(this.blurTimer);\n      clearTimeout(this.resetInputTimer);\n    }\n  }, {\n    key: 'chooseFocusedItem',\n    value: function chooseFocusedItem() {\n      var focusedItemIndex = this.state.focusedItemIndex;\n\n      if (focusedItemIndex !== undefined) {\n        var itemRef = this.itemRefs[focusedItemIndex];\n\n        if (itemRef.click) {\n          itemRef.click();\n        }\n      }\n    } // Deprecated method name.\n    // Focuses the list.\n\n  }, {\n    key: 'getFirstFocusableItemIndex',\n    value: function getFirstFocusableItemIndex() {\n      var i = 0;\n\n      while (i < this.itemRefs.length) {\n        if (this.itemRefs[i]) {\n          return i;\n        }\n      }\n    }\n  }, {\n    key: 'getItemValue',\n    value: function getItemValue(index) {\n      var children = this.props.children;\n\n      var item = _react2.default.Children.toArray(children)[index];\n\n      return item.props.value;\n    } // Can be public API for programmatically focusing a certain `<List.Item/>`.\n\n  }, {\n    key: 'onInput',\n    value: function onInput() {\n      var children = this.props.children;\n      var index = findItemIndexByLabel(this.input, children);\n\n      if (index !== undefined) {\n        this.focusItem(index);\n      }\n    }\n  }, {\n    key: 'getPreviousFocusableItemIndex',\n    // Get the previous option (relative to the currently focused option)\n    value: function getPreviousFocusableItemIndex() {\n      var children = this.props.children;\n      var focusedItemIndex = this.state.focusedItemIndex;\n\n      if (focusedItemIndex === undefined) {\n        focusedItemIndex = _react2.default.Children.count(children);\n      }\n\n      while (focusedItemIndex > 0) {\n        focusedItemIndex--;\n\n        if (this.isFocusableItemIndex(focusedItemIndex)) {\n          return focusedItemIndex;\n        }\n      }\n    } // Get the next option (relative to the currently focused option)\n\n  }, {\n    key: 'getNextFocusableItemIndex',\n    value: function getNextFocusableItemIndex() {\n      var children = this.props.children;\n      var focusedItemIndex = this.state.focusedItemIndex;\n\n      if (focusedItemIndex === undefined) {\n        focusedItemIndex = -1;\n      }\n\n      while (focusedItemIndex < _react2.default.Children.count(children) - 1) {\n        focusedItemIndex++;\n\n        if (this.isFocusableItemIndex(focusedItemIndex)) {\n          return focusedItemIndex;\n        }\n      }\n    } // `this.list` is also being accessed from `<ScrollableList/>`.\n    // Is only used by `<ScrollableList/>` so set `max-height` immediately,\n    // without waiting for the next React render cycle.\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          id = _props2.id,\n          expandable = _props2.expandable,\n          disabled = _props2.disabled,\n          tabbable = _props2.tabbable,\n          value = _props2.value,\n          hasOnChange = _props2.hasOnChange,\n          onChange = _props2.onChange,\n          onSelectItem = _props2.onSelectItem,\n          highlightSelectedItem = _props2.highlightSelectedItem,\n          createButtons = _props2.createButtons,\n          className = _props2.className,\n          style = _props2.style,\n          children = _props2.children;\n      var role = this.props.role;\n      var _state = this.state,\n          focusedItemIndex = _state.focusedItemIndex,\n          isFocused = _state.isFocused; // ARIA (accessibility) roles info:\n      // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html\n\n      if (!role && (onChange || onSelectItem)) {\n        role = 'listbox';\n      } // if (this.props['aria-hidden']) {\n      // \trole = undefined\n      // }\n      // `tabIndex={ -1 }` makes the `<ul/>` focusable.\n      // So that `<Expandable/>` doesn't collapse on click inside it (top, bottom).\n\n\n      return _react2.default.createElement('ul', {\n        ref: this.storeListNode,\n        id: id,\n        role: role,\n        'aria-label': this.props['aria-label'],\n        'aria-hidden': this.props['aria-hidden'],\n        'aria-required': this.props['aria-required'],\n        'aria-invalid': this.props['aria-invalid'],\n        onFocus: this.onFocusIn,\n        onKeyDown: this.onKeyDown,\n        onKeyPress: this.onKeyPress,\n        tabIndex: -1,\n        style: style,\n        className: (0, _classnames2.default)(className, 'rrui__outline', 'rrui__list', {\n          'rrui__list--focus': isFocused\n        })\n      }, _react2.default.Children.map(children, function (item, i) {\n        // Workaround for `react-hot-loader`.\n        // https://github.com/gaearon/react-hot-loader#checking-element-types\n        if (item.type.displayName !== 'ListItem') {\n          throw new Error('Only <List.Item/>s can be placed inside a <List/> (and remove any whitespace).');\n        }\n\n        return _react2.default.cloneElement(item, {\n          key: i,\n          index: i,\n          itemRef: _this2.isFocusableItem(item) ? _this2.storeItemRef : undefined,\n          role: role === 'listbox' ? 'option' : item.props.role,\n          focus: _this2.focusItem,\n          focused: (expandable || isFocused) && focusedItemIndex === i,\n          disabled: disabled || item.props.disabled,\n          tabIndex: tabbable && (focusedItemIndex === undefined ? i === 0 : i === focusedItemIndex) ? 0 : -1,\n          createButton: createButtons,\n          isInputInProgress: _this2.isInputInProgress,\n          onInputSpacebar: _this2.onInputSpacebar,\n          onItemFocus: _this2.onItemFocus,\n          onItemBlur: _this2.onBlur,\n          onSelectItem: onChange || onSelectItem,\n          hasOnSelectItem: hasOnChange,\n          selectedItemValue: value,\n          highlightSelectedItem: (onChange || onSelectItem) && highlightSelectedItem\n        });\n      }));\n    }\n  }]);\n\n  return List;\n}(PureComponent), _class.propTypes = {\n  // (optional) HTML `id` attribute.\n  // Can be used for WAI-ARIA stuff.\n  // Example: `<input role=\"combobox\"/>` with `aria-owns={listId}`.\n  id: _propTypes2.default.string,\n  value: _propTypes2.default.any,\n  onChange: _propTypes2.default.func,\n  // If a `<List/>` has `onChange` then it wraps `<List.Item/>`s with `<button/>`s.\n  // The `onChange` added by `<ExpandableList/>` overrides the original `onChange`.\n  // If there was no `onChange` — there will be one.\n  // So to retain that info `hasOnChange` property is used as a workaround.\n  // `undefined` means \"ignore this property\".\n  hasOnChange: _propTypes2.default.bool,\n  // If `items` property is supplied then it's used to\n  // detect \"on items changed\" event in `getDerivedStateFromProps`.\n  // It seems to be the only usage of the `items` property.\n  items: _propTypes2.default.arrayOf(_propTypes2.default.object),\n  // Legacy method, use `onChange` instead.\n  onSelectItem: _propTypes2.default.func,\n  highlightSelectedItem: _propTypes2.default.bool.isRequired,\n  onFocusIn: _propTypes2.default.func,\n  onFocusItem: _propTypes2.default.func,\n  onKeyDown: _propTypes2.default.func,\n  // ARIA `role` attribute.\n  role: _propTypes2.default.string,\n  // If a `<List/>` is `expandable`\n  // then it won't be `.rrui__list:not(.rrui__list--focus)`.\n  // `.rrui__list:not(.rrui__list--focus)` is only for standalone lists.\n  expandable: _propTypes2.default.bool,\n  // If `tabbable` is `true` (default behavior)\n  // then the first item of the list\n  // (or the last focused item of the list)\n  // will be focused when the list gets focused.\n  tabbable: _propTypes2.default.bool.isRequired,\n  // If `shouldFocus` is set to `false`\n  // (which is not the default behavior)\n  // then the list items won't actually\n  // be `.focus()`ed (though they'll be\n  // indicated as if they're focused).\n  // This feature is used in `<Autocomplete/>`\n  // that always keeps the actual focus on the `<input/>`.\n  shouldFocus: _propTypes2.default.bool.isRequired,\n  // If `highlightFirstItem` is `true`\n  // then by default the first item of the list\n  // will be focused every time it's items change.\n  // (and also when it's mounted)\n  highlightFirstItem: _propTypes2.default.bool.isRequired,\n  createButtons: _propTypes2.default.bool.isRequired,\n  // For select options list keyboard navigation via typing.\n  resetInputTimeout: _propTypes2.default.number.isRequired\n}, _class.defaultProps = {\n  tabbable: true,\n  shouldFocus: true,\n  highlightFirstItem: false,\n  createButtons: true,\n  highlightSelectedItem: true,\n  resetInputTimeout: 1000\n}, _temp2);\nexports.default = List;\nvar ListItem = exports.ListItem = (_temp4 = _class2 = function (_React$Component) {\n  _inherits(ListItem, _React$Component);\n\n  function ListItem() {\n    var _ref2;\n\n    var _temp3, _this3, _ret2;\n\n    _classCallCheck(this, ListItem);\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _ret2 = (_temp3 = (_this3 = _possibleConstructorReturn(this, (_ref2 = ListItem.__proto__ || Object.getPrototypeOf(ListItem)).call.apply(_ref2, [this].concat(args))), _this3), _this3.onButtonKeyDown = function (event) {\n      var _this3$props = _this3.props,\n          isInputInProgress = _this3$props.isInputInProgress,\n          onInputSpacebar = _this3$props.onInputSpacebar;\n\n      if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        // \"Spacebar\".\n        case 32:\n          // If the user is currently typing.\n          if (isInputInProgress()) {\n            // Don't press the option button.\n            event.preventDefault(); // Append space character.\n\n            onInputSpacebar();\n          }\n\n      }\n    }, _this3.onMouseDown = function (event) {\n      var _this3$props2 = _this3.props,\n          value = _this3$props2.value,\n          index = _this3$props2.index,\n          focus = _this3$props2.focus,\n          children = _this3$props2.children; // If `<List.Item/>` child element gets wrapped in a `<button/>`\n      // then call `onMouseDown` defined on the `<List.Item/>`.\n      // If `<List.Item/>` child element doesn't get wrapped in a `<button/>`\n      // then manually call `onMouseDown` defined on the `<List.Item/>` child element\n      // because `onMouseDown` gets overridden for `<List.Item/>` child element.\n\n      var onMouseDown = _this3.shouldCreateButton() ? _this3.props.onMouseDown : children.props.onMouseDown; // Without this Safari (both mobile and desktop)\n      // won't select any item in an expanded list\n      // because it will collapse the list immediately\n      // on `mouseDown` due to `blur` event being fired.\n\n      event.preventDefault();\n\n      if (_this3.isSelectable()) {\n        focus(index);\n      }\n\n      if (onMouseDown) {\n        onMouseDown(event);\n      }\n    }, _this3.onFocus = function (event) {\n      var _this3$props3 = _this3.props,\n          focus = _this3$props3.focus,\n          index = _this3$props3.index,\n          onItemFocus = _this3$props3.onItemFocus,\n          children = _this3$props3.children; // If `<List.Item/>` child element gets wrapped in a `<button/>`\n      // then call `onFocus` defined on the `<List.Item/>`.\n      // If `<List.Item/>` child element doesn't get wrapped in a `<button/>`\n      // then manually call `onFocus` defined on the `<List.Item/>` child element\n      // because `onFocus` gets overridden for `<List.Item/>` child element.\n\n      var onFocus = _this3.shouldCreateButton() ? _this3.props.onFocus : children.props.onFocus;\n\n      if (_this3.isSelectable()) {\n        focus(index);\n      }\n\n      if (onFocus) {\n        onFocus(event);\n      }\n\n      if (onItemFocus) {\n        onItemFocus(event);\n      }\n    }, _this3.onBlur = function (event) {\n      var _this3$props4 = _this3.props,\n          onItemBlur = _this3$props4.onItemBlur,\n          children = _this3$props4.children; // If `<List.Item/>` child element gets wrapped in a `<button/>`\n      // then call `onBlur` defined on the `<List.Item/>`.\n      // If `<List.Item/>` child element doesn't get wrapped in a `<button/>`\n      // then manually call `onFocus` defined on the `<List.Item/>` child element\n      // because `onBlur` gets overridden for `<List.Item/>` child element.\n\n      var onBlur = _this3.shouldCreateButton() ? _this3.props.onBlur : children.props.onBlur;\n\n      if (onBlur) {\n        onBlur(event);\n      }\n\n      if (onItemBlur) {\n        onItemBlur(event);\n      }\n    }, _this3.onClick = function (event) {\n      var _this3$props5 = _this3.props,\n          onClick = _this3$props5.onClick,\n          onSelect = _this3$props5.onSelect,\n          onSelectItem = _this3$props5.onSelectItem,\n          index = _this3$props5.index,\n          value = _this3$props5.value,\n          children = _this3$props5.children; // If `<List.Item/>` child element gets wrapped in a `<button/>`\n      // then call `onClick` defined on the `<List.Item/>`.\n      // If `<List.Item/>` child element doesn't get wrapped in a `<button/>`\n      // then manually call `onClick` defined on the `<List.Item/>` child element\n      // because `onClick` gets overridden for `<List.Item/>` child element,\n      // and also call `onClick` defined on the `<List.Item/>` (if any).\n\n      if (onClick) {\n        onClick(event);\n      }\n\n      if (!_this3.shouldCreateButton()) {\n        // Since `onClick` gets overridden\n        // for `<List.Item/>` child element\n        // call its original `onClick` manually here.\n        if (children.props.onClick) {\n          children.props.onClick(event);\n        }\n      }\n\n      if (_this3.isSelectable()) {\n        if (onSelect) {\n          onSelect(value, index);\n        }\n\n        if (onSelectItem) {\n          onSelectItem(value, index);\n        }\n      }\n    }, _this3.focus = function () {\n      var children = _this3.props.children;\n      (0, _focus.focus)(_react2.default.Children.toArray(children)[0]);\n    }, _this3.storeRef = function (ref) {\n      var _this3$props6 = _this3.props,\n          itemRef = _this3$props6.itemRef,\n          index = _this3$props6.index;\n\n      if (itemRef) {\n        itemRef(ref, index);\n      }\n    }, _temp3), _possibleConstructorReturn(_this3, _ret2);\n  }\n\n  _createClass(ListItem, [{\n    key: 'isSelectable',\n    value: function isSelectable() {\n      return isSelectableItem(this);\n    } // Perhaps this is called by `focus()` utility function.\n    // Something like: `focus(this.itemRefs[i])`.\n\n  }, {\n    key: 'shouldCreateButton',\n    value: function shouldCreateButton() {\n      var _props3 = this.props,\n          onClick = _props3.onClick,\n          onSelect = _props3.onSelect,\n          onSelectItem = _props3.onSelectItem,\n          hasOnSelectItem = _props3.hasOnSelectItem,\n          createButton = _props3.createButton,\n          shouldCreateButton = _props3.shouldCreateButton;\n      return this.isSelectable() && (onClick || onSelect || onSelectItem && (hasOnSelectItem === undefined ? true : hasOnSelectItem) && (createButton || shouldCreateButton));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props,\n          id = _props4.id,\n          value = _props4.value,\n          icon = _props4.icon,\n          item = _props4.item,\n          role = _props4.role,\n          focused = _props4.focused,\n          disabled = _props4.disabled,\n          className = _props4.className,\n          tabIndex = _props4.tabIndex,\n          highlightSelectedItem = _props4.highlightSelectedItem,\n          selectedItemValue = _props4.selectedItemValue,\n          Component = _props4.component,\n          children = _props4.children; // Throws an error for some weird reason.\n      // React.Children.only(children)\n\n      if (!Component) {\n        if (_react2.default.Children.count(children) !== 1) {\n          throw new Error('Each <List.Item/> must have a single child (and remove any whitespace).');\n        }\n      }\n\n      var isSelected = this.shouldCreateButton() && value === selectedItemValue;\n      var isDividerItem = !Component && isDivider(children);\n      var properties = {\n        ref: isDividerItem ? undefined : this.storeRef,\n        onMouseDown: this.onMouseDown,\n        onClick: this.onClick,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        className: (0, _classnames2.default)(className, 'rrui__list__item', 'rrui__text-line', {\n          /* `--focused` modifier is deprecated, use `--focus` instead. */\n          'rrui__list__item--focused': focused,\n          'rrui__list__item--focus': focused,\n          'rrui__list__item--selected': isSelected && highlightSelectedItem,\n          'rrui__list__item--disabled': disabled,\n          'rrui__list__item--divider': isDividerItem\n        })\n      };\n\n      if (id !== undefined) {\n        properties.id = id;\n      }\n\n      if (tabIndex !== undefined) {\n        properties.tabIndex = tabIndex;\n      }\n\n      var ItemComponent = void 0;\n      var itemChildren = void 0;\n      var label = void 0;\n\n      if (this.shouldCreateButton()) {\n        ItemComponent = 'button';\n        label = getItemLabel(this);\n        properties.type = 'button';\n        properties.role = role;\n        properties['aria-selected'] = isSelected;\n        properties['aria-label'] = this.props.label || (Component ? undefined : typeof children !== 'string' && children && children.props ? children.props['aria-label'] : undefined);\n        properties.disabled = disabled;\n        properties.onKeyDown = this.onButtonKeyDown;\n        properties.className = (0, _classnames2.default)(properties.className, 'rrui__button-reset', 'rrui__outline', // `.rrui__list__item--button` only sets the fixed `height`.\n        !Component && 'rrui__list__item--button');\n        itemChildren = Component ? _react2.default.createElement(Component, _extends({}, item, {\n          selected: isSelected && highlightSelectedItem,\n          focused: focused,\n          disabled: disabled\n        })) : renderListItemComponent({\n          value: value,\n          label: label,\n          icon: icon,\n          children: children\n        });\n      } else {\n        // Don't overwrite `className` already defined on the `children`.\n        properties.className = (0, _classnames2.default)(properties.className, children.props && children.props.className);\n      }\n\n      return _react2.default.createElement('li', {\n        role: this.shouldCreateButton() || isDivider(children) ? 'presentation' : role,\n        'aria-selected': this.shouldCreateButton() ? undefined : role && role !== 'presentation' ? isSelected : undefined,\n        'aria-label': this.shouldCreateButton() ? undefined : label,\n        className: 'rrui__list__list-item'\n      }, ItemComponent && _react2.default.createElement(ItemComponent, properties, itemChildren), !ItemComponent && _react2.default.cloneElement(children, properties));\n    }\n  }]);\n\n  return ListItem;\n}(_react2.default.Component), _class2.propTypes = {\n  // (optional) HTML `id` attribute.\n  // Can be used for WAI-ARIA stuff.\n  // Example: `<input role=\"combobox\"/>` with `aria-activedescendant={focusedListItemId}`.\n  id: _propTypes2.default.string,\n  value: _propTypes2.default.any,\n  index: _propTypes2.default.number,\n  focused: _propTypes2.default.bool,\n  onClick: _propTypes2.default.func,\n  // `onSelect` is deprecated, use `onClick` instead.\n  onSelect: _propTypes2.default.func,\n  onSelectItem: _propTypes2.default.func,\n  // If a `<List/>` has `onChange` then it wraps `<List.Item/>`s with `<button/>`s.\n  // The `onChange` added by `<ExpandableList/>` overrides the original `onChange`.\n  // If there was no `onChange` — there will be one.\n  // So to retain that info `hasOnChange` property is used as a workaround.\n  // `undefined` means \"ignore this property\".\n  hasOnSelectItem: _propTypes2.default.bool,\n  selectedItemValue: _propTypes2.default.any,\n  highlightSelectedItem: _propTypes2.default.bool,\n  createButton: _propTypes2.default.bool,\n  // Deprecated. Use `createButton` instead.\n  shouldCreateButton: _propTypes2.default.bool,\n  // The button won't be pressed on \"Space\" key\n  // if the user is currently typing.\n  isInputInProgress: _propTypes2.default.func,\n  onInputSpacebar: _propTypes2.default.func\n}, _temp4); // Workaround for `react-hot-loader`.\n// https://github.com/gaearon/react-hot-loader#checking-element-types\n\nListItem.displayName = 'ListItem';\nList.Item = ListItem; // Replace `itemChildren` array with `<React.Fragment/>`\n// in some future when React >= 16.2.0 is common.\n//\n// <React.Fragment>\n// \t{/* Icon. */}\n// \t{icon &&\n// \t\t<div className=\"rrui__list__item-icon\">\n// \t\t\t{ React.createElement(icon, { value, label }) }\n// \t\t</div>\n// \t}\n// \t{/* Label (or content). */}\n// \t{children}\n// </React.Fragment>\n\nfunction renderListItemComponent(_ref3) {\n  var value = _ref3.value,\n      label = _ref3.label,\n      icon = _ref3.icon,\n      children = _ref3.children; // Label (or content).\n\n  var itemChildren = void 0;\n\n  if (typeof children === 'string') {\n    // `text-overflow: ellipsis` doesn't work on `<button/>`s.\n    // https://stackoverflow.com/questions/9905409/is-it-possible-to-use-text-overflow-ellipsis-on-a-button-element\n    itemChildren = [_react2.default.createElement('span', {\n      key: 'label',\n      className: 'rrui__text-line'\n    }, children)];\n  } else {\n    itemChildren = _react2.default.Children.toArray(children);\n  } // Icon.\n\n\n  if (icon) {\n    itemChildren.unshift(_react2.default.createElement('span', {\n      key: 'icon',\n      'aria-hidden': true,\n      className: 'rrui__list__item-icon'\n    }, _react2.default.createElement(icon, {\n      value: value,\n      label: label\n    })));\n  }\n\n  return itemChildren;\n}\n\nfunction haveItemsChanged(props, prevProps) {\n  var items = _react2.default.Children.toArray(props.children);\n\n  var prevItems = _react2.default.Children.toArray(prevProps.children);\n\n  if (items.length !== prevItems.length) {\n    return true;\n  }\n\n  var i = 0;\n\n  while (i < items.length) {\n    if (items[i].props.value !== prevItems[i].props.value) {\n      return true;\n    }\n\n    i++;\n  }\n\n  return false;\n}\n\nfunction findItemIndexByValue(value, children) {\n  var items = _react2.default.Children.toArray(children);\n\n  var i = 0;\n\n  for (var _iterator = items, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref4 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref4 = _i.value;\n    }\n\n    var item = _ref4;\n\n    if (isSelectableItem(item) && item.props.value === value) {\n      return i;\n    }\n\n    i++;\n  }\n}\n\nfunction findItemIndexByLabel(value, children) {\n  var items = _react2.default.Children.toArray(children);\n\n  var i = 0;\n\n  for (var _iterator2 = items, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref5;\n\n    if (_isArray2) {\n      if (_i2 >= _iterator2.length) break;\n      _ref5 = _iterator2[_i2++];\n    } else {\n      _i2 = _iterator2.next();\n      if (_i2.done) break;\n      _ref5 = _i2.value;\n    }\n\n    var item = _ref5;\n\n    if (isSelectableItem(item)) {\n      var itemLabel = getItemLabel(item);\n\n      if (itemLabel && itemLabel.toLowerCase().indexOf(value.toLowerCase()) === 0) {\n        return i;\n      }\n    }\n\n    i++;\n  }\n}\n\nfunction getItemLabel(item) {\n  return item.props.label || (typeof item.props.children === 'string' ? item.props.children : undefined);\n}\n\nfunction isSelectableItem(item) {\n  return item.props.component ? true : item.props.children && !isDivider(item.props.children);\n}\n\nfunction isDivider(element) {\n  // Workaround for `react-hot-loader`.\n  // https://github.com/gaearon/react-hot-loader#checking-element-types\n  return element.type && element.type.displayName === 'Divider';\n}","map":{"version":3,"sources":["../source/List.js"],"names":["PureComponent","List","propTypes","id","value","onChange","hasOnChange","items","onSelectItem","highlightSelectedItem","onFocusIn","onFocusItem","onKeyDown","role","expandable","tabbable","shouldFocus","highlightFirstItem","createButtons","resetInputTimeout","isRequired","defaultProps","state","itemRefs","input","prevProps","prevState","children","selectedItemIndex","findItemIndexByValue","clearTimeout","focusedItemIndex","itemRef","getFocusedItemIndex","clearFocus","unfocus","focus","i","index","item","focusItem","options","focusedItemValue","console","event","previousIndex","interaction","nextIndex","onKeyPress","characters","String","setTimeout","findItemIndexByLabel","resetInput","isInputInProgress","onInputSpacebar","onItemFocus","onBlur","result","isFocused","onFocusOut","isFocusableItemIndex","isFocusableItem","isDivider","storeListNode","getDOMNode","storeItemRef","disabled","className","style","key","focused","tabIndex","createButton","onItemBlur","hasOnSelectItem","selectedItemValue","ListItem","Component","onClick","onSelect","shouldCreateButton","func","onButtonKeyDown","onMouseDown","onFocus","isSelectableItem","storeRef","icon","isSelected","isDividerItem","properties","ref","ItemComponent","itemChildren","label","getItemLabel","renderListItemComponent","props","prevItems","itemLabel","element"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport Divider from './Divider'\r\n\r\nimport { submitFormOnCtrlEnter } from './utility/dom'\r\nimport { onBlur, focus } from './utility/focus'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\nexport default class List extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// (optional) HTML `id` attribute.\r\n\t\t// Can be used for WAI-ARIA stuff.\r\n\t\t// Example: `<input role=\"combobox\"/>` with `aria-owns={listId}`.\r\n\t\tid : PropTypes.string,\r\n\r\n\t\tvalue : PropTypes.any,\r\n\t\tonChange : PropTypes.func,\r\n\r\n\t\t// If a `<List/>` has `onChange` then it wraps `<List.Item/>`s with `<button/>`s.\r\n\t\t// The `onChange` added by `<ExpandableList/>` overrides the original `onChange`.\r\n\t\t// If there was no `onChange` — there will be one.\r\n\t\t// So to retain that info `hasOnChange` property is used as a workaround.\r\n\t\t// `undefined` means \"ignore this property\".\r\n\t\thasOnChange : PropTypes.bool,\r\n\r\n\t\t// If `items` property is supplied then it's used to\r\n\t\t// detect \"on items changed\" event in `getDerivedStateFromProps`.\r\n\t\t// It seems to be the only usage of the `items` property.\r\n\t\titems : PropTypes.arrayOf(PropTypes.object),\r\n\r\n\t\t// Legacy method, use `onChange` instead.\r\n\t\tonSelectItem : PropTypes.func,\r\n\t\thighlightSelectedItem : PropTypes.bool.isRequired,\r\n\r\n\t\tonFocusIn : PropTypes.func,\r\n\t\tonFocusItem : PropTypes.func,\r\n\t\tonKeyDown : PropTypes.func,\r\n\r\n\t\t// ARIA `role` attribute.\r\n\t\trole : PropTypes.string,\r\n\r\n\t\t// If a `<List/>` is `expandable`\r\n\t\t// then it won't be `.rrui__list:not(.rrui__list--focus)`.\r\n\t\t// `.rrui__list:not(.rrui__list--focus)` is only for standalone lists.\r\n\t\texpandable : PropTypes.bool,\r\n\r\n\t\t// If `tabbable` is `true` (default behavior)\r\n\t\t// then the first item of the list\r\n\t\t// (or the last focused item of the list)\r\n\t\t// will be focused when the list gets focused.\r\n\t\ttabbable : PropTypes.bool.isRequired,\r\n\r\n\t\t// If `shouldFocus` is set to `false`\r\n\t\t// (which is not the default behavior)\r\n\t\t// then the list items won't actually\r\n\t\t// be `.focus()`ed (though they'll be\r\n\t\t// indicated as if they're focused).\r\n\t\t// This feature is used in `<Autocomplete/>`\r\n\t\t// that always keeps the actual focus on the `<input/>`.\r\n\t\tshouldFocus : PropTypes.bool.isRequired,\r\n\r\n\t\t// If `highlightFirstItem` is `true`\r\n\t\t// then by default the first item of the list\r\n\t\t// will be focused every time it's items change.\r\n\t\t// (and also when it's mounted)\r\n\t\thighlightFirstItem : PropTypes.bool.isRequired,\r\n\r\n\t\tcreateButtons : PropTypes.bool.isRequired,\r\n\r\n\t\t// For select options list keyboard navigation via typing.\r\n\t\tresetInputTimeout : PropTypes.number.isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\ttabbable : true,\r\n\t\tshouldFocus : true,\r\n\t\thighlightFirstItem : false,\r\n\t\tcreateButtons : true,\r\n\t\thighlightSelectedItem : true,\r\n\t\tresetInputTimeout : 1000\r\n\t}\r\n\r\n\tstate = {\r\n\t\titems: this.props.items\r\n\t}\r\n\r\n\t// `ref`s of all items currently rendered.\r\n\titemRefs = []\r\n\r\n\t// For select options list keyboard navigation via typing.\r\n\tinput = ''\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tconst {\r\n\t\t\thighlightFirstItem\r\n\t\t} = this.props\r\n\r\n\t\tif (highlightFirstItem) {\r\n\t\t\tthis.focusItem(0)\r\n\t\t}\r\n\r\n\t\tthis._isMounted = true\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState)\r\n\t{\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\titems,\r\n\t\t\tchildren,\r\n\t\t\thighlightSelectedItem,\r\n\t\t\thighlightFirstItem\r\n\t\t} = this.props\r\n\r\n\t\t// If `items` property is supplied\r\n\t\t// then it's used to detect \"on items changed\" event.\r\n\t\tif (prevState.items && prevState.items !== items)\r\n\t\t{\r\n\t\t\tthis.setState({ items })\r\n\t\t\t// `findItemIndexByValue()` must return `undefined` for \"no such item\".\r\n\t\t\tconst selectedItemIndex = highlightSelectedItem ? findItemIndexByValue(value, children) : undefined\r\n\t\t\tthis.focusItem(selectedItemIndex === undefined ? (highlightFirstItem ? 0 : undefined) : selectedItemIndex)\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tthis._isMounted = false\r\n\t\tclearTimeout(this.blurTimer)\r\n\t\tclearTimeout(this.resetInputTimer)\r\n\t}\r\n\r\n\tchooseFocusedItem() {\r\n\t\tconst { focusedItemIndex } = this.state\r\n\t\tif (focusedItemIndex !== undefined) {\r\n\t\t\tconst itemRef = this.itemRefs[focusedItemIndex]\r\n\t\t\tif (itemRef.click) {\r\n\t\t\t\titemRef.click()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetFocusedItemIndex = () => this.state.focusedItemIndex\r\n\tclearFocus = () => this.focusItem()\r\n\t// Deprecated method name.\r\n\tunfocus = this.clearFocus\r\n\r\n\t// Focuses the list.\r\n\tfocus = () => {\r\n\t\tconst { focusedItemIndex } = this.state\r\n\t\tif (focusedItemIndex !== undefined) {\r\n\t\t\treturn this.focusItem(focusedItemIndex)\r\n\t\t}\r\n\t\tthis.list.focus()\r\n\t}\r\n\r\n\tgetFirstFocusableItemIndex()\r\n\t{\r\n\t\tlet i = 0\r\n\t\twhile (i < this.itemRefs.length) {\r\n\t\t\tif (this.itemRefs[i]) {\r\n\t\t\t\treturn i\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetItemValue(index)\r\n\t{\r\n\t\tconst { children } = this.props\r\n\t\tconst item = React.Children.toArray(children)[index]\r\n\t\treturn item.props.value\r\n\t}\r\n\r\n\t// Can be public API for programmatically focusing a certain `<List.Item/>`.\r\n\tfocusItem = (focusedItemIndex, options = {}) =>\r\n\t{\r\n\t\tconst { onFocusItem, shouldFocus } = this.props\r\n\r\n\t\tif (onFocusItem) {\r\n\t\t\tonFocusItem(focusedItemIndex, options)\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\t// Focus the item.\r\n\t\t\tfocusedItemIndex,\r\n\t\t\t// Store the focused item value.\r\n\t\t\t// This is used for cases like autocomplete\r\n\t\t\t// where the list of options changes but\r\n\t\t\t// the focused option stays focused.\r\n\t\t\tfocusedItemValue: focusedItemIndex === undefined ? undefined : this.getItemValue(focusedItemIndex)\r\n\t\t}, () => {\r\n\t\t\t// Actually focus the item.\r\n\t\t\tif (focusedItemIndex !== undefined) {\r\n\t\t\t\tif (shouldFocus && this._isMounted) {\r\n\t\t\t\t\tif (!focus(this.itemRefs[focusedItemIndex])) {\r\n\t\t\t\t\t\tconsole.error(`<List.Item/> #${focusedItemIndex + 1}'s child component doesn't have a \".focus()\" method.`)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onKeyDown, children } = this.props\r\n\t\tconst { focusedItemIndex } = this.state\r\n\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (submitFormOnCtrlEnter(event, this.input)) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (React.Children.count(children) > 0)\r\n\t\t{\r\n\t\t\tswitch (event.keyCode)\r\n\t\t\t{\r\n\t\t\t\t// \"Up\" arrow.\r\n\t\t\t\t// Select the previous item (if present).\r\n\t\t\t\tcase 38:\r\n\t\t\t\t\tevent.preventDefault()\r\n\r\n\t\t\t\t\tconst previousIndex = this.getPreviousFocusableItemIndex()\r\n\r\n\t\t\t\t\tif (previousIndex !== undefined) {\r\n\t\t\t\t\t\tthis.focusItem(previousIndex, { interaction: true })\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn\r\n\r\n\t\t\t\t// \"Down\" arrow.\r\n\t\t\t\t// Select the next item (if present).\r\n\t\t\t\tcase 40:\r\n\t\t\t\t\tevent.preventDefault()\r\n\r\n\t\t\t\t\tconst nextIndex = this.getNextFocusableItemIndex()\r\n\r\n\t\t\t\t\tif (nextIndex !== undefined) {\r\n\t\t\t\t\t\tthis.focusItem(nextIndex, { interaction: true })\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonKeyPress = (event) => {\r\n\t\tconst { resetInputTimeout } = this.props\r\n\t\tconst characters = event.char || String.fromCharCode(event.charCode)\r\n\t\tif (characters) {\r\n\t\t\tthis.input += characters\r\n\t\t\tthis.onInput()\r\n\t\t\tclearTimeout(this.resetInputTimer)\r\n\t\t\tthis.resetInputTimer = setTimeout(this.resetInput, resetInputTimeout)\r\n\t\t}\r\n\t}\r\n\r\n\tonInput() {\r\n\t\tconst { children } = this.props\r\n\t\tconst index = findItemIndexByLabel(this.input, children)\r\n\t\tif (index !== undefined) {\r\n\t\t\tthis.focusItem(index)\r\n\t\t}\r\n\t}\r\n\r\n\tresetInput = () => this.input = ''\r\n\tisInputInProgress = () => this.input !== ''\r\n\r\n\tonInputSpacebar = () => {\r\n\t\tif (this.input) {\r\n\t\t\tthis.input += ' '\r\n\t\t}\r\n\t}\r\n\r\n\t// Get the previous option (relative to the currently focused option)\r\n\tgetPreviousFocusableItemIndex()\r\n\t{\r\n\t\tconst { children } = this.props\r\n\t\tlet { focusedItemIndex } = this.state\r\n\r\n\t\tif (focusedItemIndex === undefined) {\r\n\t\t\tfocusedItemIndex = React.Children.count(children)\r\n\t\t}\r\n\r\n\t\twhile (focusedItemIndex > 0) {\r\n\t\t\tfocusedItemIndex--\r\n\t\t\tif (this.isFocusableItemIndex(focusedItemIndex)) {\r\n\t\t\t\treturn focusedItemIndex\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Get the next option (relative to the currently focused option)\r\n\tgetNextFocusableItemIndex()\r\n\t{\r\n\t\tconst { children } = this.props\r\n\t\tlet { focusedItemIndex } = this.state\r\n\r\n\t\tif (focusedItemIndex === undefined) {\r\n\t\t\tfocusedItemIndex = -1\r\n\t\t}\r\n\r\n\t\twhile (focusedItemIndex < React.Children.count(children) - 1) {\r\n\t\t\tfocusedItemIndex++\r\n\t\t\tif (this.isFocusableItemIndex(focusedItemIndex)) {\r\n\t\t\t\treturn focusedItemIndex\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonItemFocus = (event) => {\r\n\t\tconst { expandable } = this.props\r\n\t\tif (expandable) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onFocusIn()\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { expandable } = this.props\r\n\t\tif (expandable) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tclearTimeout(this.blurTimer)\r\n\t\tconst result = onBlur(event, this.onFocusOut, () => this.list)\r\n\t\tif (typeof result === 'number') {\r\n\t\t\tthis.blurTimer = result\r\n\t\t}\r\n\t}\r\n\r\n\tonFocusIn = () => {\r\n\t\tconst { onFocusIn } = this.props\r\n\t\tif (onFocusIn) {\r\n\t\t\tonFocusIn()\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tisFocused: true\r\n\t\t})\r\n\t}\r\n\r\n\tonFocusOut = () => {\r\n\t\tconst { value } = this.props\r\n\t\tif (value === undefined) {\r\n\t\t\tthis.clearFocus()\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tisFocused: false\r\n\t\t})\r\n\t}\r\n\r\n\tisFocusableItemIndex = (index) => this.itemRefs[index] !== undefined\r\n\r\n\tisFocusableItem = (item) => !isDivider(item)\r\n\r\n\t// `this.list` is also being accessed from `<ScrollableList/>`.\r\n\tstoreListNode = (node) => this.list = node\r\n\r\n\t// Is only used by `<ScrollableList/>` so set `max-height` immediately,\r\n\t// without waiting for the next React render cycle.\r\n\tgetDOMNode = () => this.list\r\n\r\n\tstoreItemRef = (ref, i) => this.itemRefs[i] = ref\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tid,\r\n\t\t\texpandable,\r\n\t\t\tdisabled,\r\n\t\t\ttabbable,\r\n\t\t\tvalue,\r\n\t\t\thasOnChange,\r\n\t\t\tonChange,\r\n\t\t\t// `onSelectItem` is deprecated, use `onChange` instead.\r\n\t\t\tonSelectItem,\r\n\t\t\thighlightSelectedItem,\r\n\t\t\tcreateButtons,\r\n\t\t\tclassName,\r\n\t\t\tstyle,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tlet { role } = this.props\r\n\r\n\t\tconst {\r\n\t\t\tfocusedItemIndex,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\t// ARIA (accessibility) roles info:\r\n\t\t// https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html\r\n\t\tif (!role && (onChange || onSelectItem)) {\r\n\t\t\trole = 'listbox'\r\n\t\t}\r\n\r\n\t\t// if (this.props['aria-hidden']) {\r\n\t\t// \trole = undefined\r\n\t\t// }\r\n\r\n\t\t// `tabIndex={ -1 }` makes the `<ul/>` focusable.\r\n\t\t// So that `<Expandable/>` doesn't collapse on click inside it (top, bottom).\r\n\r\n\t\treturn (\r\n\t\t\t<ul\r\n\t\t\t\tref={ this.storeListNode }\r\n\t\t\t\tid={ id }\r\n\t\t\t\trole={ role }\r\n\t\t\t\taria-label={ this.props['aria-label'] }\r\n\t\t\t\taria-hidden={ this.props['aria-hidden'] }\r\n\t\t\t\taria-required={ this.props['aria-required'] }\r\n\t\t\t\taria-invalid={ this.props['aria-invalid'] }\r\n\t\t\t\tonFocus={ this.onFocusIn }\r\n\t\t\t\tonKeyDown={ this.onKeyDown }\r\n\t\t\t\tonKeyPress={ this.onKeyPress }\r\n\t\t\t\ttabIndex={ -1 }\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames(className, 'rrui__outline', 'rrui__list', {\r\n\t\t\t\t\t'rrui__list--focus': isFocused\r\n\t\t\t\t}) }>\r\n\r\n\t\t\t\t{ React.Children.map(children, (item, i) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Workaround for `react-hot-loader`.\r\n\t\t\t\t\t// https://github.com/gaearon/react-hot-loader#checking-element-types\r\n\t\t\t\t\tif (item.type.displayName !== 'ListItem') {\r\n\t\t\t\t\t\tthrow new Error(`Only <List.Item/>s can be placed inside a <List/> (and remove any whitespace).`)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn React.cloneElement(item,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkey       : i,\r\n\t\t\t\t\t\tindex     : i,\r\n\t\t\t\t\t\titemRef   : this.isFocusableItem(item) ? this.storeItemRef : undefined,\r\n\t\t\t\t\t\trole      : role === 'listbox' ? 'option' : item.props.role,\r\n\t\t\t\t\t\tfocus     : this.focusItem,\r\n\t\t\t\t\t\tfocused   : (expandable || isFocused) && focusedItemIndex === i,\r\n\t\t\t\t\t\tdisabled  : disabled || item.props.disabled,\r\n\t\t\t\t\t\ttabIndex  : tabbable && (focusedItemIndex === undefined ? i === 0 : i === focusedItemIndex) ? 0 : -1,\r\n\t\t\t\t\t\tcreateButton : createButtons,\r\n\t\t\t\t\t\tisInputInProgress : this.isInputInProgress,\r\n\t\t\t\t\t\tonInputSpacebar : this.onInputSpacebar,\r\n\t\t\t\t\t\tonItemFocus : this.onItemFocus,\r\n\t\t\t\t\t\tonItemBlur : this.onBlur,\r\n\t\t\t\t\t\tonSelectItem : onChange || onSelectItem,\r\n\t\t\t\t\t\thasOnSelectItem : hasOnChange,\r\n\t\t\t\t\t\tselectedItemValue : value,\r\n\t\t\t\t\t\thighlightSelectedItem : (onChange || onSelectItem) && highlightSelectedItem\r\n\t\t\t\t\t})\r\n\t\t\t\t}) }\r\n\t\t\t</ul>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport class ListItem extends React.Component\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// (optional) HTML `id` attribute.\r\n\t\t// Can be used for WAI-ARIA stuff.\r\n\t\t// Example: `<input role=\"combobox\"/>` with `aria-activedescendant={focusedListItemId}`.\r\n\t\tid : PropTypes.string,\r\n\r\n\t\tvalue : PropTypes.any,\r\n\t\tindex : PropTypes.number,\r\n\t\tfocused : PropTypes.bool,\r\n\t\tonClick : PropTypes.func,\r\n\t\t// `onSelect` is deprecated, use `onClick` instead.\r\n\t\tonSelect : PropTypes.func,\r\n\t\tonSelectItem : PropTypes.func,\r\n\t\t// If a `<List/>` has `onChange` then it wraps `<List.Item/>`s with `<button/>`s.\r\n\t\t// The `onChange` added by `<ExpandableList/>` overrides the original `onChange`.\r\n\t\t// If there was no `onChange` — there will be one.\r\n\t\t// So to retain that info `hasOnChange` property is used as a workaround.\r\n\t\t// `undefined` means \"ignore this property\".\r\n\t\thasOnSelectItem : PropTypes.bool,\r\n\t\tselectedItemValue : PropTypes.any,\r\n\t\thighlightSelectedItem : PropTypes.bool,\r\n\t\tcreateButton : PropTypes.bool,\r\n\t\t// Deprecated. Use `createButton` instead.\r\n\t\tshouldCreateButton : PropTypes.bool,\r\n\t\t// The button won't be pressed on \"Space\" key\r\n\t\t// if the user is currently typing.\r\n\t\tisInputInProgress : PropTypes.func,\r\n\t\tonInputSpacebar : PropTypes.func\r\n\t}\r\n\r\n\tonButtonKeyDown = (event) =>\r\n\t{\r\n\t\tconst { isInputInProgress, onInputSpacebar } = this.props\r\n\r\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tswitch (event.keyCode) {\r\n\t\t\t// \"Spacebar\".\r\n\t\t\tcase 32:\r\n\t\t\t\t// If the user is currently typing.\r\n\t\t\t\tif (isInputInProgress()) {\r\n\t\t\t\t\t// Don't press the option button.\r\n\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t// Append space character.\r\n\t\t\t\t\tonInputSpacebar()\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonMouseDown = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tindex,\r\n\t\t\tfocus,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// If `<List.Item/>` child element gets wrapped in a `<button/>`\r\n\t\t// then call `onMouseDown` defined on the `<List.Item/>`.\r\n\t\t// If `<List.Item/>` child element doesn't get wrapped in a `<button/>`\r\n\t\t// then manually call `onMouseDown` defined on the `<List.Item/>` child element\r\n\t\t// because `onMouseDown` gets overridden for `<List.Item/>` child element.\r\n\r\n\t\tconst onMouseDown = this.shouldCreateButton() ? this.props.onMouseDown : children.props.onMouseDown\r\n\r\n\t\t// Without this Safari (both mobile and desktop)\r\n\t\t// won't select any item in an expanded list\r\n\t\t// because it will collapse the list immediately\r\n\t\t// on `mouseDown` due to `blur` event being fired.\r\n\t\tevent.preventDefault()\r\n\r\n\t\tif (this.isSelectable()) {\r\n\t\t\tfocus(index)\r\n\t\t}\r\n\r\n\t\tif (onMouseDown) {\r\n\t\t\tonMouseDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonFocus = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tfocus,\r\n\t\t\tindex,\r\n\t\t\tonItemFocus,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// If `<List.Item/>` child element gets wrapped in a `<button/>`\r\n\t\t// then call `onFocus` defined on the `<List.Item/>`.\r\n\t\t// If `<List.Item/>` child element doesn't get wrapped in a `<button/>`\r\n\t\t// then manually call `onFocus` defined on the `<List.Item/>` child element\r\n\t\t// because `onFocus` gets overridden for `<List.Item/>` child element.\r\n\r\n\t\tconst onFocus = this.shouldCreateButton() ? this.props.onFocus : children.props.onFocus\r\n\r\n\t\tif (this.isSelectable()) {\r\n\t\t\tfocus(index)\r\n\t\t}\r\n\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\r\n\t\tif (onItemFocus) {\r\n\t\t\tonItemFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { onItemBlur, children } = this.props\r\n\r\n\t\t// If `<List.Item/>` child element gets wrapped in a `<button/>`\r\n\t\t// then call `onBlur` defined on the `<List.Item/>`.\r\n\t\t// If `<List.Item/>` child element doesn't get wrapped in a `<button/>`\r\n\t\t// then manually call `onFocus` defined on the `<List.Item/>` child element\r\n\t\t// because `onBlur` gets overridden for `<List.Item/>` child element.\r\n\r\n\t\tconst onBlur = this.shouldCreateButton() ? this.props.onBlur : children.props.onBlur\r\n\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\r\n\t\tif (onItemBlur) {\r\n\t\t\tonItemBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonClick = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonClick,\r\n\t\t\tonSelect,\r\n\t\t\tonSelectItem,\r\n\t\t\tindex,\r\n\t\t\tvalue,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// If `<List.Item/>` child element gets wrapped in a `<button/>`\r\n\t\t// then call `onClick` defined on the `<List.Item/>`.\r\n\t\t// If `<List.Item/>` child element doesn't get wrapped in a `<button/>`\r\n\t\t// then manually call `onClick` defined on the `<List.Item/>` child element\r\n\t\t// because `onClick` gets overridden for `<List.Item/>` child element,\r\n\t\t// and also call `onClick` defined on the `<List.Item/>` (if any).\r\n\r\n\t\tif (onClick) {\r\n\t\t\tonClick(event)\r\n\t\t}\r\n\r\n\t\tif (!this.shouldCreateButton()) {\r\n\t\t\t// Since `onClick` gets overridden\r\n\t\t\t// for `<List.Item/>` child element\r\n\t\t\t// call its original `onClick` manually here.\r\n\t\t\tif (children.props.onClick) {\r\n\t\t\t\tchildren.props.onClick(event)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.isSelectable())\r\n\t\t{\r\n\t\t\tif (onSelect) {\r\n\t\t\t\tonSelect(value, index)\r\n\t\t\t}\r\n\t\t\tif (onSelectItem) {\r\n\t\t\t\tonSelectItem(value, index)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisSelectable()\r\n\t{\r\n\t\treturn isSelectableItem(this)\r\n\t}\r\n\r\n\t// Perhaps this is called by `focus()` utility function.\r\n\t// Something like: `focus(this.itemRefs[i])`.\r\n\tfocus = () =>\r\n\t{\r\n\t\tconst { children } = this.props\r\n\t\tfocus(React.Children.toArray(children)[0])\r\n\t}\r\n\r\n\tstoreRef = (ref) =>\r\n\t{\r\n\t\tconst { itemRef, index } = this.props\r\n\r\n\t\tif (itemRef) {\r\n\t\t\titemRef(ref, index)\r\n\t\t}\r\n\t}\r\n\r\n\tshouldCreateButton()\r\n\t{\r\n\t\tconst {\r\n\t\t\tonClick,\r\n\t\t\tonSelect,\r\n\t\t\tonSelectItem,\r\n\t\t\thasOnSelectItem,\r\n\t\t\tcreateButton,\r\n\t\t\t// Deprecated. Use `createButton` instead.\r\n\t\t\tshouldCreateButton\r\n\t\t} = this.props\r\n\r\n\t\treturn this.isSelectable() && (\r\n\t\t\tonClick ||\r\n\t\t\tonSelect ||\r\n\t\t\t(\r\n\t\t\t\tonSelectItem &&\r\n\t\t\t\t(hasOnSelectItem === undefined ? true : hasOnSelectItem) &&\r\n\t\t\t\t(createButton || shouldCreateButton)\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tid,\r\n\t\t\tvalue,\r\n\t\t\ticon,\r\n\t\t\titem,\r\n\t\t\trole,\r\n\t\t\tfocused,\r\n\t\t\tdisabled,\r\n\t\t\tclassName,\r\n\t\t\ttabIndex,\r\n\t\t\thighlightSelectedItem,\r\n\t\t\tselectedItemValue,\r\n\t\t\tcomponent: Component,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// Throws an error for some weird reason.\r\n\t\t// React.Children.only(children)\r\n\r\n\t\tif (!Component) {\r\n\t\t\tif (React.Children.count(children) !== 1) {\r\n\t\t\t\tthrow new Error(`Each <List.Item/> must have a single child (and remove any whitespace).`)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst isSelected = this.shouldCreateButton() && value === selectedItemValue\r\n\t\tconst isDividerItem = !Component && isDivider(children)\r\n\r\n\t\tconst properties =\r\n\t\t{\r\n\t\t\tref          : isDividerItem ? undefined : this.storeRef,\r\n\t\t\tonMouseDown  : this.onMouseDown,\r\n\t\t\tonClick      : this.onClick,\r\n\t\t\tonFocus      : this.onFocus,\r\n\t\t\tonBlur       : this.onBlur,\r\n\t\t\tclassName    : classNames\r\n\t\t\t(\r\n\t\t\t\tclassName,\r\n\t\t\t\t'rrui__list__item',\r\n\t\t\t\t'rrui__text-line',\r\n\t\t\t\t{\r\n\t\t\t\t\t/* `--focused` modifier is deprecated, use `--focus` instead. */\r\n\t\t\t\t\t'rrui__list__item--focused'  : focused,\r\n\t\t\t\t\t'rrui__list__item--focus'    : focused,\r\n\t\t\t\t\t'rrui__list__item--selected' : isSelected && highlightSelectedItem,\r\n\t\t\t\t\t'rrui__list__item--disabled' : disabled,\r\n\t\t\t\t\t'rrui__list__item--divider'  : isDividerItem\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tif (id !== undefined) {\r\n\t\t\tproperties.id = id\r\n\t\t}\r\n\r\n\t\tif (tabIndex !== undefined) {\r\n\t\t\tproperties.tabIndex = tabIndex\r\n\t\t}\r\n\r\n\t\tlet ItemComponent\r\n\t\tlet itemChildren\r\n\t\tlet label\r\n\r\n\t\tif (this.shouldCreateButton())\r\n\t\t{\r\n\t\t\tItemComponent = 'button'\r\n\t\t\tlabel = getItemLabel(this)\r\n\t\t\tproperties.type = 'button'\r\n\t\t\tproperties.role = role\r\n\t\t\tproperties['aria-selected'] = isSelected\r\n\t\t\tproperties['aria-label'] = this.props.label || (Component ? undefined : (typeof children !== 'string' && children && children.props ? children.props['aria-label'] : undefined))\r\n\t\t\tproperties.disabled = disabled\r\n\t\t\tproperties.onKeyDown = this.onButtonKeyDown\r\n\t\t\tproperties.className = classNames(\r\n\t\t\t\tproperties.className,\r\n\t\t\t\t'rrui__button-reset',\r\n\t\t\t\t'rrui__outline',\r\n\t\t\t\t// `.rrui__list__item--button` only sets the fixed `height`.\r\n\t\t\t\t!Component && 'rrui__list__item--button'\r\n\t\t\t)\r\n\r\n\t\t\titemChildren = Component ?\r\n\t\t\t\t<Component\r\n\t\t\t\t\t{...item}\r\n\t\t\t\t\tselected={isSelected && highlightSelectedItem}\r\n\t\t\t\t\tfocused={focused}\r\n\t\t\t\t\tdisabled={disabled}/> :\r\n\t\t\t\trenderListItemComponent({ value, label, icon, children })\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Don't overwrite `className` already defined on the `children`.\r\n\t\t\tproperties.className = classNames(\r\n\t\t\t\tproperties.className,\r\n\t\t\t\tchildren.props && children.props.className\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<li\r\n\t\t\t\trole={this.shouldCreateButton() || isDivider(children) ? 'presentation' : role}\r\n\t\t\t\taria-selected={this.shouldCreateButton() ? undefined : (role && role !== 'presentation' ? isSelected : undefined)}\r\n\t\t\t\taria-label={this.shouldCreateButton() ? undefined : label}\r\n\t\t\t\tclassName=\"rrui__list__list-item\">\r\n\t\t\t\t{ ItemComponent && React.createElement(ItemComponent, properties, itemChildren) }\r\n\t\t\t\t{ !ItemComponent && React.cloneElement(children, properties) }\r\n\t\t\t</li>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// Workaround for `react-hot-loader`.\r\n// https://github.com/gaearon/react-hot-loader#checking-element-types\r\nListItem.displayName = 'ListItem'\r\n\r\nList.Item = ListItem\r\n\r\n\r\n// Replace `itemChildren` array with `<React.Fragment/>`\r\n// in some future when React >= 16.2.0 is common.\r\n//\r\n// <React.Fragment>\r\n// \t{/* Icon. */}\r\n// \t{icon &&\r\n// \t\t<div className=\"rrui__list__item-icon\">\r\n// \t\t\t{ React.createElement(icon, { value, label }) }\r\n// \t\t</div>\r\n// \t}\r\n// \t{/* Label (or content). */}\r\n// \t{children}\r\n// </React.Fragment>\r\nfunction renderListItemComponent({\r\n\tvalue,\r\n\tlabel,\r\n\ticon,\r\n\tchildren\r\n}) {\r\n\t// Label (or content).\r\n\tlet itemChildren\r\n\tif (typeof children === 'string') {\r\n\t\t// `text-overflow: ellipsis` doesn't work on `<button/>`s.\r\n\t\t// https://stackoverflow.com/questions/9905409/is-it-possible-to-use-text-overflow-ellipsis-on-a-button-element\r\n\t\titemChildren = [\r\n\t\t\t<span key=\"label\" className=\"rrui__text-line\">\r\n\t\t\t\t{children}\r\n\t\t\t</span>\r\n\t\t]\r\n\t} else {\r\n\t\titemChildren = React.Children.toArray(children)\r\n\t}\r\n\t// Icon.\r\n\tif (icon) {\r\n\t\titemChildren.unshift((\r\n\t\t\t<span key=\"icon\" aria-hidden className=\"rrui__list__item-icon\">\r\n\t\t\t\t{React.createElement(icon, { value, label })}\r\n\t\t\t</span>\r\n\t\t))\r\n\t}\r\n\treturn itemChildren\r\n}\r\n\r\nfunction haveItemsChanged(props, prevProps)\r\n{\r\n\tconst items     = React.Children.toArray(props.children)\r\n\tconst prevItems = React.Children.toArray(prevProps.children)\r\n\r\n\tif (items.length !== prevItems.length) {\r\n\t\treturn true\r\n\t}\r\n\r\n\tlet i = 0\r\n\twhile (i < items.length)\r\n\t{\r\n\t\tif (items[i].props.value !== prevItems[i].props.value) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn false\r\n}\r\n\r\nexport function findItemIndexByValue(value, children)\r\n{\r\n\tconst items = React.Children.toArray(children)\r\n\r\n\tlet i = 0\r\n\tfor (const item of items)\r\n\t{\r\n\t\tif (isSelectableItem(item) && item.props.value === value) {\r\n\t\t\treturn i\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}\r\n\r\nfunction findItemIndexByLabel(value, children)\r\n{\r\n\tconst items = React.Children.toArray(children)\r\n\r\n\tlet i = 0\r\n\tfor (const item of items)\r\n\t{\r\n\t\tif (isSelectableItem(item)) {\r\n\t\t\tconst itemLabel = getItemLabel(item)\r\n\t\t\tif (itemLabel && itemLabel.toLowerCase().indexOf(value.toLowerCase()) === 0) {\r\n\t\t\t\treturn i\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}\r\n\r\nfunction getItemLabel(item) {\r\n\treturn item.props.label || (typeof item.props.children === 'string' ? item.props.children : undefined)\r\n}\r\n\r\nfunction isSelectableItem(item) {\r\n\treturn item.props.component ? true : (item.props.children && !isDivider(item.props.children))\r\n}\r\n\r\nfunction isDivider(element) {\r\n\t// Workaround for `react-hot-loader`.\r\n\t// https://github.com/gaearon/react-hot-loader#checking-element-types\r\n\treturn element.type && element.type.displayName === 'Divider'\r\n}"]},"metadata":{},"sourceType":"script"}
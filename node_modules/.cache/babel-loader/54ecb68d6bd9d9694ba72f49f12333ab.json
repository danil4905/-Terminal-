{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _core = require('libphonenumber-js/core');\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nfunction createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n  var InputBasic = function (_PureComponent) {\n    _inherits(InputBasic, _PureComponent);\n\n    function InputBasic() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, InputBasic);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputBasic.__proto__ || Object.getPrototypeOf(InputBasic)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onChange = function (event) {\n        var onChange = _this.props.onChange;\n        var value = _this.state.value;\n        var newValue = (0, _core.parseIncompletePhoneNumber)(event.target.value); // By default, if a value is something like `\"(123)\"`\n        // then Backspace would only erase the rightmost brace\n        // becoming something like `\"(123\"`\n        // which would give the same `\"123\"` value\n        // which would then be formatted back to `\"(123)\"`\n        // and so a user wouldn't be able to erase the phone number.\n        // Working around this issue with this simple hack.\n\n        if (newValue === value) {\n          if (_this.format(newValue).indexOf(event.target.value) === 0) {\n            // Trim the last digit (or plus sign).\n            newValue = newValue.slice(0, -1);\n          }\n        } // Prevents React from resetting the `<input/>` caret position.\n        // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n        // https://github.com/facebook/react/issues/955\n\n\n        _this.setState({\n          value: newValue\n        }, function () {\n          return onChange(newValue);\n        });\n      }, _this.onBlur = function (event) {\n        var onBlur = _this.props.onBlur;\n        var value = _this.state.value;\n\n        if (onBlur) {\n          // `event` is React's `SyntheticEvent`.\n          // Its `.value` is read-only therefore cloning it.\n          var _event = _extends({}, event, {\n            target: _extends({}, event.target, {\n              value: value\n            }) // Workaround for `redux-form` event detection.\n            // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n          });\n\n          _event.stopPropagation = event.stopPropagation;\n          _event.preventDefault = event.preventDefault;\n          return onBlur(_event);\n        }\n      }, _this.focus = function () {\n        return _this.input.focus();\n      }, _this.storeInput = function (ref) {\n        return _this.input = ref;\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(InputBasic, [{\n      key: 'format',\n      value: function format(value) {\n        var _props = this.props,\n            country = _props.country,\n            metadata = _props.metadata;\n        return (0, _core.formatIncompletePhoneNumber)(value, country, metadata);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _props2 = this.props,\n            onChange = _props2.onChange,\n            onFocus = _props2.onFocus,\n            country = _props2.country,\n            metadata = _props2.metadata,\n            Input = _props2.inputComponent,\n            rest = _objectWithoutProperties(_props2, ['onChange', 'onFocus', 'country', 'metadata', 'inputComponent']); // Prevents React from resetting the `<input/>` caret position.\n        // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n        // https://github.com/facebook/react/issues/955\n\n\n        var value = this.state.value; // Deprecated. Should be removed in a future major version release.\n        // `type=\"tel\"` and `autoComplete=\"tel\"` properties are here\n        // just for the \"Without country select\" component exported from\n        // `react-phone-number-input/basic-input` subpackage.\n        // These two properties will be overwritten by `<PhoneInput/>` properties\n        // when not used as a \"Without country select\" component.\n\n        return _react2.default.createElement(Input, _extends({\n          type: 'tel',\n          autoComplete: 'tel'\n        }, rest, {\n          ref: this.storeInput,\n          value: this.format(value),\n          onChange: this.onChange,\n          onFocus: onFocus,\n          onBlur: this.onBlur\n        }));\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      // Prevents React from resetting the `<input/>` caret position.\n      // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n      // https://github.com/facebook/react/issues/955\n      value: function getDerivedStateFromProps(_ref2) {\n        var value = _ref2.value;\n        return {\n          value: value\n        };\n      } // This `onBlur` interceptor is a workaround for `redux-form`'s bug\n      // so that it gets the up-to-date `value` in its `onBlur` handler.\n      // Without this fix it just gets the actual (raw) input field textual value.\n      // E.g. `+7 800 555 35 35` instead of `+78005553535`.\n      //\n      // New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\n      // https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\n      // `redux-form` shouldn't have taken the new `value` from `event`.\n      //\n      // A developer is not supposed to pass this `onBlur` property manually.\n      // Instead, `redux-form` passes `onBlur` to this component automatically\n      // and this component patches that `onBlur` handler (a hacky way but works).\n      //\n\n    }]);\n\n    return InputBasic;\n  }(PureComponent);\n\n  InputBasic.propTypes = {\n    // The parsed phone number.\n    // \"Parsed\" not in a sense of \"E.164\"\n    // but rather in a sense of \"having only\n    // digits and possibly a leading plus character\".\n    // Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n    value: _propTypes2.default.string.isRequired,\n    // Updates the `value`.\n    onChange: _propTypes2.default.func.isRequired,\n    // Toggles the `--focus` CSS class.\n    // https://github.com/catamphetamine/react-phone-number-input/issues/189\n    onFocus: _propTypes2.default.func,\n    // `onBlur` workaround for `redux-form`'s bug.\n    onBlur: _propTypes2.default.func,\n    // A two-letter country code for formatting `value`\n    // as a national phone number (e.g. `(800) 555 35 35`).\n    // E.g. \"US\", \"RU\", etc.\n    // If no `country` is passed then `value`\n    // is formatted as an international phone number.\n    // (e.g. `+7 800 555 35 35`)\n    country: _propTypes2.default.string,\n    // `libphonenumber-js` metadata.\n    metadata: _propTypes2.default.object.isRequired,\n    // The `<input/>` component.\n    inputComponent: _propTypes2.default.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return (0, _reactLifecyclesCompat.polyfill)(InputBasic);\n}\n\nexports.default = createInput();","map":{"version":3,"sources":["../source/InputBasic.js"],"names":["PureComponent","createInput","InputBasic","value","onChange","newValue","event","onBlur","target","_event","country","metadata","onFocus","Input","rest","inputComponent","isRequired"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n\t * but still works good enough. When erasing or inserting digits in the middle\r\n\t * of a phone number the caret usually jumps to the end: this is the expected\r\n\t * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t */\r\n\tclass InputBasic extends PureComponent {\r\n\t\t// Prevents React from resetting the `<input/>` caret position.\r\n\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\r\n\t\t// https://github.com/facebook/react/issues/955\r\n\t\tstatic getDerivedStateFromProps({ value }) {\r\n\t\t\treturn { value }\r\n\t\t}\r\n\r\n\t\tstate = {}\r\n\r\n\t\tonChange = (event) => {\r\n\t\t\tconst { onChange } = this.props\r\n\t\t\tconst { value } = this.state\r\n\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t// Working around this issue with this simple hack.\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tif (this.format(newValue).indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Prevents React from resetting the `<input/>` caret position.\r\n\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\r\n\t\t\t// https://github.com/facebook/react/issues/955\r\n\t\t\tthis.setState({ value: newValue }, () => onChange(newValue))\r\n\t\t}\r\n\r\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`'s bug\r\n\t\t// so that it gets the up-to-date `value` in its `onBlur` handler.\r\n\t\t// Without this fix it just gets the actual (raw) input field textual value.\r\n\t\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\r\n\t\t//\r\n\t\t// New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\r\n\t\t// https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\r\n\t\t// `redux-form` shouldn't have taken the new `value` from `event`.\r\n\t\t//\r\n\t\t// A developer is not supposed to pass this `onBlur` property manually.\r\n\t\t// Instead, `redux-form` passes `onBlur` to this component automatically\r\n\t\t// and this component patches that `onBlur` handler (a hacky way but works).\r\n\t\t//\r\n\t\tonBlur = (event) => {\r\n\t\t\tconst { onBlur } = this.props\r\n\t\t\tconst { value } = this.state\r\n\t\t\tif (onBlur) {\r\n\t\t\t\t// `event` is React's `SyntheticEvent`.\r\n\t\t\t\t// Its `.value` is read-only therefore cloning it.\r\n\t\t\t\tconst _event = {\r\n\t\t\t\t\t...event,\r\n\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t...event.target,\r\n\t\t\t\t\t\tvalue\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Workaround for `redux-form` event detection.\r\n\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t\t\t_event.preventDefault  = event.preventDefault\r\n\t\t\t\treturn onBlur(_event)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tformat(value) {\r\n\t\t\tconst { country, metadata } = this.props\r\n\t\t\treturn formatIncompletePhoneNumber(value, country, metadata)\r\n\t\t}\r\n\r\n\t\tfocus = () => this.input.focus()\r\n\r\n\t\tstoreInput = (ref) => this.input = ref\r\n\r\n\t\trender() {\r\n\t\t\tconst {\r\n\t\t\t\tonChange,\r\n\t\t\t\tonFocus,\r\n\t\t\t\tcountry,\r\n\t\t\t\tmetadata,\r\n\t\t\t\tinputComponent: Input,\r\n\t\t\t\t...rest\r\n\t\t\t} = this.props\r\n\r\n\t\t\t// Prevents React from resetting the `<input/>` caret position.\r\n\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\r\n\t\t\t// https://github.com/facebook/react/issues/955\r\n\t\t\tconst { value } = this.state\r\n\r\n\t\t\t// Deprecated. Should be removed in a future major version release.\r\n\t\t\t// `type=\"tel\"` and `autoComplete=\"tel\"` properties are here\r\n\t\t\t// just for the \"Without country select\" component exported from\r\n\t\t\t// `react-phone-number-input/basic-input` subpackage.\r\n\t\t\t// These two properties will be overwritten by `<PhoneInput/>` properties\r\n\t\t\t// when not used as a \"Without country select\" component.\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<Input\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete=\"tel\"\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tref={this.storeInput}\r\n\t\t\t\t\tvalue={this.format(value)}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}/>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t// The parsed phone number.\r\n\t\t// \"Parsed\" not in a sense of \"E.164\"\r\n\t\t// but rather in a sense of \"having only\r\n\t\t// digits and possibly a leading plus character\".\r\n\t\t// Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\tvalue : PropTypes.string.isRequired,\r\n\r\n\t\t// Updates the `value`.\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t// Toggles the `--focus` CSS class.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\r\n\t\tonFocus : PropTypes.func,\r\n\r\n\t\t// `onBlur` workaround for `redux-form`'s bug.\r\n\t\tonBlur : PropTypes.func,\r\n\r\n\t\t// A two-letter country code for formatting `value`\r\n\t\t// as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t// E.g. \"US\", \"RU\", etc.\r\n\t\t// If no `country` is passed then `value`\r\n\t\t// is formatted as an international phone number.\r\n\t\t// (e.g. `+7 800 555 35 35`)\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t// `libphonenumber-js` metadata.\r\n\t\tmetadata : PropTypes.object.isRequired,\r\n\r\n\t\t// The `<input/>` component.\r\n\t\tinputComponent : PropTypes.elementType.isRequired\r\n\t}\r\n\r\n\tInputBasic.defaultProps = {\r\n\t\tmetadata: defaultMetadata,\r\n\t\tinputComponent: 'input'\r\n\t}\r\n\r\n\treturn reactLifecyclesCompat(InputBasic)\r\n}\r\n\r\nexport default createInput()"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\r\n * This \"component\" is only used to call its\r\n * `.listenToTouches()` and `.stopListeningToTouches()`\r\n * methods manually through a `ref`.\r\n */\n\n\nvar OnTapOutside = (_temp2 = _class = function (_React$Component) {\n  _inherits(OnTapOutside, _React$Component);\n\n  function OnTapOutside() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, OnTapOutside);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OnTapOutside.__proto__ || Object.getPrototypeOf(OnTapOutside)).call.apply(_ref, [this].concat(args))), _this), _this.onTouchStart = function (event) {\n      // Ignore multitouch.\n      if (event.touches.length > 1) {\n        // Reset.\n        return _this.onTouchCancel();\n      }\n\n      var touch = event.changedTouches[0];\n      _this.initialTouchX = touch.clientX;\n      _this.initialTouchY = touch.clientY;\n      _this.touchId = touch.identifier;\n      _this.tapping = true;\n    }, _this.onTouchMove = function (event) {\n      var moveThreshold = _this.props.moveThreshold;\n\n      if (!_this.tapping) {\n        return;\n      }\n\n      var x = void 0;\n      var y = void 0;\n\n      for (var _iterator = event.changedTouches, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref2 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref2 = _i.value;\n        }\n\n        var touch = _ref2;\n\n        if (touch.identifier === _this.touchId) {\n          x = touch.clientX;\n          y = touch.clientY;\n          break;\n        }\n      } // If not the touch.\n\n\n      if (x === undefined) {\n        return;\n      }\n\n      var deltaX = Math.abs(x - _this.initialTouchX);\n      var deltaY = Math.abs(y - _this.initialTouchY); // Reset on touch move.\n\n      if (deltaX > moveThreshold || deltaY > moveThreshold) {\n        _this.onTouchCancel();\n      }\n    }, _this.onTouchEnd = function (event) {\n      if (!_this.tapping) {\n        return;\n      }\n\n      for (var _iterator2 = event.changedTouches, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref3 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref3 = _i2.value;\n        }\n\n        var touch = _ref3;\n\n        if (touch.identifier === _this.touchId) {\n          // Reset.\n          _this.onTouchCancel(); // Handle the tap.\n          // https://developer.mozilla.org/en-US/docs/Web/API/Touch\n\n\n          _this.onTap(event, touch.target);\n\n          break;\n        }\n      }\n    }, _this.onTouchCancel = function () {\n      _this.initialTouchX = undefined;\n      _this.initialTouchY = undefined;\n      _this.touchId = undefined;\n      _this.tapping = false;\n    }, _this.onTap = function (event, target) {\n      var _this$props = _this.props,\n          getContainerNode = _this$props.getContainerNode,\n          getTogglerNode = _this$props.getTogglerNode,\n          onTapOutside = _this$props.onTapOutside;\n\n      if (getContainerNode().contains(target)) {\n        return;\n      }\n\n      if (getTogglerNode) {\n        if (getTogglerNode().contains(target)) {\n          return;\n        }\n      }\n\n      if (onTapOutside) {\n        _this.focusOut = true;\n        onTapOutside(event);\n        _this.focusOut = undefined;\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(OnTapOutside, [{\n    key: 'listenToTouches',\n    value: function listenToTouches() {\n      document.addEventListener('touchstart', this.onTouchStart);\n      document.addEventListener('touchmove', this.onTouchMove);\n      document.addEventListener('touchend', this.onTouchEnd);\n      document.addEventListener('touchcancel', this.onTouchCancel);\n    }\n  }, {\n    key: 'stopListeningToTouches',\n    value: function stopListeningToTouches() {\n      document.removeEventListener('touchstart', this.onTouchStart);\n      document.removeEventListener('touchmove', this.onTouchMove);\n      document.removeEventListener('touchend', this.onTouchEnd);\n      document.removeEventListener('touchcancel', this.onTouchCancel);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.stopListeningToTouches();\n    } // On mobile devices \"blur\" event isn't triggered\n    // when a user taps outside. This is to allow touch scrolling\n    // while not losing focus on an input field or a button.\n    // Adding a manual \"on click\" listener to emulate\n    // \"on blur\" event when user taps outside (to collapse the expandable).\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var children = this.props.children;\n      return children;\n    }\n  }]);\n\n  return OnTapOutside;\n}(_react2.default.Component), _class.propTypes = {\n  onTapOutside: _propTypes2.default.func.isRequired,\n  getTogglerNode: _propTypes2.default.func,\n  getContainerNode: _propTypes2.default.func.isRequired,\n  moveThreshold: _propTypes2.default.number.isRequired\n}, _class.defaultProps = {\n  moveThreshold: 5\n}, _temp2);\nexports.default = OnTapOutside;","map":{"version":3,"sources":["../source/OnTapOutside.js"],"names":["OnTapOutside","Component","propTypes","onTapOutside","getTogglerNode","getContainerNode","moveThreshold","isRequired","defaultProps","document","onTouchStart","event","touch","onTouchMove","x","y","deltaX","Math","deltaY","onTouchEnd","onTouchCancel","onTap","children"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n/**\r\n * This \"component\" is only used to call its\r\n * `.listenToTouches()` and `.stopListeningToTouches()`\r\n * methods manually through a `ref`.\r\n */\r\nexport default class OnTapOutside extends React.Component\r\n{\r\n\tstatic propTypes = {\r\n\t\tonTapOutside: PropTypes.func.isRequired,\r\n\t\tgetTogglerNode: PropTypes.func,\r\n\t\tgetContainerNode: PropTypes.func.isRequired,\r\n\t\tmoveThreshold: PropTypes.number.isRequired\r\n\t}\r\n\r\n\tstatic defaultProps = {\r\n\t\tmoveThreshold: 5\r\n\t}\r\n\r\n\tlistenToTouches()\r\n\t{\r\n\t\tdocument.addEventListener('touchstart', this.onTouchStart)\r\n\t\tdocument.addEventListener('touchmove', this.onTouchMove)\r\n\t\tdocument.addEventListener('touchend', this.onTouchEnd)\r\n\t\tdocument.addEventListener('touchcancel', this.onTouchCancel)\r\n\t}\r\n\r\n\tstopListeningToTouches()\r\n\t{\r\n\t\tdocument.removeEventListener('touchstart', this.onTouchStart)\r\n\t\tdocument.removeEventListener('touchmove', this.onTouchMove)\r\n\t\tdocument.removeEventListener('touchend', this.onTouchEnd)\r\n\t\tdocument.removeEventListener('touchcancel', this.onTouchCancel)\r\n\t}\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tthis.stopListeningToTouches()\r\n\t}\r\n\r\n\tonTouchStart = (event) => {\r\n\t\t// Ignore multitouch.\r\n\t\tif (event.touches.length > 1) {\r\n\t\t\t// Reset.\r\n\t\t\treturn this.onTouchCancel()\r\n\t\t}\r\n\t\tconst touch = event.changedTouches[0]\r\n\t\tthis.initialTouchX = touch.clientX\r\n\t\tthis.initialTouchY = touch.clientY\r\n\t\tthis.touchId = touch.identifier\r\n\t\tthis.tapping = true\r\n\t}\r\n\r\n\tonTouchMove = (event) =>\r\n\t{\r\n\t\tconst { moveThreshold } = this.props\r\n\r\n\t\tif (!this.tapping) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet x\r\n\t\tlet y\r\n\t\tfor (const touch of event.changedTouches) {\r\n\t\t\tif (touch.identifier === this.touchId) {\r\n\t\t\t\tx = touch.clientX\r\n\t\t\t\ty = touch.clientY\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If not the touch.\r\n\t\tif (x === undefined) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst deltaX = Math.abs(x - this.initialTouchX)\r\n\t\tconst deltaY = Math.abs(y - this.initialTouchY)\r\n\r\n\t\t// Reset on touch move.\r\n\t\tif (deltaX > moveThreshold || deltaY > moveThreshold) {\r\n\t\t\tthis.onTouchCancel()\r\n\t\t}\r\n\t}\r\n\r\n\tonTouchEnd = (event) =>\r\n\t{\r\n\t\tif (!this.tapping) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tfor (const touch of event.changedTouches) {\r\n\t\t\tif (touch.identifier === this.touchId) {\r\n\t\t\t\t// Reset.\r\n\t\t\t\tthis.onTouchCancel()\r\n\t\t\t\t// Handle the tap.\r\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Touch\r\n\t\t\t\tthis.onTap(event, touch.target)\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonTouchCancel = () =>\r\n\t{\r\n\t\tthis.initialTouchX = undefined\r\n\t\tthis.initialTouchY = undefined\r\n\t\tthis.touchId = undefined\r\n\t\tthis.tapping = false\r\n\t}\r\n\r\n\t// On mobile devices \"blur\" event isn't triggered\r\n\t// when a user taps outside. This is to allow touch scrolling\r\n\t// while not losing focus on an input field or a button.\r\n\t// Adding a manual \"on click\" listener to emulate\r\n\t// \"on blur\" event when user taps outside (to collapse the expandable).\r\n\tonTap = (event, target) =>\r\n\t{\r\n\t\tconst {\r\n\t\t\tgetContainerNode,\r\n\t\t\tgetTogglerNode,\r\n\t\t\tonTapOutside\r\n\t\t} = this.props\r\n\r\n\t\tif (getContainerNode().contains(target)) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (getTogglerNode) {\r\n\t\t\tif (getTogglerNode().contains(target)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (onTapOutside) {\r\n\t\t\tthis.focusOut = true\r\n\t\t\tonTapOutside(event)\r\n\t\t\tthis.focusOut = undefined\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { children } = this.props\r\n\t\treturn children\r\n\t}\r\n}"]},"metadata":{},"sourceType":"script"}
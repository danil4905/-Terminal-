{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport compare from './tools/semver-compare'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\nvar Metadata = function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    this.v1 = !metadata.version;\n    this.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n    this.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n  }\n\n  _createClass(Metadata, [{\n    key: 'getCountries',\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries);\n    }\n  }, {\n    key: 'hasCountry',\n    value: function hasCountry(country) {\n      return this.metadata.countries[country] !== undefined;\n    }\n  }, {\n    key: 'country',\n    value: function country(_country) {\n      if (!_country) {\n        this._country = undefined;\n        this.country_metadata = undefined;\n        return this;\n      }\n\n      if (!this.hasCountry(_country)) {\n        throw new Error('Unknown country: ' + _country);\n      }\n\n      this._country = _country;\n      this.country_metadata = this.metadata.countries[_country];\n      return this;\n    }\n  }, {\n    key: 'getDefaultCountryMetadataForRegion',\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n    }\n  }, {\n    key: 'countryCallingCode',\n    value: function countryCallingCode() {\n      return this.country_metadata[0];\n    }\n  }, {\n    key: 'IDDPrefix',\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.country_metadata[1];\n    }\n  }, {\n    key: 'defaultIDDPrefix',\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.country_metadata[12];\n    }\n  }, {\n    key: 'nationalNumberPattern',\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.country_metadata[1];\n      return this.country_metadata[2];\n    }\n  }, {\n    key: 'possibleLengths',\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.country_metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: '_getFormats',\n    value: function _getFormats(country_metadata) {\n      return country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: 'formats',\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: 'nationalPrefix',\n    value: function nationalPrefix() {\n      return this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: '_getNationalPrefixFormattingRule',\n    value: function _getNationalPrefixFormattingRule(country_metadata) {\n      return country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: 'nationalPrefixFormattingRule',\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: 'nationalPrefixForParsing',\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix();\n    }\n  }, {\n    key: 'nationalPrefixTransformRule',\n    value: function nationalPrefixTransformRule() {\n      return this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: '_getNationalPrefixIsOptionalWhenFormatting',\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when parsing\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: 'nationalPrefixIsOptionalWhenFormatting',\n    value: function nationalPrefixIsOptionalWhenFormatting() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: 'leadingDigits',\n    value: function leadingDigits() {\n      return this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: 'types',\n    value: function types() {\n      return this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: 'hasTypes',\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: 'type',\n    value: function type(_type) {\n      if (this.hasTypes() && getType(this.types(), _type)) {\n        return new Type(getType(this.types(), _type), this);\n      }\n    }\n  }, {\n    key: 'ext',\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }, {\n    key: 'countryCallingCodes',\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n    //\n    // `country_calling_code` is always valid.\n    // But the actual country may not necessarily be part of the metadata.\n    //\n\n  }, {\n    key: 'chooseCountryByCountryCallingCode',\n    value: function chooseCountryByCountryCallingCode(country_calling_code) {\n      var country = this.countryCallingCodes()[country_calling_code][0]; // Do not want to test this case.\n      // (custom metadata, not all countries).\n\n      /* istanbul ignore else */\n\n      if (this.hasCountry(country)) {\n        this.country(country);\n      }\n    }\n  }, {\n    key: 'selectedCountry',\n    value: function selectedCountry() {\n      return this._country;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: 'pattern',\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: 'format',\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: 'leadingDigitsPatterns',\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: 'nationalPrefixFormattingRule',\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: 'nationalPrefixIsOptionalWhenFormatting',\n    value: function nationalPrefixIsOptionalWhenFormatting() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting();\n    }\n  }, {\n    key: 'nationalPrefixIsMandatoryWhenFormatting',\n    value: function nationalPrefixIsMandatoryWhenFormatting() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: 'usesNationalPrefix',\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a dummy one.\n      this.nationalPrefixFormattingRule() !== '$1' && // Check that national prefix formatting rule actually has national prefix digit(s).\n      /\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''));\n    }\n  }, {\n    key: 'internationalFormat',\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n\nvar Type = function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: 'pattern',\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: 'possibleLengths',\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n    throw new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error('Unknown country: ' + country);\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}","map":{"version":3,"sources":["../source/metadata.js"],"names":["V2","V3","DEFAULT_EXT_PREFIX","Metadata","validateMetadata","metadata","compare","Object","country","country_metadata","formats","type","getType","country_calling_code","Format","Type","types","is_object","type_of"],"mappings":"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","sourcesContent":["import compare from './tools/semver-compare'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nexport default class Metadata\r\n{\r\n\tconstructor(metadata)\r\n\t{\r\n\t\tvalidateMetadata(metadata)\r\n\r\n\t\tthis.metadata = metadata\r\n\r\n\t\tthis.v1 = !metadata.version\r\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1\r\n\t\tthis.v3 = metadata.version !== undefined // && compare(metadata.version, V4) === -1\r\n\t}\r\n\r\n\tgetCountries()\r\n\t{\r\n\t\treturn Object.keys(this.metadata.countries)\r\n\t}\r\n\r\n\thasCountry(country)\r\n\t{\r\n\t\treturn this.metadata.countries[country] !== undefined\r\n\t}\r\n\r\n\tcountry(country)\r\n\t{\r\n\t\tif (!country)\r\n\t\t{\r\n\t\t\tthis._country = undefined\r\n\t\t\tthis.country_metadata = undefined\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tif (!this.hasCountry(country))\r\n\t\t{\r\n\t\t\tthrow new Error(`Unknown country: ${country}`)\r\n\t\t}\r\n\r\n\t\tthis._country = country\r\n\t\tthis.country_metadata = this.metadata.countries[country]\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetDefaultCountryMetadataForRegion()\r\n\t{\r\n\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]]\r\n\t}\r\n\r\n\tcountryCallingCode()\r\n\t{\r\n\t\treturn this.country_metadata[0]\r\n\t}\r\n\r\n\tIDDPrefix()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.country_metadata[1]\r\n\t}\r\n\r\n\tdefaultIDDPrefix()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.country_metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return this.country_metadata[1]\r\n\t\treturn this.country_metadata[2]\r\n\t}\r\n\r\n\tpossibleLengths()\r\n\t{\r\n\t\tif (this.v1) return\r\n\t\treturn this.country_metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(country_metadata)\r\n\t{\r\n\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats()\r\n\t{\r\n\t\tconst formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(country_metadata)\r\n\t{\r\n\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule()\r\n\t{\r\n\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tnationalPrefixForParsing()\r\n\t{\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when parsing\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes()\r\n\t{\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type)\r\n\t{\r\n\t\tif (this.hasTypes() && getType(this.types(), type))\r\n\t\t{\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n\r\n\tcountryCallingCodes()\r\n\t{\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\t//\r\n\t// `country_calling_code` is always valid.\r\n\t// But the actual country may not necessarily be part of the metadata.\r\n\t//\r\n\tchooseCountryByCountryCallingCode(country_calling_code)\r\n\t{\r\n\t\tconst country = this.countryCallingCodes()[country_calling_code][0]\r\n\r\n\t\t// Do not want to test this case.\r\n\t\t// (custom metadata, not all countries).\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.hasCountry(country))\r\n\t\t{\r\n\t\t\tthis.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\tselectedCountry()\r\n\t{\r\n\t\treturn this._country\r\n\t}\r\n}\r\n\r\nclass Format\r\n{\r\n\tconstructor(format, metadata)\r\n\t{\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern()\r\n\t{\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat()\r\n\t{\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns()\r\n\t{\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule()\r\n\t{\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormatting()\r\n\t{\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix()\r\n\t{\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\r\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\r\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\r\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\r\n\t}\r\n\r\n\tinternationalFormat()\r\n\t{\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\nclass Type\r\n{\r\n\tconstructor(type, metadata)\r\n\t{\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern()\r\n\t{\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths()\r\n\t{\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type)\r\n{\r\n\tswitch (type)\r\n\t{\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata)\r\n{\r\n\tif (!metadata)\r\n\t{\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif\r\n\t(\r\n\t\t!is_object(metadata) ||\r\n\t\t!is_object(metadata.countries) ||\r\n\t\t(!is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries))\r\n\t)\r\n\t{\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` and \\`.country_calling_codes\\` child object properties. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata)\r\n{\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}"]},"metadata":{},"sourceType":"module"}
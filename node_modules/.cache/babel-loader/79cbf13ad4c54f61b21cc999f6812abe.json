{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react3 = require('input-format/react');\n\nvar _react4 = _interopRequireDefault(_react3);\n\nvar _core = require('libphonenumber-js/core');\n\nvar _inputValuePrefix = require('./inputValuePrefix');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n} // This is just a rewrite of `./InputSmart.js` using Hooks.\n// `./InputSmart.js` wasn't rewritten in Hooks directly\n// due to the legacy compatibility with older React versions.\n//\n// Plus the added support for `international` property.\n\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\n\n\nfunction createInput(defaultMetadata) {\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, ['country', 'international', 'metadata']);\n\n    var format = (0, _react.useCallback)(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new _core.AsYouType(country, metadata);\n      var prefix = (0, _inputValuePrefix.getInputValuePrefix)(country, international, metadata); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = (0, _inputValuePrefix.removeInputValuePrefix)(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = (0, _inputValuePrefix.removeInputValuePrefix)(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return _react2.default.createElement(_react4.default, _extends({}, rest, {\n      ref: ref,\n      parse: _core.parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = _react2.default.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: _propTypes2.default.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: _propTypes2.default.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: _propTypes2.default.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\n\nexports.default = createInput();","map":{"version":3,"sources":["../source/InputSmartHooks.js"],"names":["createInput","country","international","metadata","rest","format","formatter","prefix","text","template","InputSmart","isRequired","defaultMetadata"],"mappings":";;;;;;;;;;;;;;;;;;;;QAiBgBA,W,GAAAA,W;;AAXhB,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,IAAA,iBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;;;;;;;;;;;;;;;;;EAXA;AACA;AACA;AACA;AACA;;AASA;;;;;;AAIO,SAAA,WAAA,CAAA,eAAA,EACP;AACC,WAAA,UAAA,CAAA,IAAA,EAAA,GAAA,EAKQ;AAAA,QAJPC,OAIO,GAAA,IAAA,CAJPA,OAIO;AAAA,QAHPC,aAGO,GAAA,IAAA,CAHPA,aAGO;AAAA,QAFPC,QAEO,GAAA,IAAA,CAFPA,QAEO;AAAA,QADJC,IACI,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,SAAA,EAAA,eAAA,EAAA,UAAA,CAAA,CAAA;;AACP,QAAMC,MAAAA,GAAS,CAAA,GAAA,MAAA,CAAA,WAAA,EAAY,UAAA,KAAA,EAAW;AACrC;AACA,UAAMC,SAAAA,GAAY,IAAA,KAAA,CAAA,SAAA,CAAA,OAAA,EAAlB,QAAkB,CAAlB;AACA,UAAMC,MAAAA,GAAS,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAA,OAAA,EAAA,aAAA,EAAf,QAAe,CAAf,CAHqC,CAIrC;;AACA,UAAIC,IAAAA,GAAOF,SAAAA,CAAAA,KAAAA,CAAgBC,MAAAA,GAA3B,KAAWD,CAAX;AACA,UAAIG,QAAAA,GAAWH,SAAAA,CAAf,WAAeA,EAAf;;AACA,UAAA,MAAA,EAAY;AACXE,QAAAA,IAAAA,GAAO,CAAA,GAAA,iBAAA,CAAA,sBAAA,EAAA,IAAA,EAAPA,MAAO,CAAPA,CADW,CAEX;;AACA,YAAA,QAAA,EAAc;AACbC,UAAAA,QAAAA,GAAW,CAAA,GAAA,iBAAA,CAAA,sBAAA,EAAA,QAAA,EAAXA,MAAW,CAAXA;AACA;AACD;;AACD,aAAO;AACND,QAAAA,IAAAA,EADM,IAAA;AAENC,QAAAA,QAAAA,EAAAA;AAFM,OAAP;AAdc,KAAA,EAkBZ,CAAA,OAAA,EAlBH,QAkBG,CAlBY,CAAf;AAmBA,WACC,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,OAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEC,MAAA,GAAA,EAFD,GAAA;AAGC,MAAA,KAAA,EAAA,KAAA,CAHD,yBAAA;AAIC,MAAA,MAAA,EALF;AACC,KAAA,CAAA,CADD;AAOA;;AAEDC,EAAAA,UAAAA,GAAa,OAAA,CAAA,OAAA,CAAA,UAAA,CAAbA,UAAa,CAAbA;AAEAA,EAAAA,UAAAA,CAAAA,SAAAA,GAAuB;AACtB;;;;;;;;;;AAUAT,IAAAA,OAAAA,EAAS,WAAA,CAAA,OAAA,CAXa,MAAA;;AAatB;;;;;;;;;;AAUAC,IAAAA,aAAAA,EAAe,WAAA,CAAA,OAAA,CAvBO,IAAA;;AAyBtB;;;AAGAC,IAAAA,QAAAA,EAAU,WAAA,CAAA,OAAA,CAAA,MAAA,CAAiBQ;AA5BL,GAAvBD;AA+BAA,EAAAA,UAAAA,CAAAA,YAAAA,GAA0B;AACzBP,IAAAA,QAAAA,EAAUS;AADe,GAA1BF;AAIA,SAAA,UAAA;AACA;;kBAEcV,WAAAA,E","sourcesContent":["// This is just a rewrite of `./InputSmart.js` using Hooks.\r\n// `./InputSmart.js` wasn't rewritten in Hooks directly\r\n// due to the legacy compatibility with older React versions.\r\n//\r\n// Plus the added support for `international` property.\r\n\r\nimport React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from 'input-format/react'\r\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix'\r\n\r\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\r\nexport function createInput(defaultMetadata)\r\n{\r\n\tfunction InputSmart({\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\tmetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst format = useCallback((value) => {\r\n\t\t\t// \"As you type\" formatter.\r\n\t\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t\tconst prefix = getInputValuePrefix(country, international, metadata)\r\n\t\t\t// Format the number.\r\n\t\t\tlet text = formatter.input(prefix + value)\r\n\t\t\tlet template = formatter.getTemplate()\r\n\t\t\tif (prefix) {\r\n\t\t\t\ttext = removeInputValuePrefix(text, prefix)\r\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\r\n\t\t\t\tif (template) {\r\n\t\t\t\t\ttemplate = removeInputValuePrefix(template, prefix)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttext,\r\n\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}, [country, metadata])\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tparse={parsePhoneNumberCharacter}\r\n\t\t\t\tformat={format}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputSmart = React.forwardRef(InputSmart)\r\n\r\n\tInputSmart.propTypes = {\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tInputSmart.defaultProps = {\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn InputSmart\r\n}\r\n\r\nexport default createInput()"]},"metadata":{},"sourceType":"script"}
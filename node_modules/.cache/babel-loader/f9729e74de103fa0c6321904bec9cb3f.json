{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _class2, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _ExpandableList = require('./ExpandableList');\n\nvar _ExpandableList2 = _interopRequireDefault(_ExpandableList);\n\nvar _List = require('./List');\n\nvar _List2 = _interopRequireDefault(_List);\n\nvar _TextInputLabel = require('./TextInputLabel');\n\nvar _TextInputLabel2 = _interopRequireDefault(_TextInputLabel);\n\nvar _Ellipsis = require('./Ellipsis');\n\nvar _Ellipsis2 = _interopRequireDefault(_Ellipsis);\n\nvar _Divider = require('./Divider');\n\nvar _Divider2 = _interopRequireDefault(_Divider);\n\nvar _WithError = require('./WithError');\n\nvar _WithError2 = _interopRequireDefault(_WithError);\n\nvar _reduxForm = require('./utility/redux-form');\n\nvar _focus = require('./utility/focus');\n\nvar _dom = require('./utility/dom');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\nvar empty_value_option_value = '';\n\nvar Select = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp2 = _class2 = function (_PureComponent) {\n  _inherits(Select, _PureComponent);\n\n  function Select() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Select);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Select.__proto__ || Object.getPrototypeOf(Select)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.focus = function () {\n      return _this.select.focus();\n    }, _this.focusToggler = function () {\n      return _this.selectButton.focus();\n    }, _this.onCollapse = function (_ref2) {\n      var focusOut = _ref2.focusOut;\n\n      _this.setState({\n        isExpanded: false\n      });\n\n      if (!focusOut) {\n        if (_this.isUsingKeyboard) {\n          _this.focus();\n        } else {\n          _this.focusToggler();\n        }\n      }\n    }, _this.onExpand = function () {\n      return _this.setState({\n        isExpanded: true\n      });\n    }, _this.expand = function () {\n      return _this.list.expand();\n    }, _this.collapse = function () {\n      return _this.list.collapse();\n    }, _this.toggle = function () {\n      return _this.list.toggle();\n    }, _this.storeListRef = function (ref) {\n      return _this.list = ref;\n    }, _this.storeSelectNode = function (node) {\n      return _this.select = node;\n    }, _this.storeSelectButton = function (node) {\n      return _this.selectButton = node;\n    }, _this.storeInputComponentNode = function (node) {\n      return _this.inputComponentNode = node;\n    }, _this.storeContainerNode = function (node) {\n      return _this.container = node;\n    }, _this.getSelectButton = function () {\n      return _this.selectButton;\n    }, _this.nativeSelectOnKeyDown = function (event) {\n      _this.isUsingKeyboard = true;\n\n      if (_this.shouldShowOptionsList()) {\n        // Native select is the main focusable element now\n        // even when the custom select is rendered.\n        // this.focusToggler()\n        _this.onKeyDownFromNativeSelect = true;\n\n        _this.onKeyDown(event);\n      }\n    }, _this.nativeSelectOnMouseDown = function (event) {\n      if (_this.shouldShowOptionsList()) {\n        event.preventDefault(); // Native select is the main focusable element now\n        // even when the custom select is rendered.\n        // this.focusToggler()\n\n        _this.toggle();\n      }\n    }, _this.nativeSelectOnChange = function (event) {\n      var _this$props = _this.props,\n          native = _this$props.native,\n          nativeExpanded = _this$props.nativeExpanded;\n      var value = event.target.value; // Convert back from an empty string to `undefined`\n\n      if (value === empty_value_option_value) {\n        // `null` is not accounted for, use `undefined` instead.\n        value = undefined;\n      }\n\n      _this.setValue(value); // Firefox has a bug:\n      // Spacebar key on native `<select/>` is not being \"preventDefault\"ed.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1428992\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1019630\n      // https://stackoverflow.com/questions/15141398/cannot-preventdefault-via-firefox-on-a-select\n      // This workaround hides the custom `<Select/>`\n      // when a user selects something in the native `<select/>`\n      // which expands over the custom one in Firefox due to the bug.\n\n\n      if (navigator.userAgent.toLowerCase().indexOf('firefox') >= 0) {\n        if (!native && !nativeExpanded) {\n          _this.collapse();\n        }\n      }\n    }, _this.onClick = function (event) {\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          nativeExpanded = _this$props2.nativeExpanded;\n\n      if (!disabled) {\n        _this.toggle();\n      }\n    }, _this.onKeyDown = function (event) {\n      var _this$props3 = _this.props,\n          disabled = _this$props3.disabled,\n          value = _this$props3.value,\n          required = _this$props3.required;\n      var isExpanded = _this.state.isExpanded; // Reset \"event came from native select\" flag.\n\n      var fromNativeSelect = _this.onKeyDownFromNativeSelect;\n      _this.onKeyDownFromNativeSelect = false;\n\n      if (disabled) {\n        return;\n      }\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (!isExpanded) {\n        if ((0, _dom.submitFormOnCtrlEnter)(event, _this.selectButton)) {\n          return;\n        }\n      }\n\n      if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        // \"Up\" arrow.\n        // Select the previous item (if present).\n        case 38: // \"Down\" arrow.\n        // Select the next item (if present).\n\n        case 40:\n          // Firefox has a bug:\n          // Up/Down arrow keys on native `<select/>` are not being \"preventDefault\"ed.\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1428992\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1019630\n          // https://stackoverflow.com/questions/15141398/cannot-preventdefault-via-firefox-on-a-select\n          // This workaround doesn't expand the custom `<Select/>`\n          // when a user presses an Up/Down arrow key on the native `<select/>`.\n          if (navigator.userAgent.toLowerCase().indexOf('firefox') >= 0) {\n            return;\n          }\n\n          return _this.list.onKeyDown(event);\n        // \"Enter\".\n\n        case 13:\n          // Submit containing `<form/>`.\n          // Expand otherwise.\n          if (required && isEmptyValue(value) || !(0, _dom.submitContainingForm)(_this.selectButton)) {\n            _this.expand();\n          }\n\n          return event.preventDefault();\n        // \"Spacebar\".\n\n        case 32:\n          if (fromNativeSelect) {\n            // Firefox has a bug:\n            // Spacebar key on native `<select/>` is not being \"preventDefault\"ed.\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1428992\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1019630\n            // https://stackoverflow.com/questions/15141398/cannot-preventdefault-via-firefox-on-a-select\n            event.preventDefault();\n\n            _this.expand();\n          }\n\n          return;\n      }\n    }, _this.setValue = function (newValue) {\n      var _this$props4 = _this.props,\n          value = _this$props4.value,\n          onChange = _this$props4.onChange; // Call `onChange` only if the `value` did change.\n\n      if (newValue !== value) {\n        onChange(newValue);\n      }\n    }, _this.onBlur = function (event) {\n      clearTimeout(_this.blurTimer);\n      _this.blurTimer = (0, _focus.onBlur)(event, _this.onFocusOut, function () {\n        return _this.container;\n      });\n    }, _this.onFocusOut = function (event) {\n      var _this$props5 = _this.props,\n          native = _this$props5.native,\n          nativeExpanded = _this$props5.nativeExpanded,\n          onBlur = _this$props5.onBlur,\n          value = _this$props5.value;\n\n      if (!native && !nativeExpanded) {\n        // `window.rruiCollapseOnFocusOut` can be used\n        // for debugging expandable contents.\n        if (window.rruiCollapseOnFocusOut !== false) {\n          _this.collapse();\n        }\n      } // // Collapse the options `<List/>` if it's expanded.\n      // if (this.list) {\n      // \tthis.list.onBlur(event)\n      // }\n\n\n      _this._onFocusOut();\n\n      if (onBlur) {\n        (0, _reduxForm.onBlurForReduxForm)(onBlur, event, value);\n      }\n    }, _this.onFocusIn = function () {\n      return _this.setState({\n        isFocused: true\n      });\n    }, _this._onFocusOut = function () {\n      return _this.setState({\n        isFocused: false\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // On mobile devices the <button/> is focused instead of <select/>\n  // because when <select/> is focused then native mobile <select/> is expanded.\n\n\n  _createClass(Select, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.blurTimer);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          upward = _props.upward,\n          icon = _props.icon,\n          compact = _props.compact,\n          scroll = _props.scroll,\n          scrollMaxItems = _props.scrollMaxItems,\n          scrollIntoView = _props.scrollIntoView,\n          alignment = _props.alignment,\n          saveOnIcons = _props.saveOnIcons,\n          native = _props.native,\n          disabled = _props.disabled,\n          required = _props.required,\n          placeholder = _props.placeholder,\n          options = _props.options,\n          value = _props.value,\n          onChange = _props.onChange,\n          indicateInvalid = _props.indicateInvalid,\n          error = _props.error,\n          closeButtonIcon = _props.closeButtonIcon,\n          closeLabel = _props.closeLabel,\n          optionComponent = _props.optionComponent,\n          selectedOptionComponent = _props.selectedOptionComponent,\n          wait = _props.wait,\n          style = _props.style,\n          className = _props.className;\n      var _state = this.state,\n          isExpanded = _state.isExpanded,\n          isFocused = _state.isFocused;\n      var topLabel = this.getTopLabel();\n      return _react2.default.createElement(_WithError2.default, {\n        setRef: this.storeContainerNode,\n        error: error,\n        indicateInvalid: indicateInvalid,\n        style: style,\n        className: (0, _classnames2.default)(className, 'rrui__select', {\n          'rrui__select--compact': compact || icon,\n          'rrui__select--focus': isFocused\n        })\n      }, _react2.default.createElement('div', {\n        ref: this.storeInputComponentNode,\n        style: selectedOptionComponent && DISPLAY_FLEX,\n        className: selectedOptionComponent ? undefined : 'rrui__input'\n      }, wait && _react2.default.createElement(_Ellipsis2.default, null), this.renderNativeSelect(), !native && this.renderSelectButton(), topLabel && _react2.default.createElement(_TextInputLabel2.default, {\n        'aria-hidden': true,\n        value: value,\n        required: required,\n        invalid: indicateInvalid && error,\n        floats: false\n      }, topLabel), this.shouldShowOptionsList() && _react2.default.createElement(_ExpandableList2.default, {\n        ref: this.storeListRef,\n        'aria-label': this.getAriaLabel(),\n        'aria-required': required && isEmptyValue(value) ? true : undefined,\n        'aria-invalid': error && indicateInvalid ? true : undefined,\n        upward: upward,\n        alignment: alignment,\n        scrollIntoView: scrollIntoView,\n        scrollMaxItems: scroll === false ? 0 : scrollMaxItems,\n        tabbable: false,\n        value: value,\n        onChange: this.setValue,\n        onCollapse: this.onCollapse,\n        onExpand: this.onExpand,\n        getTogglerNode: this.getSelectButton,\n        onFocusIn: this.onFocusIn,\n        onFocusOut: this.onFocusOut,\n        closeButtonIcon: closeButtonIcon,\n        closeLabel: closeLabel,\n        className: (0, _classnames2.default)('rrui__shadow', 'rrui__options-list', {\n          'rrui__options-list--left-aligned': alignment === 'left',\n          'rrui__options-list--right-aligned': alignment === 'right'\n        })\n      }, options.map(function (option, i) {\n        return _react2.default.createElement(_List2.default.Item, {\n          key: i,\n          value: option.value,\n          icon: option.divider || saveOnIcons ? undefined : option.icon,\n          component: option.divider ? undefined : optionComponent,\n          item: option.divider ? undefined : optionComponent ? option : undefined\n        }, option.divider ? _react2.default.createElement(_Divider2.default, null) : optionComponent ? undefined : option.content ? option.content(option) : option.label);\n      }))));\n    }\n  }, {\n    key: 'renderSelectButton',\n    value: function renderSelectButton() {\n      var _props2 = this.props,\n          wait = _props2.wait,\n          value = _props2.value,\n          disabled = _props2.disabled,\n          required = _props2.required,\n          icon = _props2.icon,\n          title = _props2.title,\n          native = _props2.native,\n          nativeExpanded = _props2.nativeExpanded,\n          toggleClassName = _props2.toggleClassName,\n          selectedOptionClassName = _props2.selectedOptionClassName,\n          selectedOptionInvalidClassName = _props2.selectedOptionInvalidClassName,\n          selectedOptionDisabledClassName = _props2.selectedOptionDisabledClassName,\n          indicateInvalid = _props2.indicateInvalid,\n          error = _props2.error,\n          SelectedOptionComponent = _props2.selectedOptionComponent;\n      var isExpanded = this.state.isExpanded;\n      var selected = this.getSelectedOption();\n      var selectedOptionLabel = selected && selected.label || this.getPlaceholder();\n      var showIconOnly = icon && selected && selected.icon; // ARIA (accessibility) roles info:\n      // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html\n      //\n      // `aria-haspopup`:\n      // https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup\n      // WAI-ARIA 1.1 is not yet supported, so not using `aria-haspopup=\"listbox\"`.\n      // This button could be focusable in case of !native && !nativeExpanded.\n      // In case of nativeExpanded if this button was focusable then the user would\n      // tab to the button and press Spacebar key and there would be no way to\n      // expand the native select so the keyboard user would be stuck.\n      // Because of this, this button is never tabbable and native select always is.\n\n      return _react2.default.createElement('button', {\n        ref: this.storeSelectButton,\n        type: 'button',\n        disabled: disabled,\n        onClick: this.onClick,\n        onKeyDown: this.onKeyDown,\n        onFocus: this.onFocusIn,\n        onBlur: this.onBlur,\n        tabIndex: -1,\n        title: title,\n        'aria-label': this.getAriaLabel() || (showIconOnly ? selectedOptionLabel : undefined),\n        'aria-expanded': isExpanded ? true : false,\n        className: (0, _classnames2.default)('rrui__button-reset', 'rrui__outline', 'rrui__select__button', toggleClassName, selectedOptionClassName, selectedOptionInvalidClassName && SelectedOptionComponent && indicateInvalid && error, selectedOptionDisabledClassName && SelectedOptionComponent && disabled, {\n          'rrui__input-element': !SelectedOptionComponent,\n          'rrui__select__button--empty': !SelectedOptionComponent && isEmptyValue(value) && !this.hasEmptyOption(),\n          'rrui__select__button--invalid': !SelectedOptionComponent && indicateInvalid && error,\n          'rrui__select__button--disabled': !SelectedOptionComponent && disabled\n        })\n      }, SelectedOptionComponent ? _react2.default.createElement(SelectedOptionComponent, _extends({\n        wait: wait\n      }, selected)) : _react2.default.createElement(DefaultSelectedOptionComponent, {\n        indicateRequired: !this.getTopLabel() && required && isEmptyValue(value),\n        wait: wait,\n        value: value,\n        label: selectedOptionLabel,\n        icon: showIconOnly ? _react2.default.createElement(selected.icon, {\n          value: value,\n          label: selectedOptionLabel\n        }) : undefined\n      }));\n    }\n  }, {\n    key: 'renderNativeSelect',\n    value: function renderNativeSelect() {\n      var _props3 = this.props,\n          name = _props3.name,\n          value = _props3.value,\n          label = _props3.label,\n          disabled = _props3.disabled,\n          required = _props3.required,\n          native = _props3.native,\n          nativeExpanded = _props3.nativeExpanded,\n          error = _props3.error,\n          indicateInvalid = _props3.indicateInvalid,\n          tabIndex = _props3.tabIndex;\n      return _react2.default.createElement('select', {\n        ref: this.storeSelectNode,\n        name: name,\n        value: isEmptyValue(value) ? empty_value_option_value : value,\n        disabled: disabled,\n        onKeyDown: this.nativeSelectOnKeyDown,\n        onMouseDown: this.nativeSelectOnMouseDown,\n        onChange: this.nativeSelectOnChange,\n        onFocus: this.onFocusIn,\n        onBlur: this.onBlur,\n        tabIndex: tabIndex,\n        'aria-label': this.getAriaLabel(),\n        'aria-required': required && isEmptyValue(value) ? true : undefined,\n        'aria-invalid': error && indicateInvalid ? true : undefined,\n        className: (0, _classnames2.default)( // `:focus` style is implemented via border color\n        // so outline can be muted safely here.\n        'rrui__outline', 'rrui__select__native', {\n          'rrui__select__native--overlay': !native,\n          'rrui__select__native--invalid': indicateInvalid && error\n        })\n      }, this.renderNativeSelectOptions());\n    }\n  }, {\n    key: 'renderNativeSelectOptions',\n    value: function renderNativeSelectOptions() {\n      var _this2 = this;\n\n      var _props4 = this.props,\n          options = _props4.options,\n          value = _props4.value,\n          placeholder = _props4.placeholder;\n      var empty_option_present = false;\n      var rendered_options = options.map(function (option, i) {\n        var value = option.value,\n            label = option.label,\n            divider = option.divider;\n\n        if (!divider && isEmptyValue(value)) {\n          empty_option_present = true;\n          value = empty_value_option_value;\n        }\n\n        return _this2.renderNativeSelectOption(i, value, label, divider === true, divider);\n      });\n\n      if (isEmptyValue(value) && !empty_option_present) {\n        rendered_options.unshift(this.renderNativeSelectOption(-1, undefined, placeholder, true));\n      }\n\n      return rendered_options;\n    }\n  }, {\n    key: 'renderNativeSelectOption',\n    value: function renderNativeSelectOption(key, value, label, nonSelectable, isDivider) {\n      return _react2.default.createElement('option', {\n        key: key,\n        value: isEmptyValue(value) ? '' : value,\n        hidden: nonSelectable && !isDivider ? true : undefined,\n        disabled: nonSelectable ? true : undefined,\n        className: (0, _classnames2.default)('rrui__select__native-option', {\n          'rrui__select__native-option--divider': isDivider\n        })\n      }, label);\n    }\n  }, {\n    key: 'hasEmptyOption',\n    value: function hasEmptyOption() {\n      var options = this.props.options;\n\n      for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref3 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref3 = _i.value;\n        }\n\n        var option = _ref3;\n\n        if (!option.divider && isEmptyValue(option.value)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: 'getSelectedOption',\n    value: function getSelectedOption() {\n      var _props5 = this.props,\n          options = _props5.options,\n          value = _props5.value;\n\n      for (var _iterator2 = options, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref4;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref4 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref4 = _i2.value;\n        }\n\n        var option = _ref4;\n\n        if (!option.divider && option.value === value) {\n          return option;\n        }\n      }\n    }\n  }, {\n    key: 'getAriaLabel',\n    value: function getAriaLabel() {\n      var _props6 = this.props,\n          ariaLabel = _props6.ariaLabel,\n          label = _props6.label;\n      return this.props['aria-label'] || ariaLabel || label;\n    }\n  }, {\n    key: 'getTopLabel',\n    value: function getTopLabel() {\n      var _props7 = this.props,\n          label = _props7.label,\n          placeholder = _props7.placeholder,\n          value = _props7.value;\n\n      if (isEmptyValue(value) && !placeholder) {\n        // Label will be shown in placeholder's place\n        // so don't show it as a label to prevent duplication.\n        return;\n      }\n\n      return label;\n    }\n  }, {\n    key: 'getPlaceholder',\n    value: function getPlaceholder() {\n      var _props8 = this.props,\n          label = _props8.label,\n          placeholder = _props8.placeholder,\n          value = _props8.value;\n\n      if (isEmptyValue(value)) {\n        return placeholder || label;\n      }\n    }\n  }, {\n    key: 'shouldShowOptionsList',\n    value: function shouldShowOptionsList() {\n      var _props9 = this.props,\n          native = _props9.native,\n          nativeExpanded = _props9.nativeExpanded;\n      return !native && !nativeExpanded;\n    }\n  }]);\n\n  return Select;\n}(PureComponent), _class2.propTypes = {\n  // A list of selectable options\n  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    // Option value (may be `undefined`)\n    value: _propTypes2.default.any,\n    // Could restrict it to stringifiable types\n    // but I guess this is not required\n    // and one could even use `object`s as `value`s.\n    // // Option value (may be `undefined`)\n    // value : PropTypes.oneOfType([\n    // \tPropTypes.string,\n    // \tPropTypes.number,\n    // \tPropTypes.bool\n    // ]),\n    // Option label (may be `undefined`)\n    label: _propTypes2.default.string,\n    // Option icon\n    icon: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),\n    // (deprecated, use `optionComponent` instead)\n    // Render custom content (a React component).\n    // Receives `{ value, label }` properties.\n    content: _propTypes2.default.func\n  })).isRequired,\n  // HTML form input `name` attribute\n  name: _propTypes2.default.string,\n  // Label which is placed above the select\n  label: _propTypes2.default.string,\n  // Placeholder (like \"Choose\")\n  placeholder: _propTypes2.default.string,\n  // Selected option component.\n  // (when `<Select/>` is not expanded).\n  // Receives properties:\n  // `{ ...option }` — All properties of the selected `option` such as `value`, `label`, etc. Each `option` must have a `value` and a `label` (`value` may be `undefined`).\n  // `wait` — Passed through `wait` property of the `<Select/>` component. `<Autocomplete/>` renders a `<Select/>` internally and passes `wait={true}` when it's loading options.\n  // Can only contain \"inline\" elements like `<span/>`,\n  // not `<div/>`s, `<section/`>s, `<h1/>`s or `<p/>`s,\n  // because `<button/>`s can't contain \"block\" elements.\n  // `display: block` can still be set on `<span/>`s and other \"inline\" elements.\n  selectedOptionComponent: _propTypes2.default.elementType,\n  // Option component.\n  // (when `<Select/>` is expanded).\n  // Receives properties:\n  // * `{ ...option }` — All properties of an `option` such as `value`, `label`, etc. Each `option` must have a `value` and a `label` (`value` may be `undefined`).\n  // * `selected: boolean` — If this option is selected.\n  // * `focused: boolean` — If this option is focused.\n  // * `disabled: boolean` — If this option is disabled. Seems to be not used for now.\n  // Can only contain \"inline\" elements like `<span/>`,\n  // not `<div/>`s, `<section/`>s, `<h1/>`s or `<p/>`s,\n  // because `<button/>`s can't contain \"block\" elements.\n  // `display: block` can still be set on `<span/>`s and other \"inline\" elements.\n  optionComponent: _propTypes2.default.elementType,\n  // Options list alignment.\n  // Is \"left\" by default.\n  alignment: _propTypes2.default.string,\n  // Whether to use native `<select/>`\n  native: _propTypes2.default.bool.isRequired,\n  // Whether to use native `<select/>` when expanded\n  nativeExpanded: _propTypes2.default.bool.isRequired,\n  // Show icon only for selected item,\n  // and only if `icon` is `true`.\n  saveOnIcons: _propTypes2.default.bool.isRequired,\n  // Disables this control\n  disabled: _propTypes2.default.bool,\n  // Set to `true` to mark the field as required\n  required: _propTypes2.default.bool.isRequired,\n  // Set to `true` to display the loading indicator\n  wait: _propTypes2.default.bool.isRequired,\n  // Selected option value\n  value: _propTypes2.default.any,\n  // Is called when an option is selected\n  onChange: _propTypes2.default.func,\n  // Is called when the select is blurred.\n  // This `onBlur` interceptor is a workaround for `redux-form`,\n  // so that it gets the parsed `value` in its `onBlur` handler,\n  // not the formatted text.\n  onBlur: _propTypes2.default.func,\n  // If `scroll` is `false`, then options list\n  // is not limited in height.\n  // Is `true` by default (scrollable).\n  scroll: _propTypes2.default.bool.isRequired,\n  // Component CSS class\n  className: _propTypes2.default.string,\n  // `<button/>` toggler CSS class\n  // (deprecated name, use `selectedOptionClassName` property name instead)\n  toggleClassName: _propTypes2.default.string,\n  // Selected option `<button/>` CSS class.\n  selectedOptionClassName: _propTypes2.default.string,\n  // Selected option `<button/>` CSS class when `error` property is passed.\n  selectedOptionInvalidClassName: _propTypes2.default.string,\n  // Selected option `<button/>` CSS class when `disabled` property is passed.\n  selectedOptionDisabledClassName: _propTypes2.default.string,\n  // CSS style object\n  style: _propTypes2.default.object,\n  // If this flag is set to `true`,\n  // and `icon` is specified for a selected option,\n  // then the selected option will be displayed\n  // as icon only, without the label.\n  icon: _propTypes2.default.bool,\n  // If this flag is set to `true`,\n  // then it makes `<Select/>` not stretch itself\n  // to 100% width by making it `inline-block`.\n  // Is set to `true` when `icon` is `true`\n  // because it makes sense.\n  compact: _propTypes2.default.bool,\n  // HTML `tabindex` attribute\n  tabIndex: _propTypes2.default.number,\n  // `aria-label` for the `<Select/>`'s `<button/>`.\n  // Deprecated, use `aria-label` instead.\n  ariaLabel: _propTypes2.default.string\n}, _class2.defaultProps = {\n  native: false,\n  nativeExpanded: false,\n  saveOnIcons: false,\n  // Set to `true` to mark the field as required\n  required: false,\n  // Show `error` (if passed).\n  indicateInvalid: true,\n  // Set to `true` to display the loading indicator\n  wait: false,\n  // Will show scrollbar on overflow.\n  scroll: true,\n  alignment: 'left'\n}, _temp2)) || _class; // Using indexes instead for keys.\n// // There can be an `undefined` value,\n// // so just `{ value }` won't do here.\n// function getOptionKey(value) {\n// \treturn isEmptyValue(value) ? '@@rrui/empty' : value\n// }\n\n\nexports.default = Select;\n\nfunction isEmptyValue(value) {\n  return value === null || value === undefined;\n}\n\nfunction DefaultSelectedOptionComponent(_ref5) {\n  var value = _ref5.value,\n      label = _ref5.label,\n      icon = _ref5.icon,\n      indicateRequired = _ref5.indicateRequired,\n      wait = _ref5.wait; // The `<span/>` wrapper is required for vertical centering.\n  // http://stackoverflow.com/questions/35464067/flexbox-not-working-on-button-element-in-some-browsers\n\n  return _react2.default.createElement('span', {\n    className: 'rrui__select__selected-content'\n  }, _react2.default.createElement('span', {\n    className: (0, _classnames2.default)('rrui__select__selected-label', 'rrui__text-line', {\n      'rrui__select__selected-label--required': indicateRequired\n    })\n  }, icon || label), !wait && _react2.default.createElement('span', {\n    className: 'rrui__select__arrow'\n  }));\n}\n\nDefaultSelectedOptionComponent.propTypes = {\n  value: _propTypes2.default.any,\n  label: _propTypes2.default.string,\n  icon: _propTypes2.default.node,\n  indicateRequired: _propTypes2.default.bool,\n  wait: _propTypes2.default.bool\n  /* `display: flex` fixes the incorrect toggler `<button/>` height\r\n     in cases when custom `selectedOptionComponent` is used.\r\n     It also removes the requirement for the `selectedOptionComponent`\r\n     containing `<span/>` to be `display: block`. */\n\n};\nvar DISPLAY_FLEX = {\n  display: 'flex'\n};","map":{"version":3,"sources":["../source/Select.js"],"names":["PureComponent","empty_value_option_value","Select","propTypes","options","value","label","icon","content","func","name","placeholder","selectedOptionComponent","optionComponent","alignment","native","nativeExpanded","saveOnIcons","disabled","required","wait","onChange","onBlur","scroll","className","toggleClassName","selectedOptionClassName","selectedOptionInvalidClassName","selectedOptionDisabledClassName","style","compact","tabIndex","ariaLabel","string","defaultProps","indicateInvalid","state","focus","focusToggler","onCollapse","focusOut","isExpanded","onExpand","expand","collapse","toggle","storeListRef","storeSelectNode","storeSelectButton","storeInputComponentNode","storeContainerNode","getSelectButton","clearTimeout","upward","scrollMaxItems","scrollIntoView","error","closeButtonIcon","closeLabel","isFocused","topLabel","isEmptyValue","option","title","SelectedOptionComponent","selected","selectedOptionLabel","showIconOnly","empty_option_present","rendered_options","divider","key","nonSelectable","isDivider","nativeSelectOnKeyDown","nativeSelectOnMouseDown","event","nativeSelectOnChange","navigator","onClick","onKeyDown","fromNativeSelect","setValue","newValue","onFocusOut","window","onFocusIn","_onFocusOut","indicateRequired","DefaultSelectedOptionComponent","bool","DISPLAY_FLEX","display"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\nimport classNames from 'classnames'\r\n\r\nimport ExpandableList from './ExpandableList'\r\nimport List from './List'\r\nimport Label from './TextInputLabel'\r\nimport Ellipsis from './Ellipsis'\r\nimport Divider from './Divider'\r\nimport WithError from './WithError'\r\n\r\nimport { onBlurForReduxForm } from './utility/redux-form'\r\nimport { onBlur } from './utility/focus'\r\nimport { submitFormOnCtrlEnter, submitContainingForm } from './utility/dom'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\nconst empty_value_option_value = ''\r\n\r\n@reactLifecyclesCompat\r\nexport default class Select extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// A list of selectable options\r\n\t\toptions : PropTypes.arrayOf\r\n\t\t(\r\n\t\t\tPropTypes.shape\r\n\t\t\t({\r\n\t\t\t\t// Option value (may be `undefined`)\r\n\t\t\t\tvalue : PropTypes.any,\r\n\t\t\t\t// Could restrict it to stringifiable types\r\n\t\t\t\t// but I guess this is not required\r\n\t\t\t\t// and one could even use `object`s as `value`s.\r\n\t\t\t\t// // Option value (may be `undefined`)\r\n\t\t\t\t// value : PropTypes.oneOfType([\r\n\t\t\t\t// \tPropTypes.string,\r\n\t\t\t\t// \tPropTypes.number,\r\n\t\t\t\t// \tPropTypes.bool\r\n\t\t\t\t// ]),\r\n\t\t\t\t// Option label (may be `undefined`)\r\n\t\t\t\tlabel : PropTypes.string,\r\n\t\t\t\t// Option icon\r\n\t\t\t\ticon  : PropTypes.oneOfType\r\n\t\t\t\t([\r\n\t\t\t\t\tPropTypes.node,\r\n\t\t\t\t\tPropTypes.func\r\n\t\t\t\t]),\r\n\t\t\t\t// (deprecated, use `optionComponent` instead)\r\n\t\t\t\t// Render custom content (a React component).\r\n\t\t\t\t// Receives `{ value, label }` properties.\r\n\t\t\t\tcontent : PropTypes.func\r\n\t\t\t})\r\n\t\t)\r\n\t\t.isRequired,\r\n\r\n\t\t// HTML form input `name` attribute\r\n\t\tname       : PropTypes.string,\r\n\r\n\t\t// Label which is placed above the select\r\n\t\tlabel      : PropTypes.string,\r\n\r\n\t\t// Placeholder (like \"Choose\")\r\n\t\tplaceholder : PropTypes.string,\r\n\r\n\t\t// Selected option component.\r\n\t\t// (when `<Select/>` is not expanded).\r\n\t\t// Receives properties:\r\n\t\t// `{ ...option }` — All properties of the selected `option` such as `value`, `label`, etc. Each `option` must have a `value` and a `label` (`value` may be `undefined`).\r\n\t\t// `wait` — Passed through `wait` property of the `<Select/>` component. `<Autocomplete/>` renders a `<Select/>` internally and passes `wait={true}` when it's loading options.\r\n\t\t// Can only contain \"inline\" elements like `<span/>`,\r\n\t\t// not `<div/>`s, `<section/`>s, `<h1/>`s or `<p/>`s,\r\n\t\t// because `<button/>`s can't contain \"block\" elements.\r\n\t\t// `display: block` can still be set on `<span/>`s and other \"inline\" elements.\r\n\t\tselectedOptionComponent : PropTypes.elementType,\r\n\r\n\t\t// Option component.\r\n\t\t// (when `<Select/>` is expanded).\r\n\t\t// Receives properties:\r\n\t\t// * `{ ...option }` — All properties of an `option` such as `value`, `label`, etc. Each `option` must have a `value` and a `label` (`value` may be `undefined`).\r\n\t\t// * `selected: boolean` — If this option is selected.\r\n\t\t// * `focused: boolean` — If this option is focused.\r\n\t\t// * `disabled: boolean` — If this option is disabled. Seems to be not used for now.\r\n\t\t// Can only contain \"inline\" elements like `<span/>`,\r\n\t\t// not `<div/>`s, `<section/`>s, `<h1/>`s or `<p/>`s,\r\n\t\t// because `<button/>`s can't contain \"block\" elements.\r\n\t\t// `display: block` can still be set on `<span/>`s and other \"inline\" elements.\r\n\t\toptionComponent : PropTypes.elementType,\r\n\r\n\t\t// Options list alignment.\r\n\t\t// Is \"left\" by default.\r\n\t\talignment : PropTypes.string,\r\n\r\n\t\t// Whether to use native `<select/>`\r\n\t\tnative      : PropTypes.bool.isRequired,\r\n\r\n\t\t// Whether to use native `<select/>` when expanded\r\n\t\tnativeExpanded : PropTypes.bool.isRequired,\r\n\r\n\t\t// Show icon only for selected item,\r\n\t\t// and only if `icon` is `true`.\r\n\t\tsaveOnIcons : PropTypes.bool.isRequired,\r\n\r\n\t\t// Disables this control\r\n\t\tdisabled   : PropTypes.bool,\r\n\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired   : PropTypes.bool.isRequired,\r\n\r\n\t\t// Set to `true` to display the loading indicator\r\n\t\twait       : PropTypes.bool.isRequired,\r\n\r\n\t\t// Selected option value\r\n\t\tvalue      : PropTypes.any,\r\n\r\n\t\t// Is called when an option is selected\r\n\t\tonChange   : PropTypes.func,\r\n\r\n\t\t// Is called when the select is blurred.\r\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\r\n\t\t// so that it gets the parsed `value` in its `onBlur` handler,\r\n\t\t// not the formatted text.\r\n\t\tonBlur     : PropTypes.func,\r\n\r\n\t\t// If `scroll` is `false`, then options list\r\n\t\t// is not limited in height.\r\n\t\t// Is `true` by default (scrollable).\r\n\t\tscroll     : PropTypes.bool.isRequired,\r\n\r\n\t\t// Component CSS class\r\n\t\tclassName  : PropTypes.string,\r\n\r\n\t\t// `<button/>` toggler CSS class\r\n\t\t// (deprecated name, use `selectedOptionClassName` property name instead)\r\n\t\ttoggleClassName : PropTypes.string,\r\n\r\n\t\t// Selected option `<button/>` CSS class.\r\n\t\tselectedOptionClassName : PropTypes.string,\r\n\r\n\t\t// Selected option `<button/>` CSS class when `error` property is passed.\r\n\t\tselectedOptionInvalidClassName : PropTypes.string,\r\n\r\n\t\t// Selected option `<button/>` CSS class when `disabled` property is passed.\r\n\t\tselectedOptionDisabledClassName : PropTypes.string,\r\n\r\n\t\t// CSS style object\r\n\t\tstyle      : PropTypes.object,\r\n\r\n\t\t// If this flag is set to `true`,\r\n\t\t// and `icon` is specified for a selected option,\r\n\t\t// then the selected option will be displayed\r\n\t\t// as icon only, without the label.\r\n\t\ticon       : PropTypes.bool,\r\n\r\n\t\t// If this flag is set to `true`,\r\n\t\t// then it makes `<Select/>` not stretch itself\r\n\t\t// to 100% width by making it `inline-block`.\r\n\t\t// Is set to `true` when `icon` is `true`\r\n\t\t// because it makes sense.\r\n\t\tcompact    : PropTypes.bool,\r\n\r\n\t\t// HTML `tabindex` attribute\r\n\t\ttabIndex   : PropTypes.number,\r\n\r\n\t\t// `aria-label` for the `<Select/>`'s `<button/>`.\r\n\t\t// Deprecated, use `aria-label` instead.\r\n\t\tariaLabel : PropTypes.string\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\tnative : false,\r\n\t\tnativeExpanded : false,\r\n\r\n\t\tsaveOnIcons : false,\r\n\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired : false,\r\n\r\n\t\t// Show `error` (if passed).\r\n\t\tindicateInvalid : true,\r\n\r\n\t\t// Set to `true` to display the loading indicator\r\n\t\twait : false,\r\n\r\n\t\t// Will show scrollbar on overflow.\r\n\t\tscroll : true,\r\n\r\n\t\talignment : 'left'\r\n\t}\r\n\r\n\tstate = {}\r\n\r\n\tfocus = () => this.select.focus()\r\n\r\n\t// On mobile devices the <button/> is focused instead of <select/>\r\n\t// because when <select/> is focused then native mobile <select/> is expanded.\r\n\tfocusToggler = () => this.selectButton.focus()\r\n\r\n\tonCollapse = ({ focusOut }) =>\r\n\t{\r\n\t\tthis.setState({ isExpanded: false })\r\n\r\n\t\tif (!focusOut) {\r\n\t\t\tif (this.isUsingKeyboard) {\r\n\t\t\t\tthis.focus()\r\n\t\t\t} else {\r\n\t\t\t\tthis.focusToggler()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonExpand = () => this.setState({ isExpanded: true })\r\n\r\n\texpand     = () => this.list.expand()\r\n\tcollapse   = () => this.list.collapse()\r\n\ttoggle     = () => this.list.toggle()\r\n\r\n\tstoreListRef = (ref) => this.list = ref\r\n\tstoreSelectNode = (node) => this.select = node\r\n\tstoreSelectButton = (node) => this.selectButton = node\r\n\tstoreInputComponentNode = (node) => this.inputComponentNode = node\r\n\tstoreContainerNode = (node) => this.container = node\r\n\r\n\tgetSelectButton = () => this.selectButton\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tclearTimeout(this.blurTimer)\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tupward,\r\n\t\t\ticon,\r\n\t\t\tcompact,\r\n\t\t\tscroll,\r\n\t\t\tscrollMaxItems,\r\n\t\t\tscrollIntoView,\r\n\t\t\talignment,\r\n\t\t\tsaveOnIcons,\r\n\t\t\tnative,\r\n\t\t\tdisabled,\r\n\t\t\trequired,\r\n\t\t\tplaceholder,\r\n\t\t\toptions,\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tindicateInvalid,\r\n\t\t\terror,\r\n\t\t\tcloseButtonIcon,\r\n\t\t\tcloseLabel,\r\n\t\t\toptionComponent,\r\n\t\t\tselectedOptionComponent,\r\n\t\t\twait,\r\n\t\t\tstyle,\r\n\t\t\tclassName\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst {\r\n\t\t\tisExpanded,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst topLabel = this.getTopLabel()\r\n\r\n\t\treturn (\r\n\t\t\t<WithError\r\n\t\t\t\tsetRef={this.storeContainerNode}\r\n\t\t\t\terror={error}\r\n\t\t\t\tindicateInvalid={indicateInvalid}\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'rrui__select', {\r\n\t\t\t\t\t'rrui__select--compact' : compact || icon,\r\n\t\t\t\t\t'rrui__select--focus'   : isFocused\r\n\t\t\t\t})}>\r\n\r\n\t\t\t\t<div\r\n\t\t\t\t\tref={this.storeInputComponentNode}\r\n\t\t\t\t\tstyle={selectedOptionComponent && DISPLAY_FLEX}\r\n\t\t\t\t\tclassName={selectedOptionComponent ? undefined : 'rrui__input'}>\r\n\r\n\t\t\t\t\t{ wait && <Ellipsis/> }\r\n\r\n\t\t\t\t\t{/* Could use a wrapping `<label/>` here\r\n\t\t\t\t\t    but except the native `<select/>` there's\r\n\t\t\t\t\t    also a `<button/>` so they can't both\r\n\t\t\t\t\t    be wrapped in a `<label/>`.\r\n\t\t\t\t\t    In some future major version, when `--focus`\r\n\t\t\t\t\t    classes are added, the `<button/>` can be\r\n\t\t\t\t\t    moved out of the wrapping `<label/>`. */}\r\n\t\t\t\t\t{/* https://www.w3.org/TR/html50/forms.html#category-label */}\r\n\r\n\t\t\t\t\t{/* A transparent native `<select/>` on top\r\n\t\t\t\t\t    in case of `nativeExpanded={true}`.\r\n\t\t\t\t\t    (for better UX on mobile devices).\r\n\t\t\t\t\t    In case of `nativeExpanded={false}`\r\n\t\t\t\t\t    the native `<select/>` can be used for\r\n\t\t\t\t\t    javascriptless `<form/>` submission.\r\n\t\t\t\t\t    In case of `native={true}` it's just a\r\n\t\t\t\t\t    native `<select/>`. */}\r\n\t\t\t\t\t{ this.renderNativeSelect() }\r\n\r\n\t\t\t\t\t{/* The currently selected option */}\r\n\t\t\t\t\t{ !native && this.renderSelectButton() }\r\n\r\n\t\t\t\t\t{/* Top Label */}\r\n\t\t\t\t\t{/* (this label is placed after the \"selected\" button\r\n\t\t\t\t\t     to utilize the CSS `+` selector) */}\r\n\t\t\t\t\t{/* If the `placeholder` wasn't specified\r\n\t\t\t\t\t    but `label` was and no option is currently selected\r\n\t\t\t\t\t    then the `label` becomes the `placeholder`\r\n\t\t\t\t\t    until something is selected */}\r\n\t\t\t\t\t{ topLabel &&\r\n\t\t\t\t\t\t<Label\r\n\t\t\t\t\t\t\taria-hidden\r\n\t\t\t\t\t\t\tvalue={ value }\r\n\t\t\t\t\t\t\trequired={ required }\r\n\t\t\t\t\t\t\tinvalid={ indicateInvalid && error }\r\n\t\t\t\t\t\t\tfloats={ false }>\r\n\t\t\t\t\t\t\t{ topLabel }\r\n\t\t\t\t\t\t</Label>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* The list of selectable options */}\r\n\t\t\t\t\t{ this.shouldShowOptionsList() &&\r\n\t\t\t\t\t\t<ExpandableList\r\n\t\t\t\t\t\t\tref={this.storeListRef}\r\n\t\t\t\t\t\t\taria-label={this.getAriaLabel()}\r\n\t\t\t\t\t\t\taria-required={required && isEmptyValue(value) ? true : undefined}\r\n\t\t\t\t\t\t\taria-invalid={error && indicateInvalid ? true : undefined}\r\n\t\t\t\t\t\t\tupward={upward}\r\n\t\t\t\t\t\t\talignment={alignment}\r\n\t\t\t\t\t\t\tscrollIntoView={scrollIntoView}\r\n\t\t\t\t\t\t\tscrollMaxItems={scroll === false ? 0 : scrollMaxItems}\r\n\t\t\t\t\t\t\ttabbable={false}\r\n\t\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\t\tonChange={this.setValue}\r\n\t\t\t\t\t\t\tonCollapse={this.onCollapse}\r\n\t\t\t\t\t\t\tonExpand={this.onExpand}\r\n\t\t\t\t\t\t\tgetTogglerNode={this.getSelectButton}\r\n\t\t\t\t\t\t\tonFocusIn={this.onFocusIn}\r\n\t\t\t\t\t\t\tonFocusOut={this.onFocusOut}\r\n\t\t\t\t\t\t\tcloseButtonIcon={closeButtonIcon}\r\n\t\t\t\t\t\t\tcloseLabel={closeLabel}\r\n\t\t\t\t\t\t\tclassName={classNames('rrui__shadow', 'rrui__options-list',\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t'rrui__options-list--left-aligned'  : alignment === 'left',\r\n\t\t\t\t\t\t\t\t'rrui__options-list--right-aligned' : alignment === 'right'\r\n\t\t\t\t\t\t\t})}>\r\n\r\n\t\t\t\t\t\t\t{options.map((option, i) => (\r\n\t\t\t\t\t\t\t\t<List.Item\r\n\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\tvalue={option.value}\r\n\t\t\t\t\t\t\t\t\ticon={option.divider || saveOnIcons ? undefined : option.icon}\r\n\t\t\t\t\t\t\t\t\tcomponent={option.divider ? undefined : optionComponent}\r\n\t\t\t\t\t\t\t\t\titem={option.divider ? undefined : (optionComponent ? option : undefined)}>\r\n\t\t\t\t\t\t\t\t\t{option.divider ? <Divider/> :\r\n\t\t\t\t\t\t\t\t\t\t(optionComponent ? undefined : (option.content ? option.content(option) : option.label))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ExpandableList>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</WithError>\r\n\t\t)\r\n\t}\r\n\r\n\trenderSelectButton()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\twait,\r\n\t\t\tvalue,\r\n\t\t\tdisabled,\r\n\t\t\trequired,\r\n\t\t\ticon,\r\n\t\t\ttitle,\r\n\t\t\tnative,\r\n\t\t\tnativeExpanded,\r\n\t\t\ttoggleClassName,\r\n\t\t\tselectedOptionClassName,\r\n\t\t\tselectedOptionInvalidClassName,\r\n\t\t\tselectedOptionDisabledClassName,\r\n\t\t\tindicateInvalid,\r\n\t\t\terror,\r\n\t\t\tselectedOptionComponent: SelectedOptionComponent\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst { isExpanded } = this.state\r\n\r\n\t\tconst selected = this.getSelectedOption()\r\n\r\n\t\tconst selectedOptionLabel = selected && selected.label || this.getPlaceholder()\r\n\t\tconst showIconOnly = icon && selected && selected.icon\r\n\r\n\t\t// ARIA (accessibility) roles info:\r\n\t\t// https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html\r\n\t\t//\r\n\t\t// `aria-haspopup`:\r\n\t\t// https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup\r\n\t\t// WAI-ARIA 1.1 is not yet supported, so not using `aria-haspopup=\"listbox\"`.\r\n\r\n\t\t// This button could be focusable in case of !native && !nativeExpanded.\r\n\t\t// In case of nativeExpanded if this button was focusable then the user would\r\n\t\t// tab to the button and press Spacebar key and there would be no way to\r\n\t\t// expand the native select so the keyboard user would be stuck.\r\n\t\t// Because of this, this button is never tabbable and native select always is.\r\n\r\n\t\treturn (\r\n\t\t\t<button\r\n\t\t\t\tref={ this.storeSelectButton }\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t\tdisabled={ disabled }\r\n\t\t\t\tonClick={ this.onClick }\r\n\t\t\t\tonKeyDown={ this.onKeyDown }\r\n\t\t\t\tonFocus={ this.onFocusIn }\r\n\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\ttabIndex={ -1 }\r\n\t\t\t\ttitle={ title }\r\n\t\t\t\taria-label={ this.getAriaLabel() || (showIconOnly ? selectedOptionLabel : undefined) }\r\n\t\t\t\taria-expanded={ isExpanded ? true : false }\r\n\t\t\t\tclassName={ classNames\r\n\t\t\t\t(\r\n\t\t\t\t\t'rrui__button-reset',\r\n\t\t\t\t\t'rrui__outline',\r\n\t\t\t\t\t'rrui__select__button',\r\n\t\t\t\t\ttoggleClassName,\r\n\t\t\t\t\tselectedOptionClassName,\r\n\t\t\t\t\tselectedOptionInvalidClassName && SelectedOptionComponent && indicateInvalid && error,\r\n\t\t\t\t\tselectedOptionDisabledClassName && SelectedOptionComponent && disabled,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__input-element': !SelectedOptionComponent,\r\n\t\t\t\t\t\t'rrui__select__button--empty'    : !SelectedOptionComponent && isEmptyValue(value) && !this.hasEmptyOption(),\r\n\t\t\t\t\t\t'rrui__select__button--invalid'  : !SelectedOptionComponent && indicateInvalid && error,\r\n\t\t\t\t\t\t'rrui__select__button--disabled' : !SelectedOptionComponent && disabled\r\n\t\t\t\t\t}\r\n\t\t\t\t) }>\r\n\t\t\t\t{SelectedOptionComponent\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<SelectedOptionComponent\r\n\t\t\t\t\t\twait={wait}\r\n\t\t\t\t\t\t{...selected}/>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<DefaultSelectedOptionComponent\r\n\t\t\t\t\t\tindicateRequired={!this.getTopLabel() && required && isEmptyValue(value)}\r\n\t\t\t\t\t\twait={wait}\r\n\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\tlabel={selectedOptionLabel}\r\n\t\t\t\t\t\ticon={showIconOnly ? React.createElement(selected.icon, { value, label: selectedOptionLabel }) : undefined}/>\r\n\t\t\t\t}\r\n\t\t\t</button>\r\n\t\t)\r\n\t}\r\n\r\n\trenderNativeSelect()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tname,\r\n\t\t\tvalue,\r\n\t\t\tlabel,\r\n\t\t\tdisabled,\r\n\t\t\trequired,\r\n\t\t\tnative,\r\n\t\t\tnativeExpanded,\r\n\t\t\terror,\r\n\t\t\tindicateInvalid,\r\n\t\t\ttabIndex\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn (\r\n\t\t\t<select\r\n\t\t\t\tref={ this.storeSelectNode }\r\n\t\t\t\tname={ name }\r\n\t\t\t\tvalue={ isEmptyValue(value) ? empty_value_option_value : value }\r\n\t\t\t\tdisabled={ disabled }\r\n\t\t\t\tonKeyDown={ this.nativeSelectOnKeyDown }\r\n\t\t\t\tonMouseDown={ this.nativeSelectOnMouseDown }\r\n\t\t\t\tonChange={ this.nativeSelectOnChange }\r\n\t\t\t\tonFocus={ this.onFocusIn }\r\n\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\ttabIndex={ tabIndex }\r\n\t\t\t\taria-label={ this.getAriaLabel() }\r\n\t\t\t\taria-required={ required && isEmptyValue(value) ? true : undefined }\r\n\t\t\t\taria-invalid={ error && indicateInvalid ? true : undefined }\r\n\t\t\t\tclassName={ classNames(\r\n\t\t\t\t\t// `:focus` style is implemented via border color\r\n\t\t\t\t\t// so outline can be muted safely here.\r\n\t\t\t\t\t'rrui__outline',\r\n\t\t\t\t\t'rrui__select__native', {\r\n\t\t\t\t\t\t'rrui__select__native--overlay' : !native,\r\n\t\t\t\t\t\t'rrui__select__native--invalid' : indicateInvalid && error\r\n\t\t\t\t\t}\r\n\t\t\t\t) }>\r\n\t\t\t\t{this.renderNativeSelectOptions()}\r\n\t\t\t</select>\r\n\t\t)\r\n\t}\r\n\r\n\trenderNativeSelectOptions()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\toptions,\r\n\t\t\tvalue,\r\n\t\t\tplaceholder\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tlet empty_option_present = false\r\n\r\n\t\tconst rendered_options = options.map((option, i) =>\r\n\t\t{\r\n\t\t\tlet { value, label, divider } = option\r\n\r\n\t\t\tif (!divider && isEmptyValue(value))\r\n\t\t\t{\r\n\t\t\t\tempty_option_present = true\r\n\t\t\t\tvalue = empty_value_option_value\r\n\t\t\t}\r\n\r\n\t\t\treturn this.renderNativeSelectOption(i, value, label, divider === true, divider)\r\n\t\t})\r\n\r\n\t\tif (isEmptyValue(value) && !empty_option_present)\r\n\t\t{\r\n\t\t\trendered_options.unshift(this.renderNativeSelectOption(-1, undefined, placeholder, true))\r\n\t\t}\r\n\r\n\t\treturn rendered_options\r\n\t}\r\n\r\n\trenderNativeSelectOption(key, value, label, nonSelectable, isDivider)\r\n\t{\r\n\t\treturn (\r\n\t\t\t<option\r\n\t\t\t\tkey={ key }\r\n\t\t\t\tvalue={ isEmptyValue(value) ? '' : value }\r\n\t\t\t\thidden={ nonSelectable && !isDivider ? true : undefined }\r\n\t\t\t\tdisabled={ nonSelectable ? true : undefined }\r\n\t\t\t\tclassName={ classNames('rrui__select__native-option', {\r\n\t\t\t\t\t'rrui__select__native-option--divider': isDivider\r\n\t\t\t\t})}>\r\n\t\t\t\t{ label }\r\n\t\t\t</option>\r\n\t\t)\r\n\t}\r\n\r\n\tnativeSelectOnKeyDown = (event) =>\r\n\t{\r\n\t\tthis.isUsingKeyboard = true\r\n\r\n\t\tif (this.shouldShowOptionsList())\r\n\t\t{\r\n\t\t\t// Native select is the main focusable element now\r\n\t\t\t// even when the custom select is rendered.\r\n\t\t\t// this.focusToggler()\r\n\t\t\tthis.onKeyDownFromNativeSelect = true\r\n\t\t\tthis.onKeyDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\tnativeSelectOnMouseDown = (event) =>\r\n\t{\r\n\t\tif (this.shouldShowOptionsList())\r\n\t\t{\r\n\t\t\tevent.preventDefault()\r\n\t\t\t// Native select is the main focusable element now\r\n\t\t\t// even when the custom select is rendered.\r\n\t\t\t// this.focusToggler()\r\n\t\t\tthis.toggle()\r\n\t\t}\r\n\t}\r\n\r\n\tnativeSelectOnChange = (event) =>\r\n\t{\r\n\t\tconst { native, nativeExpanded } = this.props\r\n\r\n\t\tlet value = event.target.value\r\n\r\n\t\t// Convert back from an empty string to `undefined`\r\n\t\tif (value === empty_value_option_value)\r\n\t\t{\r\n\t\t\t// `null` is not accounted for, use `undefined` instead.\r\n\t\t\tvalue = undefined\r\n\t\t}\r\n\r\n\t\tthis.setValue(value)\r\n\r\n\t\t// Firefox has a bug:\r\n\t\t// Spacebar key on native `<select/>` is not being \"preventDefault\"ed.\r\n\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=1428992\r\n\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=1019630\r\n\t\t// https://stackoverflow.com/questions/15141398/cannot-preventdefault-via-firefox-on-a-select\r\n\t\t// This workaround hides the custom `<Select/>`\r\n\t\t// when a user selects something in the native `<select/>`\r\n\t\t// which expands over the custom one in Firefox due to the bug.\r\n\t\tif (navigator.userAgent.toLowerCase().indexOf('firefox') >= 0) {\r\n\t\t\tif (!native && !nativeExpanded) {\r\n\t\t\t\tthis.collapse()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonClick = (event) =>\r\n\t{\r\n\t\tconst { disabled, nativeExpanded } = this.props\r\n\r\n\t\tif (!disabled) {\r\n\t\t\tthis.toggle()\r\n\t\t}\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tconst { disabled, value, required } = this.props\r\n\t\tconst { isExpanded } = this.state\r\n\r\n\t\t// Reset \"event came from native select\" flag.\r\n\t\tconst fromNativeSelect = this.onKeyDownFromNativeSelect\r\n\t\tthis.onKeyDownFromNativeSelect = false\r\n\r\n\t\tif (disabled) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (!isExpanded) {\r\n\t\t\tif (submitFormOnCtrlEnter(event, this.selectButton)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tswitch (event.keyCode)\r\n\t\t{\r\n\t\t\t// \"Up\" arrow.\r\n\t\t\t// Select the previous item (if present).\r\n\t\t\tcase 38:\r\n\t\t\t// \"Down\" arrow.\r\n\t\t\t// Select the next item (if present).\r\n\t\t\tcase 40:\r\n\t\t\t\t// Firefox has a bug:\r\n\t\t\t\t// Up/Down arrow keys on native `<select/>` are not being \"preventDefault\"ed.\r\n\t\t\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=1428992\r\n\t\t\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=1019630\r\n\t\t\t\t// https://stackoverflow.com/questions/15141398/cannot-preventdefault-via-firefox-on-a-select\r\n\t\t\t\t// This workaround doesn't expand the custom `<Select/>`\r\n\t\t\t\t// when a user presses an Up/Down arrow key on the native `<select/>`.\r\n\t\t\t\tif (navigator.userAgent.toLowerCase().indexOf('firefox') >= 0) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\treturn this.list.onKeyDown(event)\r\n\r\n\t\t\t// \"Enter\".\r\n\t\t\tcase 13:\r\n\t\t\t\t// Submit containing `<form/>`.\r\n\t\t\t\t// Expand otherwise.\r\n\t\t\t\tif ((required && isEmptyValue(value)) || !submitContainingForm(this.selectButton)) {\r\n\t\t\t\t\tthis.expand()\r\n\t\t\t\t}\r\n\t\t\t\treturn event.preventDefault()\r\n\r\n\t\t\t// \"Spacebar\".\r\n\t\t\tcase 32:\r\n\t\t\t\tif (fromNativeSelect)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Firefox has a bug:\r\n\t\t\t\t\t// Spacebar key on native `<select/>` is not being \"preventDefault\"ed.\r\n\t\t\t\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=1428992\r\n\t\t\t\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=1019630\r\n\t\t\t\t\t// https://stackoverflow.com/questions/15141398/cannot-preventdefault-via-firefox-on-a-select\r\n\t\t\t\t\tevent.preventDefault()\r\n\r\n\t\t\t\t\tthis.expand()\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\thasEmptyOption()\r\n\t{\r\n\t\tconst { options } = this.props\r\n\r\n\t\tfor (const option of options) {\r\n\t\t\tif (!option.divider && isEmptyValue(option.value)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false\r\n\t}\r\n\r\n\tgetSelectedOption()\r\n\t{\r\n\t\tconst { options, value } = this.props\r\n\r\n\t\tfor (const option of options)\r\n\t\t{\r\n\t\t\tif (!option.divider && option.value === value)\r\n\t\t\t{\r\n\t\t\t\treturn option\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetAriaLabel()\r\n\t{\r\n\t\tconst {\r\n\t\t\t// Deprecated, use `aria-label` instead.\r\n\t\t\tariaLabel,\r\n\t\t\tlabel\r\n\t\t} = this.props\r\n\r\n\t\treturn this.props['aria-label'] || ariaLabel || label\r\n\t}\r\n\r\n\tgetTopLabel()\r\n\t{\r\n\t\tconst { label, placeholder, value } = this.props\r\n\r\n\t\tif (isEmptyValue(value) && !placeholder) {\r\n\t\t\t// Label will be shown in placeholder's place\r\n\t\t\t// so don't show it as a label to prevent duplication.\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\treturn label\r\n\t}\r\n\r\n\tgetPlaceholder()\r\n\t{\r\n\t\tconst { label, placeholder, value } = this.props\r\n\r\n\t\tif (isEmptyValue(value)) {\r\n\t\t\treturn placeholder || label\r\n\t\t}\r\n\t}\r\n\r\n\tshouldShowOptionsList()\r\n\t{\r\n\t\tconst { native, nativeExpanded } = this.props\r\n\t\treturn !native && !nativeExpanded\r\n\t}\r\n\r\n\tsetValue = (newValue) =>\r\n\t{\r\n\t\tconst { value, onChange } = this.props\r\n\r\n\t\t// Call `onChange` only if the `value` did change.\r\n\t\tif (newValue !== value) {\r\n\t\t\tonChange(newValue)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tclearTimeout(this.blurTimer)\r\n\t\tthis.blurTimer = onBlur(event, this.onFocusOut, () => this.container)\r\n\t}\r\n\r\n\tonFocusOut = (event) =>\r\n\t{\r\n\t\tconst { native, nativeExpanded, onBlur, value } = this.props\r\n\r\n\t\tif (!native && !nativeExpanded) {\r\n\t\t\t// `window.rruiCollapseOnFocusOut` can be used\r\n\t\t\t// for debugging expandable contents.\r\n\t\t\tif (window.rruiCollapseOnFocusOut !== false) {\r\n\t\t\t\tthis.collapse()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// // Collapse the options `<List/>` if it's expanded.\r\n\t\t// if (this.list) {\r\n\t\t// \tthis.list.onBlur(event)\r\n\t\t// }\r\n\r\n\t\tthis._onFocusOut()\r\n\r\n\t\tif (onBlur) {\r\n\t\t\tonBlurForReduxForm(onBlur, event, value)\r\n\t\t}\r\n\t}\r\n\r\n\tonFocusIn    = () => this.setState({ isFocused: true })\r\n\t_onFocusOut = () => this.setState({ isFocused: false })\r\n}\r\n\r\n// Using indexes instead for keys.\r\n// // There can be an `undefined` value,\r\n// // so just `{ value }` won't do here.\r\n// function getOptionKey(value) {\r\n// \treturn isEmptyValue(value) ? '@@rrui/empty' : value\r\n// }\r\n\r\nfunction isEmptyValue(value)\r\n{\r\n\treturn value === null || value === undefined\r\n}\r\n\r\nfunction DefaultSelectedOptionComponent({\r\n\tvalue,\r\n\tlabel,\r\n\ticon,\r\n\tindicateRequired,\r\n\twait\r\n}) {\r\n\t// The `<span/>` wrapper is required for vertical centering.\r\n\t// http://stackoverflow.com/questions/35464067/flexbox-not-working-on-button-element-in-some-browsers\r\n\treturn (\r\n\t\t<span className=\"rrui__select__selected-content\">\r\n\t\t\t{/* Selected option label (or icon) */}\r\n\t\t\t<span\r\n\t\t\t\tclassName={classNames('rrui__select__selected-label', 'rrui__text-line', {\r\n\t\t\t\t\t'rrui__select__selected-label--required': indicateRequired\r\n\t\t\t\t})}>\r\n\t\t\t\t{icon || label}\r\n\t\t\t</span>\r\n\t\t\t{/* An arrow */}\r\n\t\t\t{!wait && <span className=\"rrui__select__arrow\"/>}\r\n\t\t</span>\r\n\t)\r\n}\r\n\r\nDefaultSelectedOptionComponent.propTypes = {\r\n\tvalue: PropTypes.any,\r\n\tlabel: PropTypes.string,\r\n\ticon: PropTypes.node,\r\n\tindicateRequired: PropTypes.bool,\r\n\twait: PropTypes.bool\r\n}\r\n\r\n/* `display: flex` fixes the incorrect toggler `<button/>` height\r\n   in cases when custom `selectedOptionComponent` is used.\r\n   It also removes the requirement for the `selectedOptionComponent`\r\n   containing `<span/>` to be `display: block`. */\r\nconst DISPLAY_FLEX = {\r\n\tdisplay: 'flex'\r\n}"]},"metadata":{},"sourceType":"script"}